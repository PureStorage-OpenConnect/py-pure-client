
Examples
--------
.. _Instantiating a Client:

Instantiating a Client
~~~~~~~~~~~~~~~~~~~~~~

All of the examples on this page assume that you have instantiated a client object in this way and
also have these imports. Different methods of authentication are discussed in :doc:`quick_start`.

.. code-block:: python

    import pypureclient
    from pypureclient import flashblade

    try:
        # login to the array with your API_TOKEN
        client = flashblade.Client(target='10.255.9.28', api_token=API_TOKEN)
    except pypureclient.exceptions.PureError as e:
        print("Exception when logging in to the array: %s\n" % e)

Common Fields
~~~~~~~~~~~~~

ids, names
''''''''''

Instead of getting all things, you can just get values for specific items.

.. code-block:: python

    # list a subset of admin accounts by name with api token exposed
    res = client.get_admins(names=['pureuser'], expose_api_token=True)

If you know the id of the object (``pureuser`` in this case) you can use ``ids`` instead of ``names``

.. code-block:: python

    # list a subset of admin accounts by id
    res = client.get_admins(ids=['10314f42-020d-7080-8013-000ddt400090'])

There are a number of other fields that follow the same logic such as ``bucket_names`` and ``bucket_ids``. The usage
will be the same and in these cases the object is clearly referenced by the field name.

filter
''''''

Check :doc:`quick_start` for more information

sort
''''

You can sort on a given field. By default it is in increasing order.

.. code-block:: python

    # list filesystems and sort by provisioned
    res = client.get_file_systems(sort="provisioned")
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

If you would like descending order, insert a ``-`` after the field.

.. code-block:: python

    # list filesystems and sort by provisioned
    res = client.get_file_systems(sort="provisioned-")
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

For nested fields, use a ``.``

.. code-block:: python

    # list and sort by name in descendant order
    res = client.get_file_systems_policies(sort="policy.name-")
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

offset, limit, continuation_token
'''''''''''''''''''''''''''''''''

Use ``offset`` to ignore the first couple items from the collection.

.. code-block:: python

    res = client.get_file_systems(offset=3)
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

Use ``limit`` to limit the number of results.

.. code-block:: python

    # list first five filesystems and sort by provisioned in descendant order
    res = client.get_file_systems(limit=5, sort="provisioned-")
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

You can see that ``res`` will contain a ``continuation_token`` field. You can use this to print out the rest of the results.

.. code-block:: python

    # list all remaining file systems using continuation token from above
    res = client.get_file_systems(continuation_token=res.continuation_token)
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

total_only
''''''''''

If you don't want the individual results, you can use ``total_only``.

.. code-block:: python

    # total instantaneous performance across 2 targets
    res = client.get_targets_performance_replication(names=['s3target1', 's3target2'],
                                                     total_only=True)
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

context_names
'''''''''''''

Use `context_names` if you want to perform an operation on a different execution context. The execution context must
reference an array or arrays in the same fleet. If not specified, it defaults to the name of the array that received
this request. If the request is anything other than a GET request, the `context_names` must be an array of size one,
for example:

.. code-block:: python
    # create a filesystem with the name "myfs" on the FlashBlade "other-fb"
    res = client.post_file_systems(names=["myfs"], context_names=["other-fb"])
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

If the request is a GET request, `context_names` may contain multiple elements. This will execute the request on all
specified contexts and return the merged response. For example:

.. code-block:: python
    # list filesystems on the FlashBlades "other-fb" and "another-fb"
    res = client.get_file_systems(context_names=["other-fb", "another-fb"])
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

Other parameters provided with the request, such as names of filesystems or snapshots, are resolved relative to the
provided *execution context*.

allow_errors
''''''''''''

Use `allow_errors` if you want to allow errors in the response, along the results. This can only occur when the
*execution context* consists of multiple arrays and executing the operation on one of the arrays fails.

If set to *true*, the API will allow the operation to continue even if there are errors. Any errors will be returned
in the errors field of the response. If set to *false*, the operation will fail if there are any errors.

.. code-block:: python
    # list filesystems on the FlashBlades "other-fb" and "another-fb" and allow errors
    res = client.get_file_systems(context_names=["other-fb", "another-fb"], allow_errors=True)
    print(res)
    if type(res) == pypureclient.responses.ValidResponse:
        print(list(res.items))

