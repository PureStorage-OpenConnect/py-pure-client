# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com)   The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange).  OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications.  Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html).  [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.pure1.Pure1_1_0.models.current_metric import CurrentMetric
from pypureclient.pure1.Pure1_1_0.models.fixed_reference import FixedReference
from pypureclient.pure1.Pure1_1_0.models.license_resource_reference import LicenseResourceReference
from pypureclient.pure1.Pure1_1_0.models.marketplace_partner import MarketplacePartner


class SubscriptionLicense(BaseModel):
    """
    A license belonging to a Pure1 subscription.  # noqa: E501
    """
    as_of: Optional[StrictInt] = Field(default=None, alias="_as_of", description="The freshness of the data (timestamp in millis since epoch).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name chosen by the system.")
    average_on_demand: Optional[CurrentMetric] = Field(default=None, description="Estimated daily on-demand usage of the license from the current calendar quarter to date.")
    expiration_date: Optional[StrictInt] = Field(default=None, description="Date when the license expires. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    marketplace_partner: Optional[MarketplacePartner] = Field(default=None, description="Reference information about the marketplace partner of this license.")
    reservation: Optional[CurrentMetric] = Field(default=None, description="Current reservation amount of the license.")
    resources: Optional[conlist(LicenseResourceReference)] = Field(default=None, description="References to the resources that operate under this license.")
    service_tier: Optional[StrictStr] = Field(default=None, description="The tier of the service for the license.")
    start_date: Optional[StrictInt] = Field(default=None, description="Date when the license starts. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    subscription: Optional[FixedReference] = Field(default=None, description="A reference to which subscription this license belongs.")
    usage: Optional[CurrentMetric] = Field(default=None, description="Usage of the license, averaged over the last day.")
    __properties = ["_as_of", "id", "name", "average_on_demand", "expiration_date", "marketplace_partner", "reservation", "resources", "service_tier", "start_date", "subscription", "usage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "as_of",
                "id",
                "name",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of average_on_demand
        if _include_in_dict('average_on_demand', include_readonly, excluded_fields, none_fields):
            _dict['average_on_demand'] = self.average_on_demand.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of marketplace_partner
        if _include_in_dict('marketplace_partner', include_readonly, excluded_fields, none_fields):
            _dict['marketplace_partner'] = self.marketplace_partner.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of reservation
        if _include_in_dict('reservation', include_readonly, excluded_fields, none_fields):
            _dict['reservation'] = self.reservation.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        if _include_in_dict('resources', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.resources:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription
        if _include_in_dict('subscription', include_readonly, excluded_fields, none_fields):
            _dict['subscription'] = self.subscription.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of usage
        if _include_in_dict('usage', include_readonly, excluded_fields, none_fields):
            _dict['usage'] = self.usage.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionLicense:
        """Create an instance of SubscriptionLicense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionLicense:
        """Create an instance of SubscriptionLicense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionLicense.parse_obj(obj)

        _obj = SubscriptionLicense.construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "average_on_demand": CurrentMetric.from_dict(obj.get("average_on_demand")) if obj.get("average_on_demand") is not None else None,
            "expiration_date": obj.get("expiration_date"),
            "marketplace_partner": MarketplacePartner.from_dict(obj.get("marketplace_partner")) if obj.get("marketplace_partner") is not None else None,
            "reservation": CurrentMetric.from_dict(obj.get("reservation")) if obj.get("reservation") is not None else None,
            "resources": [LicenseResourceReference.from_dict(_item) for _item in obj.get("resources")] if obj.get("resources") is not None else None,
            "service_tier": obj.get("service_tier"),
            "start_date": obj.get("start_date"),
            "subscription": FixedReference.from_dict(obj.get("subscription")) if obj.get("subscription") is not None else None,
            "usage": CurrentMetric.from_dict(obj.get("usage")) if obj.get("usage") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

