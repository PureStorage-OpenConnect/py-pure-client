# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com)   The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange).  OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications.  Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html).  [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist
from pypureclient.pure1.Pure1_1_0.models.fixed_reference import FixedReference


class MetricHistory(BaseModel):
    """
    Historical time-series data of a given metric on a resource.
    """
    as_of: Optional[StrictInt] = Field(default=None, alias="_as_of", description="The freshness of the data (timestamp in millis since epoch).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name chosen by the system.")
    aggregation: Optional[StrictStr] = Field(default=None, description="The aggregation of the metric data.")
    data: Optional[conlist(conlist(Union[StrictFloat, StrictInt]))] = Field(default=None, description="The data points of the metric corresponding to the time window, resolution and aggregation. The points are returned in a nested array of 2-element arrays. For each of the 2-element array, the 1st element is the UTC millisecond epoch, and the 2nd element is the value, e.g. [[1519362000000, 11], [1519362030000, 21], ...].")
    resolution: Optional[StrictInt] = Field(default=None, description="The resolution of the metric data in milliseconds.")
    resources: Optional[conlist(FixedReference)] = Field(default=None, description="The references to the resources that the metric data is for. For example, write-iops metric for an array will have one element in this list referencing the array entity. the write-iops from an array to a pod will contain two elements in this list - first element pointing to the array, and second element pointing to the pod.")
    unit: Optional[StrictStr] = Field(default=None, description="The unit of the metric data.")
    __properties = ["_as_of", "id", "name", "aggregation", "data", "resolution", "resources", "unit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "as_of",
                "id",
                "name",
                "aggregation",
                "data",
                "resolution",
                "resources",
                "unit",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        if _include_in_dict('resources', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.resources:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['resources'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> MetricHistory:
        """Create an instance of MetricHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> MetricHistory:
        """Create an instance of MetricHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return MetricHistory.parse_obj(obj)

        _obj = MetricHistory.construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "aggregation": obj.get("aggregation"),
            "data": obj.get("data"),
            "resolution": obj.get("resolution"),
            "resources": [FixedReference.from_dict(_item) for _item in obj.get("resources")] if obj.get("resources") is not None else None,
            "unit": obj.get("unit")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

