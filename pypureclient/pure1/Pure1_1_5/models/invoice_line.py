# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com)   The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange).  OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications.  Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html).  [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conint, conlist
from pypureclient.pure1.Pure1_1_5.models.invoice_line_component import InvoiceLineComponent
from pypureclient.pure1.Pure1_1_5.models.tax import Tax


class InvoiceLine(BaseModel):
    """
    InvoiceLine
    """
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total price of current invoice item, currency is specified in invoice currency.")
    components: Optional[conlist(InvoiceLineComponent)] = Field(default=None, description="The sub-components of current invoice item.")
    description: Optional[StrictStr] = None
    end_date: Optional[StrictInt] = Field(default=None, description="The invoice item end date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    item: Optional[StrictStr] = Field(default=None, description="The name of invoice item.")
    quantity: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The quantity of current invoice item.")
    start_date: Optional[StrictInt] = Field(default=None, description="The invoice item start date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    tax: Optional[Tax] = None
    unit_price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The unit price of current invoice item, currency is specified in invoice currency.")
    __properties = ["amount", "components", "description", "end_date", "item", "quantity", "start_date", "tax", "unit_price"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        if _include_in_dict('components', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.components:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['components'] = _items
        # override the default output from pydantic by calling `to_dict()` of tax
        if _include_in_dict('tax', include_readonly, excluded_fields, none_fields):
            _dict['tax'] = self.tax.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> InvoiceLine:
        """Create an instance of InvoiceLine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> InvoiceLine:
        """Create an instance of InvoiceLine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return InvoiceLine.parse_obj(obj)

        _obj = InvoiceLine.construct(_fields_set=None, **{
            "amount": obj.get("amount"),
            "components": [InvoiceLineComponent.from_dict(_item) for _item in obj.get("components")] if obj.get("components") is not None else None,
            "description": obj.get("description"),
            "end_date": obj.get("end_date"),
            "item": obj.get("item"),
            "quantity": obj.get("quantity"),
            "start_date": obj.get("start_date"),
            "tax": Tax.from_dict(obj.get("tax")) if obj.get("tax") is not None else None,
            "unit_price": obj.get("unit_price")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

