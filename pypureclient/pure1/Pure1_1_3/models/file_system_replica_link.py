# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_3.models.resource_with_location import ResourceWithLocation
from typing import Optional, Set
from typing_extensions import Self

class FileSystemReplicaLink(BaseModel):
    """
    A replica link between two FlashBlade file systems.
    """ # noqa: E501
    as_of: Optional[StrictInt] = Field(default=None, description="The freshness of the data (timestamp in millis since epoch).", alias="_as_of")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    lag: Optional[StrictInt] = Field(default=None, description="Duration, in milliseconds, which represents how far behind the replication `target` is from the `source`.")
    paused: Optional[StrictBool] = Field(default=None, description="Returns `true` if the replica link is paused.")
    recovery_point: Optional[StrictInt] = Field(default=None, description="Time when the last replicated snapshot was created, in milliseconds since the UNIX epoch. (i.e. the recovery point if the file system is promoted.)")
    status: Optional[StrictStr] = Field(default=None, description="Status of the replica link. Values include `replicating`, `idle`, and `unhealthy`.")
    status_details: Optional[StrictStr] = Field(default=None, description="Detailed information about the status of the replica link when it is `unhealthy`.")
    members: Optional[List[ResourceWithLocation]] = Field(default=None, description="The union of source and target file systems in the replica link.")
    sources: Optional[List[ResourceWithLocation]] = Field(default=None, description="The source file systems in the replica link.")
    targets: Optional[List[ResourceWithLocation]] = Field(default=None, description="The target file systems in the replica link.")
    __properties: ClassVar[List[str]] = ["_as_of", "id", "lag", "paused", "recovery_point", "status", "status_details", "members", "sources", "targets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "as_of",
            "id",
            "lag",
            "recovery_point",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in members (list)
        if self.members and (include_readonly or "members" not in excluded_fields):
            _items = []
            for _item_members in self.members:
                if _item_members:
                    _items.append(_item_members.to_dict())
            _dict['members'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in sources (list)
        if self.sources and (include_readonly or "sources" not in excluded_fields):
            _items = []
            for _item_sources in self.sources:
                if _item_sources:
                    _items.append(_item_sources.to_dict())
            _dict['sources'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        if self.targets and (include_readonly or "targets" not in excluded_fields):
            _items = []
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSystemReplicaLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSystemReplicaLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "lag": obj.get("lag"),
            "paused": obj.get("paused"),
            "recovery_point": obj.get("recovery_point"),
            "status": obj.get("status"),
            "status_details": obj.get("status_details"),
            "members": [ResourceWithLocation.from_dict(_item) for _item in obj["members"]] if obj.get("members") is not None else None,
            "sources": [ResourceWithLocation.from_dict(_item) for _item in obj["sources"]] if obj.get("sources") is not None else None,
            "targets": [ResourceWithLocation.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None
        })
        return _obj


