# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pypureclient.pure1.Pure1_1_3.models.fixed_reference import FixedReference
from pypureclient.pure1.Pure1_1_3.models.invoice_line import InvoiceLine
from typing import Optional, Set
from typing_extensions import Self

class Invoice(BaseModel):
    """
    Invoice
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The invoice number, a globally unique identifier for this invoice.")
    var_date: Optional[StrictInt] = Field(default=None, description="The issuance date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.", alias="date")
    status: Optional[StrictStr] = Field(default=None, description="The invoice status. Values include `open` and `paid`.")
    amount: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The total invoice amount, expressed in the currency defined in `currency`.")
    currency: Optional[StrictStr] = Field(default=None, description="The currency of the invoice in ISO 4217 format. This currency applies to the total invoice amount as well as all amounts in line items.")
    due_date: Optional[StrictInt] = Field(default=None, description="The payment due date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    payment_terms: Optional[StrictStr] = Field(default=None, description="The invoice payment terms.")
    ship_date: Optional[StrictInt] = Field(default=None, description="The invoice shipment date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    sales_representative: Optional[StrictStr] = Field(default=None, description="The sales representative that issued the invoice.")
    partner_purchase_order: Optional[StrictStr] = Field(default=None, description="The partner purchase order number.")
    end_user_purchase_order: Optional[StrictStr] = Field(default=None, description="The end user customer purchase order number.")
    end_user_name: Optional[StrictStr] = Field(default=None, description="The end user customer name.")
    lines: Optional[List[InvoiceLine]] = Field(default=None, description="A list of invoice line items.")
    subscription: Optional[FixedReference] = Field(default=None, description="A reference to which subscription this invoice belongs.")
    __properties: ClassVar[List[str]] = ["id", "date", "status", "amount", "currency", "due_date", "payment_terms", "ship_date", "sales_representative", "partner_purchase_order", "end_user_purchase_order", "end_user_name", "lines", "subscription"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lines (list)
        if self.lines and (include_readonly or "lines" not in excluded_fields):
            _items = []
            for _item_lines in self.lines:
                if _item_lines:
                    _items.append(_item_lines.to_dict())
            _dict['lines'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription and (include_readonly or "subscription" not in excluded_fields):
            _dict['subscription'] = self.subscription.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "var_date": obj.get("date"),
            "status": obj.get("status"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "due_date": obj.get("due_date"),
            "payment_terms": obj.get("payment_terms"),
            "ship_date": obj.get("ship_date"),
            "sales_representative": obj.get("sales_representative"),
            "partner_purchase_order": obj.get("partner_purchase_order"),
            "end_user_purchase_order": obj.get("end_user_purchase_order"),
            "end_user_name": obj.get("end_user_name"),
            "lines": [InvoiceLine.from_dict(_item) for _item in obj["lines"]] if obj.get("lines") is not None else None,
            "subscription": FixedReference.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None
        })
        return _obj


