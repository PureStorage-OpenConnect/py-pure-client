# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_3.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class Subscription(BaseModel):
    """
    Subscription
    """ # noqa: E501
    as_of: Optional[StrictInt] = Field(default=None, description="The freshness of the data (timestamp in millis since epoch).", alias="_as_of")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name chosen by the system.")
    expiration_date: Optional[StrictInt] = Field(default=None, description="Date when the subscription expires. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    service: Optional[StrictStr] = Field(default=None, description="The service type of the subscription. Values include `Evergreen//One`, `Evergreen//Flex`, `FlashStack as a Service`, `Storage as a Service`, `PaaS (Block Storage Service)`, `PaaS (File and Object Storage Service)`, `PaaS (Data Protection Service)`, and `Pure1 Subscription`.")
    start_date: Optional[StrictInt] = Field(default=None, description="Date when the subscription starts. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    status: Optional[StrictStr] = Field(default=None, description="Current status of the subscription. Values include `active`, `terminated`, `poc-expired`, and `signed`.")
    initial_name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name that the subscription was started with, never changes.")
    organization: Optional[FixedReference] = Field(default=None, description="The Pure1 organization for the subscription.")
    partner_name: Optional[StrictStr] = Field(default=None, description="The partner who invoices for the subscription.")
    last_updated_date: Optional[StrictInt] = Field(default=None, description="The date of the last amendment to the current subscription. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    subscription_term: Optional[StrictInt] = Field(default=None, description="Length of the subscription in months.")
    __properties: ClassVar[List[str]] = ["_as_of", "id", "name", "expiration_date", "service", "start_date", "status", "initial_name", "organization", "partner_name", "last_updated_date", "subscription_term"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "as_of",
            "id",
            "name",
            "initial_name",
            "partner_name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of organization
        if self.organization and (include_readonly or "organization" not in excluded_fields):
            _dict['organization'] = self.organization.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "expiration_date": obj.get("expiration_date"),
            "service": obj.get("service"),
            "start_date": obj.get("start_date"),
            "status": obj.get("status"),
            "initial_name": obj.get("initial_name"),
            "organization": FixedReference.from_dict(obj["organization"]) if obj.get("organization") is not None else None,
            "partner_name": obj.get("partner_name"),
            "last_updated_date": obj.get("last_updated_date"),
            "subscription_term": obj.get("subscription_term")
        })
        return _obj


