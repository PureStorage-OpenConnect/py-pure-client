# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_3.models.asset_space_total_used_ratio import AssetSpaceTotalUsedRatio
from pypureclient.pure1.Pure1_1_3.models.current_metric import CurrentMetric
from typing import Optional, Set
from typing_extensions import Self

class AssetSpace(BaseModel):
    """
    AssetSpace
    """ # noqa: E501
    total_used: Optional[CurrentMetric] = Field(default=None, description="The total space contributed by customer data.")
    total_used_ratio: Optional[AssetSpaceTotalUsedRatio] = None
    capacity: Optional[CurrentMetric] = Field(default=None, description="The usable capacity of the appliance.")
    __properties: ClassVar[List[str]] = ["total_used", "total_used_ratio", "capacity"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total_used
        if self.total_used and (include_readonly or "total_used" not in excluded_fields):
            _dict['total_used'] = self.total_used.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total_used_ratio
        if self.total_used_ratio and (include_readonly or "total_used_ratio" not in excluded_fields):
            _dict['total_used_ratio'] = self.total_used_ratio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of capacity
        if self.capacity and (include_readonly or "capacity" not in excluded_fields):
            _dict['capacity'] = self.capacity.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AssetSpace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AssetSpace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "total_used": CurrentMetric.from_dict(obj["total_used"]) if obj.get("total_used") is not None else None,
            "total_used_ratio": AssetSpaceTotalUsedRatio.from_dict(obj["total_used_ratio"]) if obj.get("total_used_ratio") is not None else None,
            "capacity": CurrentMetric.from_dict(obj["capacity"]) if obj.get("capacity") is not None else None
        })
        return _obj


