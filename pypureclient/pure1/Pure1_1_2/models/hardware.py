# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_2.models.fixed_reference_fqdn import FixedReferenceFqdn
from typing import Optional, Set
from typing_extensions import Self

class Hardware(BaseModel):
    """
    Hardware
    """ # noqa: E501
    as_of: Optional[StrictInt] = Field(default=None, description="The freshness of the data (timestamp in millis since epoch).", alias="_as_of")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name chosen by the system.")
    arrays: Optional[List[FixedReferenceFqdn]] = Field(default=None, description="The list of arrays where this resource exists. Many resources are on a single array, but some resources, such as pods, can be shared across multiple arrays.")
    details: Optional[StrictStr] = Field(default=None, description="Details about the component if `status` is not `healthy`.")
    identify_enabled: Optional[StrictBool] = Field(default=None, description="If true, the ID light is lit to visually identify the component.")
    model: Optional[StrictStr] = Field(default=None, description="Model number of the hardware component.")
    serial: Optional[StrictStr] = Field(default=None, description="Serial number of the hardware component.")
    slot: Optional[StrictInt] = Field(default=None, description="Slot number occupied by the PCI Express card that hosts the component.")
    speed: Optional[StrictInt] = Field(default=None, description="Speed (in bytes per second) at which the component is operating.")
    status: Optional[StrictStr] = Field(default=None, description="Component status. Values include `critical`, `healthy`, `identifying`, `unhealthy`, `unclaimed`, `unknown`, `unrecognized`, and `unused`.")
    temperature: Optional[StrictInt] = Field(default=None, description="Temperature (in degrees Celsius) reported by the component.")
    type: Optional[StrictStr] = Field(default=None, description="Type of the hardware component. Values include `am`, `chassis`, `controller`, `cooling`, `drive_bay`, `eth_port`, `fan`, `fc_port`, `flash_blade`, `ib_port`, `mgmt_port`, `nvram_bay`, `power_supply`, `sas_module`, `sas_port`, `storage_shelf`, and `temp_sensor`.")
    voltage: Optional[StrictInt] = Field(default=None, description="Voltage (in Volts) reported by the component.")
    __properties: ClassVar[List[str]] = ["_as_of", "id", "name", "arrays", "details", "identify_enabled", "model", "serial", "slot", "speed", "status", "temperature", "type", "voltage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "as_of",
            "id",
            "name",
            "arrays",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in arrays (list)
        if self.arrays and (include_readonly or "arrays" not in excluded_fields):
            _items = []
            for _item_arrays in self.arrays:
                if _item_arrays:
                    _items.append(_item_arrays.to_dict())
            _dict['arrays'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Hardware from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Hardware from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "arrays": [FixedReferenceFqdn.from_dict(_item) for _item in obj["arrays"]] if obj.get("arrays") is not None else None,
            "details": obj.get("details"),
            "identify_enabled": obj.get("identify_enabled"),
            "model": obj.get("model"),
            "serial": obj.get("serial"),
            "slot": obj.get("slot"),
            "speed": obj.get("speed"),
            "status": obj.get("status"),
            "temperature": obj.get("temperature"),
            "type": obj.get("type"),
            "voltage": obj.get("voltage")
        })
        return _obj


