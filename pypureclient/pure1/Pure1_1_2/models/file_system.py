# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_2.models.fixed_reference_fqdn import FixedReferenceFqdn
from pypureclient.pure1.Pure1_1_2.models.http import Http
from pypureclient.pure1.Pure1_1_2.models.nfs import Nfs
from pypureclient.pure1.Pure1_1_2.models.smb import Smb
from typing import Optional, Set
from typing_extensions import Self

class FileSystem(BaseModel):
    """
    FileSystem
    """ # noqa: E501
    as_of: Optional[StrictInt] = Field(default=None, description="The freshness of the data (timestamp in millis since epoch).", alias="_as_of")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name chosen by the system.")
    arrays: Optional[List[FixedReferenceFqdn]] = Field(default=None, description="The list of arrays where this resource exists. Many resources are on a single array, but some resources, such as pods, can be shared across multiple arrays.")
    created: Optional[StrictInt] = Field(default=None, description="Creation time in milliseconds since UNIX epoch.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Is the file system destroyed?")
    fast_remove_directory_enabled: Optional[StrictBool] = Field(default=None, description="On a FlashBlade file system, returns the value of `true` if fast remove directory is enabled and `false` if it is not. On a FlashArray file system, the value is always `null`.")
    hard_limit_enabled: Optional[StrictBool] = Field(default=None, description="On a FlashBlade file system, returns the value of `true` if the file system's size is a hard limit quota and `false` if it is not. On a FlashArray file system, the value is always `null`.")
    http: Optional[Http] = Field(default=None, description="HTTP configuration. On a FlashArray file system, the value is always `null`.")
    nfs: Optional[Nfs] = Field(default=None, description="NFS configuration. On a FlashArray file system, the value is always `null`.")
    provisioned: Optional[StrictInt] = Field(default=None, description="The provisioned size of the file system in bytes. A value of 0 means unlimited. On a FlashArray file system, the value is always `null`.")
    smb: Optional[Smb] = Field(default=None, description="SMB configuration. On a FlashArray file system, the value is always `null`.")
    snapshot_directory_enabled: Optional[StrictBool] = Field(default=None, description="On a FlashBlade file system, returns the value of `true` if snapshot directory is enabled and `false` if it is not. On a FlashArray file system, the value is always `null`.")
    __properties: ClassVar[List[str]] = ["_as_of", "id", "name", "arrays", "created", "destroyed", "fast_remove_directory_enabled", "hard_limit_enabled", "http", "nfs", "provisioned", "smb", "snapshot_directory_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "as_of",
            "id",
            "name",
            "arrays",
            "created",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in arrays (list)
        if self.arrays and (include_readonly or "arrays" not in excluded_fields):
            _items = []
            for _item_arrays in self.arrays:
                if _item_arrays:
                    _items.append(_item_arrays.to_dict())
            _dict['arrays'] = _items
        # override the default output from pydantic by calling `to_dict()` of http
        if self.http and (include_readonly or "http" not in excluded_fields):
            _dict['http'] = self.http.to_dict()
        # override the default output from pydantic by calling `to_dict()` of nfs
        if self.nfs and (include_readonly or "nfs" not in excluded_fields):
            _dict['nfs'] = self.nfs.to_dict()
        # override the default output from pydantic by calling `to_dict()` of smb
        if self.smb and (include_readonly or "smb" not in excluded_fields):
            _dict['smb'] = self.smb.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSystem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSystem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "arrays": [FixedReferenceFqdn.from_dict(_item) for _item in obj["arrays"]] if obj.get("arrays") is not None else None,
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "fast_remove_directory_enabled": obj.get("fast_remove_directory_enabled"),
            "hard_limit_enabled": obj.get("hard_limit_enabled"),
            "http": Http.from_dict(obj["http"]) if obj.get("http") is not None else None,
            "nfs": Nfs.from_dict(obj["nfs"]) if obj.get("nfs") is not None else None,
            "provisioned": obj.get("provisioned"),
            "smb": Smb.from_dict(obj["smb"]) if obj.get("smb") is not None else None,
            "snapshot_directory_enabled": obj.get("snapshot_directory_enabled")
        })
        return _obj


