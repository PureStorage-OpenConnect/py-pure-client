# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_2.models.base_address import BaseAddress
from pypureclient.pure1.Pure1_1_2.models.current_metric import CurrentMetric
from pypureclient.pure1.Pure1_1_2.models.fixed_reference import FixedReference
from pypureclient.pure1.Pure1_1_2.models.license_resource_reference import LicenseResourceReference
from pypureclient.pure1.Pure1_1_2.models.marketplace_partner import MarketplacePartner
from pypureclient.pure1.Pure1_1_2.models.subscription_license_pre_ratio import SubscriptionLicensePreRatio
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionLicense(BaseModel):
    """
    SubscriptionLicense
    """ # noqa: E501
    as_of: Optional[StrictInt] = Field(default=None, description="The freshness of the data (timestamp in millis since epoch).", alias="_as_of")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name chosen by the system.")
    average_on_demand: Optional[CurrentMetric] = Field(default=None, description="Estimated daily on-demand usage of the license from the current calendar quarter to date.")
    expiration_date: Optional[StrictInt] = Field(default=None, description="Date when the license expires. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    marketplace_partner: Optional[MarketplacePartner] = Field(default=None, description="Reference information about the marketplace partner of this license.")
    reservation: Optional[CurrentMetric] = Field(default=None, description="Current reservation amount of the license.")
    resources: Optional[List[LicenseResourceReference]] = Field(default=None, description="References to the resources that operate under this license.")
    service_tier: Optional[StrictStr] = Field(default=None, description="The tier of the service for the license.")
    start_date: Optional[StrictInt] = Field(default=None, description="Date when the license starts. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    subscription: Optional[FixedReference] = Field(default=None, description="A reference to which subscription this license belongs.")
    usage: Optional[CurrentMetric] = Field(default=None, description="Usage of the license, averaged over the last day.")
    site_address: Optional[BaseAddress] = Field(default=None, description="The license site address.")
    last_updated_date: Optional[StrictInt] = Field(default=None, description="The date of the last amendment to the current license. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    pre_ratio: Optional[SubscriptionLicensePreRatio] = None
    quarter_on_demand: Optional[CurrentMetric] = Field(default=None, description="Estimated total on-demand usage of the license of the current calendar quarter to date.")
    __properties: ClassVar[List[str]] = ["_as_of", "id", "name", "average_on_demand", "expiration_date", "marketplace_partner", "reservation", "resources", "service_tier", "start_date", "subscription", "usage", "site_address", "last_updated_date", "pre_ratio", "quarter_on_demand"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "as_of",
            "id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of average_on_demand
        if self.average_on_demand and (include_readonly or "average_on_demand" not in excluded_fields):
            _dict['average_on_demand'] = self.average_on_demand.to_dict()
        # override the default output from pydantic by calling `to_dict()` of marketplace_partner
        if self.marketplace_partner and (include_readonly or "marketplace_partner" not in excluded_fields):
            _dict['marketplace_partner'] = self.marketplace_partner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reservation
        if self.reservation and (include_readonly or "reservation" not in excluded_fields):
            _dict['reservation'] = self.reservation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in resources (list)
        if self.resources and (include_readonly or "resources" not in excluded_fields):
            _items = []
            for _item_resources in self.resources:
                if _item_resources:
                    _items.append(_item_resources.to_dict())
            _dict['resources'] = _items
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription and (include_readonly or "subscription" not in excluded_fields):
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage and (include_readonly or "usage" not in excluded_fields):
            _dict['usage'] = self.usage.to_dict()
        # override the default output from pydantic by calling `to_dict()` of site_address
        if self.site_address and (include_readonly or "site_address" not in excluded_fields):
            _dict['site_address'] = self.site_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pre_ratio
        if self.pre_ratio and (include_readonly or "pre_ratio" not in excluded_fields):
            _dict['pre_ratio'] = self.pre_ratio.to_dict()
        # override the default output from pydantic by calling `to_dict()` of quarter_on_demand
        if self.quarter_on_demand and (include_readonly or "quarter_on_demand" not in excluded_fields):
            _dict['quarter_on_demand'] = self.quarter_on_demand.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionLicense from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionLicense from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "average_on_demand": CurrentMetric.from_dict(obj["average_on_demand"]) if obj.get("average_on_demand") is not None else None,
            "expiration_date": obj.get("expiration_date"),
            "marketplace_partner": MarketplacePartner.from_dict(obj["marketplace_partner"]) if obj.get("marketplace_partner") is not None else None,
            "reservation": CurrentMetric.from_dict(obj["reservation"]) if obj.get("reservation") is not None else None,
            "resources": [LicenseResourceReference.from_dict(_item) for _item in obj["resources"]] if obj.get("resources") is not None else None,
            "service_tier": obj.get("service_tier"),
            "start_date": obj.get("start_date"),
            "subscription": FixedReference.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "usage": CurrentMetric.from_dict(obj["usage"]) if obj.get("usage") is not None else None,
            "site_address": BaseAddress.from_dict(obj["site_address"]) if obj.get("site_address") is not None else None,
            "last_updated_date": obj.get("last_updated_date"),
            "pre_ratio": SubscriptionLicensePreRatio.from_dict(obj["pre_ratio"]) if obj.get("pre_ratio") is not None else None,
            "quarter_on_demand": CurrentMetric.from_dict(obj["quarter_on_demand"]) if obj.get("quarter_on_demand") is not None else None
        })
        return _obj


