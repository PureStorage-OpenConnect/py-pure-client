# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_2.models.base_address import BaseAddress
from pypureclient.pure1.Pure1_1_2.models.fixed_reference import FixedReference
from pypureclient.pure1.Pure1_1_2.models.subscription_asset_array import SubscriptionAssetArray
from typing import Optional, Set
from typing_extensions import Self

class SubscriptionAsset(BaseModel):
    """
    SubscriptionAsset
    """ # noqa: E501
    as_of: Optional[StrictInt] = Field(default=None, description="The freshness of the data (timestamp in millis since epoch).", alias="_as_of")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A non-modifiable, locally unique name chosen by the system.")
    install_address: Optional[BaseAddress] = Field(default=None, description="The address where the appliance is installed. This address is also where replacement parts will be shipped to.")
    activation_date: Optional[StrictInt] = Field(default=None, description="The date when the appliance is activated under the license. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    end_of_life_date: Optional[StrictInt] = Field(default=None, description="The date when the appliance hardware reach end of life and Pure no longer provide support. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch.")
    array: Optional[SubscriptionAssetArray] = Field(default=None, description="The specific fields for assets that are arrays.")
    subscription: Optional[FixedReference] = Field(default=None, description="A reference to which subscription this appliance belongs.")
    license: Optional[FixedReference] = Field(default=None, description="A reference to which license this appliance belongs.")
    __properties: ClassVar[List[str]] = ["_as_of", "id", "name", "install_address", "activation_date", "end_of_life_date", "array", "subscription", "license"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "as_of",
            "id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of install_address
        if self.install_address and (include_readonly or "install_address" not in excluded_fields):
            _dict['install_address'] = self.install_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of array
        if self.array and (include_readonly or "array" not in excluded_fields):
            _dict['array'] = self.array.to_dict()
        # override the default output from pydantic by calling `to_dict()` of subscription
        if self.subscription and (include_readonly or "subscription" not in excluded_fields):
            _dict['subscription'] = self.subscription.to_dict()
        # override the default output from pydantic by calling `to_dict()` of license
        if self.license and (include_readonly or "license" not in excluded_fields):
            _dict['license'] = self.license.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SubscriptionAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SubscriptionAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "install_address": BaseAddress.from_dict(obj["install_address"]) if obj.get("install_address") is not None else None,
            "activation_date": obj.get("activation_date"),
            "end_of_life_date": obj.get("end_of_life_date"),
            "array": SubscriptionAssetArray.from_dict(obj["array"]) if obj.get("array") is not None else None,
            "subscription": FixedReference.from_dict(obj["subscription"]) if obj.get("subscription") is not None else None,
            "license": FixedReference.from_dict(obj["license"]) if obj.get("license") is not None else None
        })
        return _obj


