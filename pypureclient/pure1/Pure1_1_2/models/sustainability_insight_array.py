# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com) The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange). OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications. Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html). [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.pure1.Pure1_1_2.models.fixed_reference_fqdn import FixedReferenceFqdn
from typing import Optional, Set
from typing_extensions import Self

class SustainabilityInsightArray(BaseModel):
    """
    A single FlashArray/FlashBlade appliance Sustainability assessment insights information. The _as_of is the time when the computation happened. Only the data from the given time interval was used for the computation of insight. Typically the last week of data is used for the computation of insights.
    """ # noqa: E501
    as_of: Optional[StrictInt] = Field(default=None, description="The freshness of the data (timestamp in millis since epoch).", alias="_as_of")
    interval_start: Optional[StrictInt] = Field(default=None, description="The timestamp of the start of the time interval.", alias="_interval_start")
    interval_end: Optional[StrictInt] = Field(default=None, description="The timestamp of the end of the time interval.", alias="_interval_end")
    resource: Optional[FixedReferenceFqdn] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of the insight.")
    severity: Optional[StrictStr] = Field(default=None, description="The severity of the insight. Should be one of medium, high.")
    additional_data: Optional[Dict[str, Any]] = Field(default=None, description="The arbitrary data associated with the insight.")
    __properties: ClassVar[List[str]] = ["_as_of", "_interval_start", "_interval_end", "resource", "type", "severity", "additional_data"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "as_of",
            "interval_start",
            "interval_end",
            "type",
            "severity",
            "additional_data",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource and (include_readonly or "resource" not in excluded_fields):
            _dict['resource'] = self.resource.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SustainabilityInsightArray from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SustainabilityInsightArray from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "interval_start": obj.get("_interval_start"),
            "interval_end": obj.get("_interval_end"),
            "resource": FixedReferenceFqdn.from_dict(obj["resource"]) if obj.get("resource") is not None else None,
            "type": obj.get("type"),
            "severity": obj.get("severity"),
            "additional_data": obj.get("additional_data")
        })
        return _obj


