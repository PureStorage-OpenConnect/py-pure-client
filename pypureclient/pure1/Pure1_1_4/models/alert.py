# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com)   The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange).  OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications.  Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html).  [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    The version of the OpenAPI document: 1.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.pure1.Pure1_1_4.models.fixed_reference_fqdn import FixedReferenceFqdn


class Alert(BaseModel):
    """
    Alert
    """
    as_of: Optional[StrictInt] = Field(default=None, alias="_as_of", description="The freshness of the data (timestamp in millis since epoch).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A modifiable, locally unique name chosen by the user.")
    arrays: Optional[conlist(FixedReferenceFqdn)] = Field(default=None, description="The list of arrays where this resource exists. Many resources are on a single array, but some resources, such as pods, can be shared across multiple arrays.")
    actual: Optional[StrictStr] = Field(default=None, description="Actual condition at the time of the alert.")
    category: Optional[StrictStr] = Field(default=None, description="Category of the alert. Valid values are `array`, `hardware`, and `software`.")
    closed: Optional[StrictInt] = Field(default=None, description="Time when the alert was closed, in milliseconds since UNIX epoch.")
    code: Optional[StrictInt] = Field(default=None, description="Code associated with the alert.")
    component_name: Optional[StrictStr] = Field(default=None, description="Name of the component alerted about.")
    component_type: Optional[StrictStr] = Field(default=None, description="Type of the component alerted about.")
    created: Optional[StrictInt] = Field(default=None, description="Time when the alert was created, in milliseconds since UNIX epoch.")
    description: Optional[StrictStr] = Field(default=None, description="Short description of the alert.")
    expected: Optional[StrictStr] = Field(default=None, description="Expected state/threshold under normal conditions.")
    knowledge_base_url: Optional[StrictStr] = Field(default=None, description="URL of the relevant Knowledge Base page.")
    notified: Optional[StrictInt] = Field(default=None, description="Time when the user was notified of the alert, in milliseconds since UNIX epoch.")
    origin: Optional[StrictStr] = Field(default=None, description="Origin of the alert. Valid values are `array` and `Pure1`.")
    severity: Optional[StrictStr] = Field(default=None, description="Current severity level. Valid values are `info`, `warning`, `critical`, and `hidden`.")
    state: Optional[StrictStr] = Field(default=None, description="Current state of the alert. Valid values are `open`, `closing`, and `closed`.")
    summary: Optional[StrictStr] = Field(default=None, description="Summary of the alert.")
    updated: Optional[StrictInt] = Field(default=None, description="Time when the alert was last updated, in milliseconds since UNIX epoch.")
    __properties = ["_as_of", "id", "name", "arrays", "actual", "category", "closed", "code", "component_name", "component_type", "created", "description", "expected", "knowledge_base_url", "notified", "origin", "severity", "state", "summary", "updated"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "as_of",
                "id",
                "arrays",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in arrays (list)
        if _include_in_dict('arrays', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.arrays:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['arrays'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Alert:
        """Create an instance of Alert from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Alert:
        """Create an instance of Alert from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Alert.parse_obj(obj)

        _obj = Alert.construct(_fields_set=None, **{
            "as_of": obj.get("_as_of"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "arrays": [FixedReferenceFqdn.from_dict(_item) for _item in obj.get("arrays")] if obj.get("arrays") is not None else None,
            "actual": obj.get("actual"),
            "category": obj.get("category"),
            "closed": obj.get("closed"),
            "code": obj.get("code"),
            "component_name": obj.get("component_name"),
            "component_type": obj.get("component_type"),
            "created": obj.get("created"),
            "description": obj.get("description"),
            "expected": obj.get("expected"),
            "knowledge_base_url": obj.get("knowledge_base_url"),
            "notified": obj.get("notified"),
            "origin": obj.get("origin"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "summary": obj.get("summary"),
            "updated": obj.get("updated")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

