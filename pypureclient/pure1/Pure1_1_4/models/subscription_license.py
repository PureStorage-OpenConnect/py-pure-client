# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com)   The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange).  OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications.  Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html).  [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    OpenAPI spec version: 1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.pure1.Pure1_1_4 import models

class SubscriptionLicense(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'as_of': 'int',
        'name': 'str',
        'id': 'str',
        'average_on_demand': 'CurrentMetric',
        'quarter_on_demand': 'CurrentMetric',
        'usage': 'CurrentMetric',
        'resources': 'list[LicenseResourceReference]',
        'marketplace_partner': 'MarketplacePartner',
        'subscription': 'FixedReference',
        'expiration_date': 'int',
        'add_on_slas': 'list[SubscriptionLicenseAddOnSla]',
        'pre_ratio': 'SubscriptionLicensePreRatio',
        'site_address': 'BaseAddress',
        'reservation': 'CurrentMetric',
        'service_tier': 'str',
        'last_updated_date': 'int',
        'start_date': 'int'
    }

    attribute_map = {
        'as_of': '_as_of',
        'name': 'name',
        'id': 'id',
        'average_on_demand': 'average_on_demand',
        'quarter_on_demand': 'quarter_on_demand',
        'usage': 'usage',
        'resources': 'resources',
        'marketplace_partner': 'marketplace_partner',
        'subscription': 'subscription',
        'expiration_date': 'expiration_date',
        'add_on_slas': 'add_on_slas',
        'pre_ratio': 'pre_ratio',
        'site_address': 'site_address',
        'reservation': 'reservation',
        'service_tier': 'service_tier',
        'last_updated_date': 'last_updated_date',
        'start_date': 'start_date'
    }

    required_args = {
    }

    def __init__(
        self,
        as_of=None,  # type: int
        name=None,  # type: str
        id=None,  # type: str
        average_on_demand=None,  # type: models.CurrentMetric
        quarter_on_demand=None,  # type: models.CurrentMetric
        usage=None,  # type: models.CurrentMetric
        resources=None,  # type: List[models.LicenseResourceReference]
        marketplace_partner=None,  # type: models.MarketplacePartner
        subscription=None,  # type: models.FixedReference
        expiration_date=None,  # type: int
        add_on_slas=None,  # type: List[models.SubscriptionLicenseAddOnSla]
        pre_ratio=None,  # type: models.SubscriptionLicensePreRatio
        site_address=None,  # type: models.BaseAddress
        reservation=None,  # type: models.CurrentMetric
        service_tier=None,  # type: str
        last_updated_date=None,  # type: int
        start_date=None,  # type: int
    ):
        """
        Keyword args:
            as_of (int): The freshness of the data (timestamp in millis since epoch).
            name (str): A non-modifiable, locally unique name chosen by the system.
            id (str): A non-modifiable, globally unique ID chosen by the system.
            average_on_demand (CurrentMetric): Estimated daily on-demand usage of the license from the current calendar quarter to date. 
            quarter_on_demand (CurrentMetric): Estimated total on-demand usage of the license of the current calendar quarter to date. 
            usage (CurrentMetric): Usage of the license, averaged over the last day. 
            resources (list[LicenseResourceReference]): References to the resources that operate under this license. 
            marketplace_partner (MarketplacePartner): Reference information about the marketplace partner of this license. 
            subscription (FixedReference): A reference to which subscription this license belongs. 
            expiration_date (int): Date when the license expires. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch. 
            add_on_slas (list[SubscriptionLicenseAddOnSla]): Add-on SLAs.
            pre_ratio (SubscriptionLicensePreRatio)
            site_address (BaseAddress): The license site address.
            reservation (CurrentMetric): Current reservation amount of the license. 
            service_tier (str): The tier of the service for the license. 
            last_updated_date (int): The date of the last amendment to the current license. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch. 
            start_date (int): Date when the license starts. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch. 
        """
        if as_of is not None:
            self.as_of = as_of
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if average_on_demand is not None:
            self.average_on_demand = average_on_demand
        if quarter_on_demand is not None:
            self.quarter_on_demand = quarter_on_demand
        if usage is not None:
            self.usage = usage
        if resources is not None:
            self.resources = resources
        if marketplace_partner is not None:
            self.marketplace_partner = marketplace_partner
        if subscription is not None:
            self.subscription = subscription
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if add_on_slas is not None:
            self.add_on_slas = add_on_slas
        if pre_ratio is not None:
            self.pre_ratio = pre_ratio
        if site_address is not None:
            self.site_address = site_address
        if reservation is not None:
            self.reservation = reservation
        if service_tier is not None:
            self.service_tier = service_tier
        if last_updated_date is not None:
            self.last_updated_date = last_updated_date
        if start_date is not None:
            self.start_date = start_date

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `SubscriptionLicense`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `SubscriptionLicense`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `SubscriptionLicense`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `SubscriptionLicense`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(SubscriptionLicense, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionLicense):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
