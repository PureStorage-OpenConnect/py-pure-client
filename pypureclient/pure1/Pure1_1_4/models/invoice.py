# coding: utf-8

"""
    Pure1 Public REST API

    Pure1 Public REST API, developed by [Pure Storage, Inc.](https://www.purestorage.com)   The Pure1 REST API 2.0 offers one single form of authentication: OAuth 2.0 via the [Token Exchange protocol](https://datatracker.ietf.org/doc/draft-ietf-oauth-token-exchange).  OAuth 2.0 is an open protocol to allow secure authorization in a simple and standard method from web, mobile, desktop and background applications.  Note that the [Authentication](#section/Authentication) section below mentions 'API Key' as the security scheme type. This is solely for the purpose of allowing testing this API with [Swagger UI](https://static.pure1.purestorage.com/api-swagger/index.html).  [Knowledge base reference documentation](https://support.purestorage.com/Pure1/Pure1_Manage/Pure1_Manage_-_REST_API/Pure1_Manage_-_REST_API__Reference)

    OpenAPI spec version: 1.4
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.pure1.Pure1_1_4 import models

class Invoice(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'int',
        'amount': 'float',
        'due_date': 'int',
        'end_user_purchase_order': 'str',
        'subscription': 'FixedReference',
        'end_user_name': 'str',
        'payment_terms': 'str',
        'partner_purchase_order': 'str',
        'sales_representative': 'str',
        'currency': 'str',
        'id': 'str',
        'lines': 'list[InvoiceLine]',
        'ship_date': 'int',
        'status': 'str'
    }

    attribute_map = {
        '_date': 'date',
        'amount': 'amount',
        'due_date': 'due_date',
        'end_user_purchase_order': 'end_user_purchase_order',
        'subscription': 'subscription',
        'end_user_name': 'end_user_name',
        'payment_terms': 'payment_terms',
        'partner_purchase_order': 'partner_purchase_order',
        'sales_representative': 'sales_representative',
        'currency': 'currency',
        'id': 'id',
        'lines': 'lines',
        'ship_date': 'ship_date',
        'status': 'status'
    }

    required_args = {
    }

    def __init__(
        self,
        _date=None,  # type: int
        amount=None,  # type: float
        due_date=None,  # type: int
        end_user_purchase_order=None,  # type: str
        subscription=None,  # type: models.FixedReference
        end_user_name=None,  # type: str
        payment_terms=None,  # type: str
        partner_purchase_order=None,  # type: str
        sales_representative=None,  # type: str
        currency=None,  # type: str
        id=None,  # type: str
        lines=None,  # type: List[models.InvoiceLine]
        ship_date=None,  # type: int
        status=None,  # type: str
    ):
        """
        Keyword args:
            _date (int): The issuance date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch. 
            amount (float): The total invoice amount, expressed in the currency defined in `currency`.
            due_date (int): The payment due date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch. 
            end_user_purchase_order (str): The end user customer purchase order number.
            subscription (FixedReference): A reference to which subscription this invoice belongs.
            end_user_name (str): The end user customer name.
            payment_terms (str): The invoice payment terms.
            partner_purchase_order (str): The partner purchase order number.
            sales_representative (str): The sales representative that issued the invoice.
            currency (str): The currency of the invoice in ISO 4217 format. This currency applies to the total invoice amount as well as all amounts in line items. 
            id (str): The invoice number, a globally unique identifier for this invoice.
            lines (list[InvoiceLine]): A list of invoice line items.
            ship_date (int): The invoice shipment date. Represented as a timestamp of 00:00 on that date in UTC, in milliseconds since UNIX epoch. 
            status (str): The invoice status. Values include `open` and `paid`.
        """
        if _date is not None:
            self._date = _date
        if amount is not None:
            self.amount = amount
        if due_date is not None:
            self.due_date = due_date
        if end_user_purchase_order is not None:
            self.end_user_purchase_order = end_user_purchase_order
        if subscription is not None:
            self.subscription = subscription
        if end_user_name is not None:
            self.end_user_name = end_user_name
        if payment_terms is not None:
            self.payment_terms = payment_terms
        if partner_purchase_order is not None:
            self.partner_purchase_order = partner_purchase_order
        if sales_representative is not None:
            self.sales_representative = sales_representative
        if currency is not None:
            self.currency = currency
        if id is not None:
            self.id = id
        if lines is not None:
            self.lines = lines
        if ship_date is not None:
            self.ship_date = ship_date
        if status is not None:
            self.status = status

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Invoice`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Invoice`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Invoice`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Invoice`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
