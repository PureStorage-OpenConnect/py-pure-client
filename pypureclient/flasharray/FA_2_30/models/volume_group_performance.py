# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class VolumeGroupPerformance(BaseModel):
    """
    VolumeGroupPerformance
    """ # noqa: E501
    bytes_per_mirrored_write: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average I/O size per mirrored write, measured in bytes.")
    bytes_per_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average I/O size for both read and write (all) operations.")
    bytes_per_read: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average I/O size per read, measured in bytes.")
    bytes_per_write: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average I/O size per write, measured in bytes.")
    mirrored_write_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of mirrored bytes written per second.")
    mirrored_writes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of mirrored writes per second.")
    qos_rate_limit_usec_per_mirrored_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time it takes the array to process a mirrored I/O write request, measured in microseconds.")
    qos_rate_limit_usec_per_read_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time spent waiting due to QoS rate limiting for a read request, measured in microseconds.")
    qos_rate_limit_usec_per_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time that a write I/O request spends waiting as a result of the volume reaching its QoS bandwidth limit, measured in microseconds.")
    queue_usec_per_mirrored_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time that a mirrored write I/O request spends in the array waiting to be served, measured in microseconds.")
    queue_usec_per_read_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time that a read I/O request spends in the array waiting to be served, measured in microseconds.")
    queue_usec_per_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time that a write I/O request spends in the array waiting to be served, measured in microseconds.")
    read_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of bytes read per second.")
    reads_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of read requests processed per second.")
    san_usec_per_mirrored_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time required to transfer data from the initiator to the array for a mirrored write request, measured in microseconds.")
    san_usec_per_read_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time required to transfer data from the array to the initiator for a read request, measured in microseconds.")
    san_usec_per_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time required to transfer data from the initiator to the array for a write request, measured in microseconds.")
    service_usec_per_mirrored_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time required for the array to service a mirrored write request, measured in microseconds.")
    service_usec_per_read_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time required for the array to service a read request, measured in microseconds.")
    service_usec_per_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time required for the array to service a write request, measured in microseconds.")
    time: Optional[StrictInt] = Field(default=None, description="The time when the sample performance data was taken, measured in milliseconds since the UNIX epoch.")
    usec_per_mirrored_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time it takes the array to process a mirrored I/O write request, measured in microseconds. Beginning in Purity 6.3.14 and 6.4.10 and later, including later major versions (6.5.x, 6.6.x and beyond), queue time is included. The average time does not include SAN time or QoS rate limit time.")
    usec_per_read_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time it takes the array to process an I/O read request, measured in microseconds. Beginning in Purity 6.3.14 and 6.4.10 and later, including later major versions (6.5.x, 6.6.x and beyond), queue time is included. The average time does not include SAN time or QoS rate limit time.")
    usec_per_write_op: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The average time it takes the array to process an I/O write request, measured in microseconds. Beginning in Purity 6.3.14 and 6.4.10 and later, including later major versions (6.5.x, 6.6.x and beyond), queue time is included. The average time does not include SAN time or QoS rate limit time.")
    write_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of bytes written per second.")
    writes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of write requests processed per second.")
    service_usec_per_read_op_cache_reduction: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The percentage reduction in `service_usec_per_read_op` due to data cache hits. For example, a value of 0.25 indicates that the value of `service_usec_per_read_op` is 25&#37; lower than it would have been without any data cache hits.")
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    __properties: ClassVar[List[str]] = ["bytes_per_mirrored_write", "bytes_per_op", "bytes_per_read", "bytes_per_write", "mirrored_write_bytes_per_sec", "mirrored_writes_per_sec", "qos_rate_limit_usec_per_mirrored_write_op", "qos_rate_limit_usec_per_read_op", "qos_rate_limit_usec_per_write_op", "queue_usec_per_mirrored_write_op", "queue_usec_per_read_op", "queue_usec_per_write_op", "read_bytes_per_sec", "reads_per_sec", "san_usec_per_mirrored_write_op", "san_usec_per_read_op", "san_usec_per_write_op", "service_usec_per_mirrored_write_op", "service_usec_per_read_op", "service_usec_per_write_op", "time", "usec_per_mirrored_write_op", "usec_per_read_op", "usec_per_write_op", "write_bytes_per_sec", "writes_per_sec", "service_usec_per_read_op_cache_reduction", "id", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "bytes_per_mirrored_write",
            "bytes_per_op",
            "bytes_per_read",
            "bytes_per_write",
            "mirrored_write_bytes_per_sec",
            "mirrored_writes_per_sec",
            "qos_rate_limit_usec_per_mirrored_write_op",
            "qos_rate_limit_usec_per_read_op",
            "qos_rate_limit_usec_per_write_op",
            "queue_usec_per_mirrored_write_op",
            "queue_usec_per_read_op",
            "queue_usec_per_write_op",
            "read_bytes_per_sec",
            "reads_per_sec",
            "san_usec_per_mirrored_write_op",
            "san_usec_per_read_op",
            "san_usec_per_write_op",
            "service_usec_per_mirrored_write_op",
            "service_usec_per_read_op",
            "service_usec_per_write_op",
            "time",
            "usec_per_mirrored_write_op",
            "usec_per_read_op",
            "usec_per_write_op",
            "write_bytes_per_sec",
            "writes_per_sec",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumeGroupPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumeGroupPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "bytes_per_mirrored_write": obj.get("bytes_per_mirrored_write"),
            "bytes_per_op": obj.get("bytes_per_op"),
            "bytes_per_read": obj.get("bytes_per_read"),
            "bytes_per_write": obj.get("bytes_per_write"),
            "mirrored_write_bytes_per_sec": obj.get("mirrored_write_bytes_per_sec"),
            "mirrored_writes_per_sec": obj.get("mirrored_writes_per_sec"),
            "qos_rate_limit_usec_per_mirrored_write_op": obj.get("qos_rate_limit_usec_per_mirrored_write_op"),
            "qos_rate_limit_usec_per_read_op": obj.get("qos_rate_limit_usec_per_read_op"),
            "qos_rate_limit_usec_per_write_op": obj.get("qos_rate_limit_usec_per_write_op"),
            "queue_usec_per_mirrored_write_op": obj.get("queue_usec_per_mirrored_write_op"),
            "queue_usec_per_read_op": obj.get("queue_usec_per_read_op"),
            "queue_usec_per_write_op": obj.get("queue_usec_per_write_op"),
            "read_bytes_per_sec": obj.get("read_bytes_per_sec"),
            "reads_per_sec": obj.get("reads_per_sec"),
            "san_usec_per_mirrored_write_op": obj.get("san_usec_per_mirrored_write_op"),
            "san_usec_per_read_op": obj.get("san_usec_per_read_op"),
            "san_usec_per_write_op": obj.get("san_usec_per_write_op"),
            "service_usec_per_mirrored_write_op": obj.get("service_usec_per_mirrored_write_op"),
            "service_usec_per_read_op": obj.get("service_usec_per_read_op"),
            "service_usec_per_write_op": obj.get("service_usec_per_write_op"),
            "time": obj.get("time"),
            "usec_per_mirrored_write_op": obj.get("usec_per_mirrored_write_op"),
            "usec_per_read_op": obj.get("usec_per_read_op"),
            "usec_per_write_op": obj.get("usec_per_write_op"),
            "write_bytes_per_sec": obj.get("write_bytes_per_sec"),
            "writes_per_sec": obj.get("writes_per_sec"),
            "service_usec_per_read_op_cache_reduction": obj.get("service_usec_per_read_op_cache_reduction"),
            "id": obj.get("id"),
            "name": obj.get("name")
        })
        return _obj


