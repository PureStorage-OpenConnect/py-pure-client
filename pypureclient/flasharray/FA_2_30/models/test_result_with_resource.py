# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_30.models.fixed_reference_no_id import FixedReferenceNoId
from typing import Optional, Set
from typing_extensions import Self

class TestResultWithResource(BaseModel):
    """
    TestResultWithResource
    """ # noqa: E501
    component_address: Optional[StrictStr] = Field(default=None, description="Address of the component running the test.")
    component_name: Optional[StrictStr] = Field(default=None, description="Name of the component running the test.")
    description: Optional[StrictStr] = Field(default=None, description="What the test is doing.")
    destination: Optional[StrictStr] = Field(default=None, description="The URI of the target server being tested.")
    enabled: Optional[StrictBool] = Field(default=None, description="Whether the object being tested is enabled or not. Returns a value of `true` if the the service is enabled. Returns a value of `false` if the service is disabled.")
    result_details: Optional[StrictStr] = Field(default=None, description="Additional information about the test result.")
    success: Optional[StrictBool] = Field(default=None, description="Whether the object being tested passed the test or not. Returns a value of `true` if the specified test has succeeded. Returns a value of `false` if the specified test has failed.")
    test_type: Optional[StrictStr] = Field(default=None, description="Displays the type of test being performed. The returned values are determined by the `resource` being tested and its configuration. Values include `array-admin-group-searching`, `binding`, `connecting`, `phonehome`, `phonehome-ping`, `remote-assist`, `rootdse-searching`, `read-only-group-searching`, `storage-admin-group-searching`, and `validate-ntp-configuration`.")
    resource: Optional[FixedReferenceNoId] = Field(default=None, description="A reference to the object being tested.")
    __properties: ClassVar[List[str]] = ["component_address", "component_name", "description", "destination", "enabled", "result_details", "success", "test_type", "resource"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of resource
        if self.resource and (include_readonly or "resource" not in excluded_fields):
            _dict['resource'] = self.resource.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TestResultWithResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TestResultWithResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "component_address": obj.get("component_address"),
            "component_name": obj.get("component_name"),
            "description": obj.get("description"),
            "destination": obj.get("destination"),
            "enabled": obj.get("enabled"),
            "result_details": obj.get("result_details"),
            "success": obj.get("success"),
            "test_type": obj.get("test_type"),
            "resource": FixedReferenceNoId.from_dict(obj["resource"]) if obj.get("resource") is not None else None
        })
        return _obj


