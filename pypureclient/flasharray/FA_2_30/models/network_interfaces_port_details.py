# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.30
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_rx_los import NetworkInterfacePortDetailsRxLos
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_rx_power import NetworkInterfacePortDetailsRxPower
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_static import NetworkInterfacePortDetailsStatic
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_temperature import NetworkInterfacePortDetailsTemperature
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_tx_bias import NetworkInterfacePortDetailsTxBias
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_tx_fault import NetworkInterfacePortDetailsTxFault
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_tx_power import NetworkInterfacePortDetailsTxPower
from pypureclient.flasharray.FA_2_30.models.network_interface_port_details_voltage import NetworkInterfacePortDetailsVoltage


class NetworkInterfacesPortDetails(BaseModel):
    """
    Network interface SFP details.  # noqa: E501
    """
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    interface_type: Optional[StrictStr] = Field(default=None, description="The interface type. Valid values are `eth` and `fc`.")
    rx_los: Optional[conlist(NetworkInterfacePortDetailsRxLos)] = Field(default=None, description="Displays status flags for Rx LOS. A value of `true` indicates Rx Loss-of-Signal. For four-lane modules, the array contains a flag for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    rx_power: Optional[conlist(NetworkInterfacePortDetailsRxPower)] = Field(default=None, description="Displays real-time measurement of Rx input power and whether it is within range. For four-lane modules, the array contains a measurement and status for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    static: Optional[NetworkInterfacePortDetailsStatic] = None
    temperature: Optional[conlist(NetworkInterfacePortDetailsTemperature)] = Field(default=None, description="Displays real-time measurement of transceiver temperature and range. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    tx_bias: Optional[conlist(NetworkInterfacePortDetailsTxBias)] = Field(default=None, description="Displays real-time measurement of Tx bias current and whether it is within range. For four-lane modules, the array contains a measurement and status for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    tx_fault: Optional[conlist(NetworkInterfacePortDetailsTxFault)] = Field(default=None, description="Displays status flags for Tx Fault. A value of `true` indicates transmitter/laser fault. For four-lane modules, the array contains a flag for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    tx_power: Optional[conlist(NetworkInterfacePortDetailsTxPower)] = Field(default=None, description="Displays real-time measurement of Tx output power and whether it is within range. For four-lane modules, the array contains a measurement and status for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    voltage: Optional[conlist(NetworkInterfacePortDetailsVoltage)] = Field(default=None, description="Displays real-time measurement of supply voltage and whether it is within range. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    __properties = ["name", "interface_type", "rx_los", "rx_power", "static", "temperature", "tx_bias", "tx_fault", "tx_power", "voltage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "name",
                "interface_type",
                "rx_los",
                "rx_power",
                "temperature",
                "tx_bias",
                "tx_fault",
                "tx_power",
                "voltage",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in rx_los (list)
        if _include_in_dict('rx_los', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.rx_los:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['rx_los'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rx_power (list)
        if _include_in_dict('rx_power', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.rx_power:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['rx_power'] = _items
        # override the default output from pydantic by calling `to_dict()` of static
        if _include_in_dict('static', include_readonly, excluded_fields, none_fields):
            _dict['static'] = self.static.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in temperature (list)
        if _include_in_dict('temperature', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.temperature:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['temperature'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tx_bias (list)
        if _include_in_dict('tx_bias', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.tx_bias:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['tx_bias'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tx_fault (list)
        if _include_in_dict('tx_fault', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.tx_fault:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['tx_fault'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tx_power (list)
        if _include_in_dict('tx_power', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.tx_power:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['tx_power'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in voltage (list)
        if _include_in_dict('voltage', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.voltage:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['voltage'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> NetworkInterfacesPortDetails:
        """Create an instance of NetworkInterfacesPortDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkInterfacesPortDetails:
        """Create an instance of NetworkInterfacesPortDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkInterfacesPortDetails.parse_obj(obj)

        _obj = NetworkInterfacesPortDetails.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "interface_type": obj.get("interface_type"),
            "rx_los": [NetworkInterfacePortDetailsRxLos.from_dict(_item) for _item in obj.get("rx_los")] if obj.get("rx_los") is not None else None,
            "rx_power": [NetworkInterfacePortDetailsRxPower.from_dict(_item) for _item in obj.get("rx_power")] if obj.get("rx_power") is not None else None,
            "static": NetworkInterfacePortDetailsStatic.from_dict(obj.get("static")) if obj.get("static") is not None else None,
            "temperature": [NetworkInterfacePortDetailsTemperature.from_dict(_item) for _item in obj.get("temperature")] if obj.get("temperature") is not None else None,
            "tx_bias": [NetworkInterfacePortDetailsTxBias.from_dict(_item) for _item in obj.get("tx_bias")] if obj.get("tx_bias") is not None else None,
            "tx_fault": [NetworkInterfacePortDetailsTxFault.from_dict(_item) for _item in obj.get("tx_fault")] if obj.get("tx_fault") is not None else None,
            "tx_power": [NetworkInterfacePortDetailsTxPower.from_dict(_item) for _item in obj.get("tx_power")] if obj.get("tx_power") is not None else None,
            "voltage": [NetworkInterfacePortDetailsVoltage.from_dict(_item) for _item in obj.get("voltage")] if obj.get("voltage") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

