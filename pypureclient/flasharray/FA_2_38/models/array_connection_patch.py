# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_38.models.throttle import Throttle
from pypureclient.flasharray.FA_2_38.models.time_window import TimeWindow


class ArrayConnectionPatch(BaseModel):
    """
    ArrayConnectionPatch
    """
    default_limit: Optional[StrictInt] = Field(default=None, description="Deprecated. Default maximum bandwidth threshold for outbound traffic in bytes. Once exceeded, bandwidth throttling occurs.")
    window: Optional[TimeWindow] = Field(default=None, description="Deprecated. The time during which the `window_limit` threshold is in effect.")
    window_limit: Optional[StrictInt] = Field(default=None, description="Deprecated. Maximum bandwidth threshold for outbound traffic during the specified `window_limit` time range in bytes. Once exceeded, bandwidth throttling occurs.")
    connection_key: Optional[StrictStr] = Field(default=None, description="The connection key of the target array. It is only required when `encryption` is changed from `unencrypted` to `encrypted`, or when `type` is changed from `async-replication` to `sync-replication`.")
    encryption: Optional[StrictStr] = Field(default=None, description="If `encrypted`, encryption will be enabled for all traffic over this array connection. `connection_key` must be specified when encrypted is set to `true`. If `unencrypted`, encryption will be disabled for all traffic over this array connection. If not specified, the current encryption option for the array connection will remain unchanged.")
    management_address: Optional[StrictStr] = Field(default=None, description="Management IP address of the target array.")
    replication_addresses: Optional[conlist(StrictStr)] = Field(default=None, description="IP addresses and FQDNs of the target arrays. Configurable only when `replication_transport` is set to `ip`.")
    throttle: Optional[Throttle] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of replication. Valid values are `async-replication` and `sync-replication`.")
    __properties = ["default_limit", "window", "window_limit", "connection_key", "encryption", "management_address", "replication_addresses", "throttle", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of window
        if _include_in_dict('window', include_readonly, excluded_fields, none_fields):
            _dict['window'] = self.window.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of throttle
        if _include_in_dict('throttle', include_readonly, excluded_fields, none_fields):
            _dict['throttle'] = self.throttle.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ArrayConnectionPatch:
        """Create an instance of ArrayConnectionPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ArrayConnectionPatch:
        """Create an instance of ArrayConnectionPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArrayConnectionPatch.parse_obj(obj)

        _obj = ArrayConnectionPatch.construct(_fields_set=None, **{
            "default_limit": obj.get("default_limit"),
            "window": TimeWindow.from_dict(obj.get("window")) if obj.get("window") is not None else None,
            "window_limit": obj.get("window_limit"),
            "connection_key": obj.get("connection_key"),
            "encryption": obj.get("encryption"),
            "management_address": obj.get("management_address"),
            "replication_addresses": obj.get("replication_addresses"),
            "throttle": Throttle.from_dict(obj.get("throttle")) if obj.get("throttle") is not None else None,
            "type": obj.get("type")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

