# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_38.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class PolicyPassword(BaseModel):
    """
    PolicyPassword
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    policy_type: Optional[StrictStr] = Field(default=None, description="The type of policy. Valid values include `autodir`, `nfs`, `password`, `smb`, `snapshot`, and `quota`.")
    enabled: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy is enabled.")
    lockout_duration: Optional[Annotated[int, Field(le=7776000000, strict=True, ge=1000)]] = Field(default=None, description="The lockout duration, in milliseconds, if a user is locked out after reaching the maximum number of login attempts. Ranges from 1 second to 90 days.")
    max_login_attempts: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Maximum number of failed login attempts allowed before the user is locked out.")
    min_password_length: Optional[Annotated[int, Field(le=100, strict=True, ge=1)]] = Field(default=None, description="Minimum password length. If not specified, defaults to 1.")
    password_history: Optional[Annotated[int, Field(le=64, strict=True, ge=0)]] = Field(default=None, description="The number of passwords tracked to prevent reuse of passwords.")
    min_password_age: Optional[Annotated[int, Field(le=604800000, strict=True, ge=0)]] = Field(default=None, description="The minimum age, in milliseconds, of password before password change is allowed. Ranges from 0 ms to 7 days")
    min_character_groups: Optional[Annotated[int, Field(le=4, strict=True, ge=0)]] = Field(default=None, description="The minimum number of character groups ([a-z], [A-Z], [0-9], other) required to be present in a password.")
    min_characters_per_group: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(default=None, description="The minimum number of characters per group to count the group as present. Maximum is limited by the minimum password length divided by the number of character groups (e.g. min_password_length = 9, min_character_groups = 4, then maximum is 2).")
    enforce_username_check: Optional[StrictBool] = Field(default=None, description="If `true`, the username cannot be a substring of the password. It only applies to usernames of 3 characters and longer.")
    enforce_dictionary_check: Optional[StrictBool] = Field(default=None, description="If `true`, test password against dictionary of known leaked passwords. Only applies to passwords longer than 6 characters.")
    __properties: ClassVar[List[str]] = ["id", "name", "context", "policy_type", "enabled", "lockout_duration", "max_login_attempts", "min_password_length", "password_history", "min_password_age", "min_character_groups", "min_characters_per_group", "enforce_username_check", "enforce_dictionary_check"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "policy_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyPassword from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyPassword from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "policy_type": obj.get("policy_type"),
            "enabled": obj.get("enabled"),
            "lockout_duration": obj.get("lockout_duration"),
            "max_login_attempts": obj.get("max_login_attempts"),
            "min_password_length": obj.get("min_password_length"),
            "password_history": obj.get("password_history"),
            "min_password_age": obj.get("min_password_age"),
            "min_character_groups": obj.get("min_character_groups"),
            "min_characters_per_group": obj.get("min_characters_per_group"),
            "enforce_username_check": obj.get("enforce_username_check"),
            "enforce_dictionary_check": obj.get("enforce_dictionary_check")
        })
        return _obj


