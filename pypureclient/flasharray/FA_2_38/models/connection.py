# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_38.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_38.models.reference import Reference
from pypureclient.flasharray.FA_2_38.models.reference_no_id import ReferenceNoId
from typing import Optional, Set
from typing_extensions import Self

class Connection(BaseModel):
    """
    Connection
    """ # noqa: E501
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    host: Optional[ReferenceNoId] = Field(default=None, description="The host computer that sends and receives I/O requests to and from volumes on the FlashArray array.")
    host_group: Optional[ReferenceNoId] = Field(default=None, description="A virtual collection of hosts with common connectivity to volumes.")
    lun: Optional[StrictInt] = Field(default=None, description="The logical unit number (LUN) by which the specified hosts are to address the specified volume. A LUN is set for SCSI connections only. A LUN can be in one of two formats: a simple LUN, or a LUN and Sublun with virtual volumes. The first format is simply the LUN. The second format is a single int64 combining both ((LUN << 32) + Sublun) or (LUN * 4294967296 + Sublun). In the FA UI, a combined LUN and Sublun is represented as `LUN:Sublun`. The maximum int64 LUN:Sublun value is `17587891081215`.")
    protocol_endpoint: Optional[Reference] = Field(default=None, description="A protocol endpoint (also known as a conglomerate volume) which acts as a proxy through which virtual volumes are created and then connected to VMware ESXi hosts or host groups. The protocol endpoint itself does not serve I/Os; instead, its job is to form connections between FlashArray volumes and ESXi hosts and host groups.")
    volume: Optional[FixedReference] = Field(default=None, description="A container that manages the storage space on the array.")
    nsid: Optional[StrictInt] = Field(default=None, description="Namespace identifier allocated for the NVMe namespace backing the volume. NSID is set for NVMe connections only.")
    __properties: ClassVar[List[str]] = ["context", "host", "host_group", "lun", "protocol_endpoint", "volume", "nsid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host
        if self.host and (include_readonly or "host" not in excluded_fields):
            _dict['host'] = self.host.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_group
        if self.host_group and (include_readonly or "host_group" not in excluded_fields):
            _dict['host_group'] = self.host_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protocol_endpoint
        if self.protocol_endpoint and (include_readonly or "protocol_endpoint" not in excluded_fields):
            _dict['protocol_endpoint'] = self.protocol_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of volume
        if self.volume and (include_readonly or "volume" not in excluded_fields):
            _dict['volume'] = self.volume.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "host": ReferenceNoId.from_dict(obj["host"]) if obj.get("host") is not None else None,
            "host_group": ReferenceNoId.from_dict(obj["host_group"]) if obj.get("host_group") is not None else None,
            "lun": obj.get("lun"),
            "protocol_endpoint": Reference.from_dict(obj["protocol_endpoint"]) if obj.get("protocol_endpoint") is not None else None,
            "volume": FixedReference.from_dict(obj["volume"]) if obj.get("volume") is not None else None,
            "nsid": obj.get("nsid")
        })
        return _obj


