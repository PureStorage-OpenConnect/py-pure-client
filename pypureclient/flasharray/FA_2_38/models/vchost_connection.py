# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_38.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class VchostConnection(BaseModel):
    """
    VchostConnection
    """ # noqa: E501
    protocol_endpoint: Optional[FixedReference] = Field(default=None, description="A reference to the protocol endpoint, representing a storage container that vCenter can use.")
    vchost: Optional[FixedReference] = Field(default=None, description="For vchost-connections, a vchost represents a vCenter. By connecting to a protocol endpoint, the corresponding vCenter gets the access to the storage container represented by this protocol endpoint. The vchost name should be null if `all_vchosts` is set to `true`, which means the storage container is accessible to all vchosts.")
    all_vchosts: Optional[StrictBool] = Field(default=False, description="If set to `true`, the storage container represented by the protocol endpoint is accessible to all vchosts. If set to `false`, the storage container represented by the protocol endpoint is only accesible to the vchosts that have explicit vchost-connections to this protocol endpoint. The default is `false`.")
    __properties: ClassVar[List[str]] = ["protocol_endpoint", "vchost", "all_vchosts"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of protocol_endpoint
        if self.protocol_endpoint and (include_readonly or "protocol_endpoint" not in excluded_fields):
            _dict['protocol_endpoint'] = self.protocol_endpoint.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vchost
        if self.vchost and (include_readonly or "vchost" not in excluded_fields):
            _dict['vchost'] = self.vchost.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VchostConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VchostConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "protocol_endpoint": FixedReference.from_dict(obj["protocol_endpoint"]) if obj.get("protocol_endpoint") is not None else None,
            "vchost": FixedReference.from_dict(obj["vchost"]) if obj.get("vchost") is not None else None,
            "all_vchosts": obj.get("all_vchosts") if obj.get("all_vchosts") is not None else False
        })
        return _obj


