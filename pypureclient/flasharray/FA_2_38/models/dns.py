# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pypureclient.flasharray.FA_2_38.models.reference_no_id import ReferenceNoId
from pypureclient.flasharray.FA_2_38.models.reference_with_type import ReferenceWithType


class Dns(BaseModel):
    """
    Dns
    """
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    ca_certificate: Optional[ReferenceWithType] = Field(default=None, description="A reference to the `certificate` to use for validating nameservers with HTTPS connections. This property is mutually exclusive with `ca_certificate_group` property and may only be configured when nameservers begin with HTTPS.")
    ca_certificate_group: Optional[ReferenceWithType] = Field(default=None, description="A reference to the `certificate group` to use for validating nameservers with HTTPS connections. This property is mutually exclusive with `ca_certificate` property and may only be configured when nameservers begin with HTTPS.")
    domain: Optional[StrictStr] = Field(default=None, description="The domain suffix to be appended by the appliance when performing DNS lookups.")
    nameservers: Optional[conlist(StrictStr)] = Field(default=None, description="The list of DNS servers either in the form of IP addresses or HTTPS endpoints. Domain names in HTTPS endpoints are not supported. IP addresses must be used instead. If nameservers begin with `https://`, then DNS queries will be performed over HTTPS. Otherwise, unencrypted DNS queries will be performed. Using a combination of nameservers that begin with `https://` and that do not begin with `https://` is not supported. If servers are specified with `https://` one of `ca_certificate` and `ca_certificate_group` parameters must be set.")
    services: Optional[conlist(StrictStr)] = Field(default=None, description="The list of services utilizing the DNS configuration.")
    source: Optional[ReferenceNoId] = Field(default=None, description="The network interface used for communication with the DNS server.")
    __properties = ["name", "ca_certificate", "ca_certificate_group", "domain", "nameservers", "services", "source"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ca_certificate
        if _include_in_dict('ca_certificate', include_readonly, excluded_fields, none_fields):
            _dict['ca_certificate'] = self.ca_certificate.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of ca_certificate_group
        if _include_in_dict('ca_certificate_group', include_readonly, excluded_fields, none_fields):
            _dict['ca_certificate_group'] = self.ca_certificate_group.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of source
        if _include_in_dict('source', include_readonly, excluded_fields, none_fields):
            _dict['source'] = self.source.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Dns:
        """Create an instance of Dns from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Dns:
        """Create an instance of Dns from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Dns.parse_obj(obj)

        _obj = Dns.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "ca_certificate": ReferenceWithType.from_dict(obj.get("ca_certificate")) if obj.get("ca_certificate") is not None else None,
            "ca_certificate_group": ReferenceWithType.from_dict(obj.get("ca_certificate_group")) if obj.get("ca_certificate_group") is not None else None,
            "domain": obj.get("domain"),
            "nameservers": obj.get("nameservers"),
            "services": obj.get("services"),
            "source": ReferenceNoId.from_dict(obj.get("source")) if obj.get("source") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

