# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Saml2SsoIdp(BaseModel):
    """
    Properties specific to the identity provider.
    """ # noqa: E501
    entity_id: Optional[StrictStr] = Field(default=None, description="A globally unique name for the identity provider.")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the identity provider.")
    metadata_url: Optional[StrictStr] = Field(default=None, description="The URL of the identity provider metadata.")
    sign_request_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, SAML requests will be signed by the service provider.")
    encrypt_assertion_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, SAML assertions will be encrypted by the identity provider.")
    verification_certificate: Optional[StrictStr] = Field(default=None, description="The X509 certificate that the service provider uses to verify the SAML response signature from the identity provider.")
    __properties: ClassVar[List[str]] = ["entity_id", "url", "metadata_url", "sign_request_enabled", "encrypt_assertion_enabled", "verification_certificate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Saml2SsoIdp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Saml2SsoIdp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "entity_id": obj.get("entity_id"),
            "url": obj.get("url"),
            "metadata_url": obj.get("metadata_url"),
            "sign_request_enabled": obj.get("sign_request_enabled"),
            "encrypt_assertion_enabled": obj.get("encrypt_assertion_enabled"),
            "verification_certificate": obj.get("verification_certificate")
        })
        return _obj


