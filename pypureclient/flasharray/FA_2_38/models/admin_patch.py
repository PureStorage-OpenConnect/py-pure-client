# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_38.models.admin_role import AdminRole
from pypureclient.flasharray.FA_2_38.models.api_token import ApiToken
from pypureclient.flasharray.FA_2_38.models.reference_with_type import ReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class AdminPatch(BaseModel):
    """
    AdminPatch
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and cannot be changed.")
    api_token: Optional[ApiToken] = None
    is_local: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the user is local to the machine.")
    locked: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the user is currently locked out. otherwise `false`. Change to `false` to unlock a user. This field is only visible to `array_admin` roles. For all other users, the value is always `null`.")
    lockout_remaining: Optional[StrictInt] = Field(default=None, description="The remaining lockout period if the user is locked out, in milliseconds. This field is only visible to `array_admin` roles. For all other users, the value is always `null`.")
    password: Optional[StrictStr] = Field(default=None, description="Password associated with the account.")
    public_key: Optional[StrictStr] = Field(default=None, description="Public key for SSH access. Multiple public keys can be specified, separated by newlines.")
    role: Optional[AdminRole] = None
    management_access_policies: Optional[List[ReferenceWithType]] = Field(default=None, description="List of management access policies associated with the administrator.")
    old_password: Optional[StrictStr] = Field(default=None, description="The current password.")
    __properties: ClassVar[List[str]] = ["name", "api_token", "is_local", "locked", "lockout_remaining", "password", "public_key", "role", "management_access_policies", "old_password"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "is_local",
            "lockout_remaining",
            "management_access_policies",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_token
        if self.api_token and (include_readonly or "api_token" not in excluded_fields):
            _dict['api_token'] = self.api_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role and (include_readonly or "role" not in excluded_fields):
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in management_access_policies (list)
        if self.management_access_policies and (include_readonly or "management_access_policies" not in excluded_fields):
            _items = []
            for _item_management_access_policies in self.management_access_policies:
                if _item_management_access_policies:
                    _items.append(_item_management_access_policies.to_dict())
            _dict['management_access_policies'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdminPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdminPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "api_token": ApiToken.from_dict(obj["api_token"]) if obj.get("api_token") is not None else None,
            "is_local": obj.get("is_local"),
            "locked": obj.get("locked"),
            "lockout_remaining": obj.get("lockout_remaining"),
            "password": obj.get("password"),
            "public_key": obj.get("public_key"),
            "role": AdminRole.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "management_access_policies": [ReferenceWithType.from_dict(_item) for _item in obj["management_access_policies"]] if obj.get("management_access_policies") is not None else None,
            "old_password": obj.get("old_password")
        })
        return _obj


