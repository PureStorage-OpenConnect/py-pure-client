# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.38
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_38.models.fixed_reference_with_type import FixedReferenceWithType


class ApiClient(BaseModel):
    """
    ApiClient
    """
    access_policies: Optional[conlist(FixedReferenceWithType)] = Field(default=None, description="The access policies allowed for ID Tokens issued by this API client. The bearer of an access token will be authorized to perform actions within the intersection of these policies and those of the array user specified as the JWT `sub` (subject) claim.")
    access_token_ttl_in_ms: Optional[StrictInt] = Field(default=None, description="The requested TTL (Time To Live) length of time for the exchanged access token, measured in milliseconds.")
    enabled: Optional[StrictBool] = Field(default=None, description="If `true`, the API client is permitted to exchange ID Tokens for access tokens. API clients are disabled by default.")
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the associated API client. The ID represents the JWT `aud` (audience) claim in ID Tokens issued for this API client.")
    issuer: Optional[StrictStr] = Field(default=None, description="The name of the identity provider that will be issuing ID Tokens for this API client. This string represents the JWT `iss` (issuer) claim in ID Tokens issued for this API client.")
    key_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the associated public key of this API client. This string must match the JWT `kid` (key ID) claim in ID Tokens issued for this API client.")
    max_role: Optional[StrictStr] = Field(default=None, description="This field has been deprecated. The maximum Admin Access Policy (previously 'role') allowed for ID Tokens issued by this API client. The bearer of an access token will be authorized to perform actions within the intersection of this policy and that of the array user specified as the JWT `sub` (subject) claim. `max_role` is deprecated in favor of `access_policies`, but remains for backwards compatibility. If a client has exactly one access policy which corresponds to a valid legacy role of the same name, `max_role` will be the name of that policy. Otherwise, it will be null.")
    name: Optional[StrictStr] = Field(default=None, description="The API client name.")
    public_key: Optional[StrictStr] = Field(default=None, description="The API client's PEM formatted (Base64 encoded) RSA public key.")
    __properties = ["access_policies", "access_token_ttl_in_ms", "enabled", "id", "issuer", "key_id", "max_role", "name", "public_key"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "access_policies",
                "access_token_ttl_in_ms",
                "enabled",
                "id",
                "issuer",
                "key_id",
                "max_role",
                "name",
                "public_key",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in access_policies (list)
        if _include_in_dict('access_policies', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.access_policies:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['access_policies'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ApiClient:
        """Create an instance of ApiClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ApiClient:
        """Create an instance of ApiClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ApiClient.parse_obj(obj)

        _obj = ApiClient.construct(_fields_set=None, **{
            "access_policies": [FixedReferenceWithType.from_dict(_item) for _item in obj.get("access_policies")] if obj.get("access_policies") is not None else None,
            "access_token_ttl_in_ms": obj.get("access_token_ttl_in_ms"),
            "enabled": obj.get("enabled"),
            "id": obj.get("id"),
            "issuer": obj.get("issuer"),
            "key_id": obj.get("key_id"),
            "max_role": obj.get("max_role"),
            "name": obj.get("name"),
            "public_key": obj.get("public_key")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

