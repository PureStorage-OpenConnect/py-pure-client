# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.38
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_38 import models

class Host(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'context': 'FixedReference',
        'space': 'Space',
        'time_remaining': 'int',
        'host_group': 'ReferenceNoId',
        'destroyed': 'bool',
        'port_connectivity': 'HostPortConnectivity',
        'wwns': 'list[str]',
        'personality': 'str',
        'vlan': 'str',
        'connection_count': 'int',
        'chap': 'Chap',
        'nqns': 'list[str]',
        'iqns': 'list[str]',
        'is_local': 'bool',
        'preferred_arrays': 'list[Reference]'
    }

    attribute_map = {
        'name': 'name',
        'context': 'context',
        'space': 'space',
        'time_remaining': 'time_remaining',
        'host_group': 'host_group',
        'destroyed': 'destroyed',
        'port_connectivity': 'port_connectivity',
        'wwns': 'wwns',
        'personality': 'personality',
        'vlan': 'vlan',
        'connection_count': 'connection_count',
        'chap': 'chap',
        'nqns': 'nqns',
        'iqns': 'iqns',
        'is_local': 'is_local',
        'preferred_arrays': 'preferred_arrays'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        context=None,  # type: models.FixedReference
        space=None,  # type: models.Space
        time_remaining=None,  # type: int
        host_group=None,  # type: models.ReferenceNoId
        destroyed=None,  # type: bool
        port_connectivity=None,  # type: models.HostPortConnectivity
        wwns=None,  # type: List[str]
        personality=None,  # type: str
        vlan=None,  # type: str
        connection_count=None,  # type: int
        chap=None,  # type: models.Chap
        nqns=None,  # type: List[str]
        iqns=None,  # type: List[str]
        is_local=None,  # type: bool
        preferred_arrays=None,  # type: List[models.Reference]
    ):
        """
        Keyword args:
            name (str): A user-specified name. The name must be locally unique and can be changed. 
            context (FixedReference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
            space (Space): Displays provisioned (virtual) size and physical storage consumption information for the sum of all volumes connected to the specified host. 
            time_remaining (int): The amount of time left until the destroyed host is permanently eradicated, measured in milliseconds. 
            host_group (ReferenceNoId): The host group to which the host should be associated.
            destroyed (bool): Returns a value of `true` if the host has been destroyed with its container realm and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed host is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed host will be recovered if its container realm is recovered. Once the `time_remaining` period has elapsed, the host is permanently eradicated and can no longer be recovered. 
            port_connectivity (HostPortConnectivity)
            wwns (list[str]): The Fibre Channel World Wide Name (WWN) associated with the host.
            personality (str): Determines how the system tunes the array to ensure that it works optimally with the host. Set `personality` to the name of the host operating system or virtual memory system. Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`, `oracle-vm-server`, `solaris`, and `vms`. If your system is not listed as one of the valid host personalities, do not set the option. By default, the personality is not set. 
            vlan (str): The VLAN ID that the host is associated with. If set to `any`, the host can access any VLAN. If set to `untagged`, the host can only access untagged VLANs.  If set to a number between `1` and `4094`, the host can only access the specified VLAN with that number. 
            connection_count (int): The number of volumes connected to the specified host.
            chap (Chap)
            nqns (list[str]): The NVMe Qualified Name (NQN) associated with the host.
            iqns (list[str]): The iSCSI qualified name (IQN) associated with the host. 
            is_local (bool): If set to `true`, the location reference is to the local array. If set to `false`, the location reference is to a remote location, such as a remote array or offload target. 
            preferred_arrays (list[Reference]): For synchronous replication configurations, sets a host's preferred array to specify which array exposes active/optimized paths to that host. Enter multiple preferred arrays in comma-separated format. If a preferred array is set for a host, then the other arrays in the same pod will expose active/non-optimized paths to that host. If the host is in a host group, `preferred_arrays` cannot be set because host groups have their own preferred arrays. On a preferred array of a certain host, all the paths on all the ports (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths, while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths. 
        """
        if name is not None:
            self.name = name
        if context is not None:
            self.context = context
        if space is not None:
            self.space = space
        if time_remaining is not None:
            self.time_remaining = time_remaining
        if host_group is not None:
            self.host_group = host_group
        if destroyed is not None:
            self.destroyed = destroyed
        if port_connectivity is not None:
            self.port_connectivity = port_connectivity
        if wwns is not None:
            self.wwns = wwns
        if personality is not None:
            self.personality = personality
        if vlan is not None:
            self.vlan = vlan
        if connection_count is not None:
            self.connection_count = connection_count
        if chap is not None:
            self.chap = chap
        if nqns is not None:
            self.nqns = nqns
        if iqns is not None:
            self.iqns = iqns
        if is_local is not None:
            self.is_local = is_local
        if preferred_arrays is not None:
            self.preferred_arrays = preferred_arrays

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Host`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Host`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Host`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Host`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(Host, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Host):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
