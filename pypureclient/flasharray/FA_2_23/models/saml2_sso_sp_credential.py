# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.23
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_23.models.reference_no_id import ReferenceNoId
from typing import Optional, Set
from typing_extensions import Self

class Saml2SsoSpCredential(BaseModel):
    """
    Saml2SsoSpCredential
    """ # noqa: E501
    signing_credential: Optional[ReferenceNoId] = Field(default=None, description="The credential used by the service provider to sign SAML requests. The credential is managed by the `certificates` endpoint and `purecert` CLI commands.")
    decryption_credential: Optional[ReferenceNoId] = Field(default=None, description="The credential used by the service provider to decrypt encrypted SAML assertions from the identity provider. The credential is managed by the `certificates` endpoint and `purecert` CLI commands.")
    __properties: ClassVar[List[str]] = ["signing_credential", "decryption_credential"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of signing_credential
        if self.signing_credential and (include_readonly or "signing_credential" not in excluded_fields):
            _dict['signing_credential'] = self.signing_credential.to_dict()
        # override the default output from pydantic by calling `to_dict()` of decryption_credential
        if self.decryption_credential and (include_readonly or "decryption_credential" not in excluded_fields):
            _dict['decryption_credential'] = self.decryption_credential.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Saml2SsoSpCredential from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Saml2SsoSpCredential from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "signing_credential": ReferenceNoId.from_dict(obj["signing_credential"]) if obj.get("signing_credential") is not None else None,
            "decryption_credential": ReferenceNoId.from_dict(obj["decryption_credential"]) if obj.get("decryption_credential") is not None else None
        })
        return _obj


