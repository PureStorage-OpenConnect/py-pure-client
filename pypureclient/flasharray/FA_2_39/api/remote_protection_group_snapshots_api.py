# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.39
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_39.models.destroyed_patch_post import DestroyedPatchPost
from pypureclient.flasharray.FA_2_39.models.remote_protection_group_snapshot_get_response import RemoteProtectionGroupSnapshotGetResponse
from pypureclient.flasharray.FA_2_39.models.remote_protection_group_snapshot_post import RemoteProtectionGroupSnapshotPost
from pypureclient.flasharray.FA_2_39.models.remote_protection_group_snapshot_response import RemoteProtectionGroupSnapshotResponse
from pypureclient.flasharray.FA_2_39.models.remote_protection_group_snapshot_transfer_get_response import RemoteProtectionGroupSnapshotTransferGetResponse
from pypureclient.flasharray.FA_2_39.models.test_result_with_resource_with_id_post_response import TestResultWithResourceWithIdPostResponse
from pypureclient.flasharray.FA_2_39.api_client import ApiClient as _TransportApiClient, RequestSerialized
from pypureclient.flasharray.FA_2_39.api_response import ApiResponse
from pypureclient.flasharray.FA_2_39.rest import RESTResponseType


class RemoteProtectionGroupSnapshotsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client: Optional[_TransportApiClient] = None) -> None:
        self.api_client = api_client if api_client else _TransportApiClient.get_default()


    @validate_call
    def api239_remote_protection_group_snapshots_delete_with_http_info(
        self,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        context_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")] = None,
        names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.")] = None,
        on: Annotated[Optional[StrictStr], Field(description="Performs the operation on the target name specified. For example, `targetName01`.")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[None]:
        """Delete a remote protection group snapshot

        Deletes a remote protection group snapshot that has been destroyed and is pending eradication. Eradicated remote protection group snapshots cannot be recovered. Remote protection group snapshots are destroyed using the `PATCH` method. The `names` parameter represents the name of the protection group snapshot. The `on` parameter represents the name of the offload target. The `names` and `on` parameters are required and must be used together.

        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param context_names: Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.
        :type context_names: List[str]
        :param names: Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type names: List[str]
        :param ids: Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.
        :type ids: List[str]
        :param on: Performs the operation on the target name specified. For example, `targetName01`.
        :type on: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api239_remote_protection_group_snapshots_delete_serialize(
            authorization = authorization,
            x_request_id = x_request_id,
            context_names = context_names,
            names = names,
            ids = ids,
            on = on,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api239_remote_protection_group_snapshots_delete_serialize(
        self,
        authorization,
        x_request_id,
        context_names,
        names,
        ids,
        on,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'context_names': 'csv',
            'names': 'csv',
            'ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if context_names is not None:
            
            _query_params.append(('context_names', context_names))
            
        if names is not None:
            
            _query_params.append(('names', names))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if on is not None:
            
            _query_params.append(('on', on))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/2.39/remote-protection-group-snapshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )


    @validate_call
    def api239_remote_protection_group_snapshots_get_with_http_info(
        self,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        allow_errors: Annotated[Optional[StrictBool], Field(description="If set to `true`, the API will allow the operation to continue even if there are errors. Any errors will be returned in the `errors` field of the response. If set to `false`, the operation will fail if there are any errors.")] = None,
        context_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique contexts specified. If specified, each context name must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of data with some consistency guaranteed. The token is a Base64 encoded value. Set `continuation_token` to the system-generated token taken from the `x-next-token` header field of the response. A query has reached its last page when the response does not include a token. Pagination requires the `limit` and `continuation_token` query parameters.")] = None,
        destroyed: Annotated[Optional[StrictBool], Field(description="If set to `true`, lists only destroyed objects that are in the eradication pending state. If set to `false`, lists only objects that are not destroyed. For destroyed objects, the time remaining is displayed in milliseconds.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Narrows down the results to only the response objects that satisfy the filter criteria.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Limits the size of the response to the specified number of objects on each page. To return the total number of resources, set `limit=0`. The total number of resources is returned as a `total_item_count` value. If the page size requested is larger than the system maximum limit, the server returns the maximum limit, disregarding the requested page size.")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.")] = None,
        names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting position based on the results of the query in relation to the full set of response objects returned.")] = None,
        on: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the target name specified. Enter multiple target names in comma-separated format. For example, `targetName01,targetName02`.")] = None,
        sort: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Returns the response objects in the order specified. Set `sort` to the name in the response by which to sort. Sorting can be performed on any of the names in the response, and the objects can be sorted in ascending or descending order. By default, the response objects are sorted in ascending order. To sort in descending order, append the minus sign (`-`) to the name. A single request can be sorted on multiple objects. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple names, list the names as comma-separated values.")] = None,
        source_ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.")] = None,
        source_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.")] = None,
        total_item_count: Annotated[Optional[StrictBool], Field(description="If set to `true`, the `total_item_count` matching the specified query parameters is calculated and returned in the response. If set to `false`, the `total_item_count` is `null` in the response. This may speed up queries where the `total_item_count` is large. If not specified, defaults to `false`.")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[RemoteProtectionGroupSnapshotGetResponse]:
        """List remote protection group snapshots

        Displays a list of remote protection group snapshots.

        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param allow_errors: If set to `true`, the API will allow the operation to continue even if there are errors. Any errors will be returned in the `errors` field of the response. If set to `false`, the operation will fail if there are any errors.
        :type allow_errors: bool
        :param context_names: Performs the operation on the unique contexts specified. If specified, each context name must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type context_names: List[str]
        :param continuation_token: A token used to retrieve the next page of data with some consistency guaranteed. The token is a Base64 encoded value. Set `continuation_token` to the system-generated token taken from the `x-next-token` header field of the response. A query has reached its last page when the response does not include a token. Pagination requires the `limit` and `continuation_token` query parameters.
        :type continuation_token: str
        :param destroyed: If set to `true`, lists only destroyed objects that are in the eradication pending state. If set to `false`, lists only objects that are not destroyed. For destroyed objects, the time remaining is displayed in milliseconds.
        :type destroyed: bool
        :param filter: Narrows down the results to only the response objects that satisfy the filter criteria.
        :type filter: str
        :param limit: Limits the size of the response to the specified number of objects on each page. To return the total number of resources, set `limit=0`. The total number of resources is returned as a `total_item_count` value. If the page size requested is larger than the system maximum limit, the server returns the maximum limit, disregarding the requested page size.
        :type limit: int
        :param ids: Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.
        :type ids: List[str]
        :param names: Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type names: List[str]
        :param offset: The starting position based on the results of the query in relation to the full set of response objects returned.
        :type offset: int
        :param on: Performs the operation on the target name specified. Enter multiple target names in comma-separated format. For example, `targetName01,targetName02`.
        :type on: List[str]
        :param sort: Returns the response objects in the order specified. Set `sort` to the name in the response by which to sort. Sorting can be performed on any of the names in the response, and the objects can be sorted in ascending or descending order. By default, the response objects are sorted in ascending order. To sort in descending order, append the minus sign (`-`) to the name. A single request can be sorted on multiple objects. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple names, list the names as comma-separated values.
        :type sort: List[str]
        :param source_ids: Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.
        :type source_ids: List[str]
        :param source_names: Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.
        :type source_names: List[str]
        :param total_item_count: If set to `true`, the `total_item_count` matching the specified query parameters is calculated and returned in the response. If set to `false`, the `total_item_count` is `null` in the response. This may speed up queries where the `total_item_count` is large. If not specified, defaults to `false`.
        :type total_item_count: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api239_remote_protection_group_snapshots_get_serialize(
            authorization = authorization,
            x_request_id = x_request_id,
            allow_errors = allow_errors,
            context_names = context_names,
            continuation_token = continuation_token,
            destroyed = destroyed,
            filter = filter,
            limit = limit,
            ids = ids,
            names = names,
            offset = offset,
            on = on,
            sort = sort,
            source_ids = source_ids,
            source_names = source_names,
            total_item_count = total_item_count,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemoteProtectionGroupSnapshotGetResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api239_remote_protection_group_snapshots_get_serialize(
        self,
        authorization,
        x_request_id,
        allow_errors,
        context_names,
        continuation_token,
        destroyed,
        filter,
        limit,
        ids,
        names,
        offset,
        on,
        sort,
        source_ids,
        source_names,
        total_item_count,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'context_names': 'csv',
            'ids': 'csv',
            'names': 'csv',
            'on': 'csv',
            'sort': 'csv',
            'source_ids': 'csv',
            'source_names': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if allow_errors is not None:
            
            _query_params.append(('allow_errors', allow_errors))
            
        if context_names is not None:
            
            _query_params.append(('context_names', context_names))
            
        if continuation_token is not None:
            
            _query_params.append(('continuation_token', continuation_token))
            
        if destroyed is not None:
            
            _query_params.append(('destroyed', destroyed))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if names is not None:
            
            _query_params.append(('names', names))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if on is not None:
            
            _query_params.append(('on', on))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if source_ids is not None:
            
            _query_params.append(('source_ids', source_ids))
            
        if source_names is not None:
            
            _query_params.append(('source_names', source_names))
            
        if total_item_count is not None:
            
            _query_params.append(('total_item_count', total_item_count))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/2.39/remote-protection-group-snapshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )


    @validate_call
    def api239_remote_protection_group_snapshots_patch_with_http_info(
        self,
        remote_protection_group_snapshot: DestroyedPatchPost,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        context_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")] = None,
        names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.")] = None,
        on: Annotated[Optional[StrictStr], Field(description="Performs the operation on the target name specified. For example, `targetName01`.")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[RemoteProtectionGroupSnapshotResponse]:
        """Modify a remote protection group snapshot

        Modifies a remote protection group snapshot, removing it from the offload target and destroying the snapshot. The `on` parameter represents the name of the offload target. The `ids` or `names` parameter and the `on` parameter are required and must be used together.

        :param remote_protection_group_snapshot: (required)
        :type remote_protection_group_snapshot: DestroyedPatchPost
        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param context_names: Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.
        :type context_names: List[str]
        :param names: Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type names: List[str]
        :param ids: Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.
        :type ids: List[str]
        :param on: Performs the operation on the target name specified. For example, `targetName01`.
        :type on: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api239_remote_protection_group_snapshots_patch_serialize(
            remote_protection_group_snapshot = remote_protection_group_snapshot,
            authorization = authorization,
            x_request_id = x_request_id,
            context_names = context_names,
            names = names,
            ids = ids,
            on = on,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemoteProtectionGroupSnapshotResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api239_remote_protection_group_snapshots_patch_serialize(
        self,
        remote_protection_group_snapshot,
        authorization,
        x_request_id,
        context_names,
        names,
        ids,
        on,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'context_names': 'csv',
            'names': 'csv',
            'ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if context_names is not None:
            
            _query_params.append(('context_names', context_names))
            
        if names is not None:
            
            _query_params.append(('names', names))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if on is not None:
            
            _query_params.append(('on', on))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if remote_protection_group_snapshot is not None:
            _body_params = remote_protection_group_snapshot


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        _default_content_type = (
            self.api_client.select_header_content_type(
                [
                    'application/json'
                ]
            )
        )
        if _default_content_type is not None:
            _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='PATCH',
            resource_path='/api/2.39/remote-protection-group-snapshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )


    @validate_call
    def api239_remote_protection_group_snapshots_post_with_http_info(
        self,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        apply_retention: Annotated[Optional[StrictBool], Field(description="If `true`, applies the local and remote retention policy to the snapshots.")] = None,
        context_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")] = None,
        convert_source_to_baseline: Annotated[Optional[StrictBool], Field(description="Set to `true` to have the snapshot be eradicated when it is no longer baseline on source.")] = None,
        for_replication: Annotated[Optional[StrictBool], Field(description="If `true`, destroys and eradicates the snapshot after 1 hour.")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.")] = None,
        names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        replicate: Annotated[Optional[StrictBool], Field(description="If set to `true`, queues up and begins replicating to each allowed target after all earlier replication sessions for the same protection group have been completed to that target. The `replicate` and `replicate_now` parameters cannot be used together.")] = None,
        replicate_now: Annotated[Optional[StrictBool], Field(description="If set to `true`, replicates the snapshots to each allowed target. The `replicate` and `replicate_now` parameters cannot be used together.")] = None,
        allow_throttle: Annotated[Optional[StrictBool], Field(description="If set to `true`, allows snapshot to fail if array health is not optimal.")] = None,
        source_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.")] = None,
        source_ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.")] = None,
        on: Annotated[Optional[StrictStr], Field(description="Performs the operation on the target name specified. For example, `targetName01`.")] = None,
        remote_protection_group_snapshot: Optional[RemoteProtectionGroupSnapshotPost] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[RemoteProtectionGroupSnapshotResponse]:
        """Create remote protection group snapshot

        Creates remote protection group snapshots.

        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param apply_retention: If `true`, applies the local and remote retention policy to the snapshots.
        :type apply_retention: bool
        :param context_names: Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.
        :type context_names: List[str]
        :param convert_source_to_baseline: Set to `true` to have the snapshot be eradicated when it is no longer baseline on source.
        :type convert_source_to_baseline: bool
        :param for_replication: If `true`, destroys and eradicates the snapshot after 1 hour.
        :type for_replication: bool
        :param ids: Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.
        :type ids: List[str]
        :param names: Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type names: List[str]
        :param replicate: If set to `true`, queues up and begins replicating to each allowed target after all earlier replication sessions for the same protection group have been completed to that target. The `replicate` and `replicate_now` parameters cannot be used together.
        :type replicate: bool
        :param replicate_now: If set to `true`, replicates the snapshots to each allowed target. The `replicate` and `replicate_now` parameters cannot be used together.
        :type replicate_now: bool
        :param allow_throttle: If set to `true`, allows snapshot to fail if array health is not optimal.
        :type allow_throttle: bool
        :param source_names: Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.
        :type source_names: List[str]
        :param source_ids: Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.
        :type source_ids: List[str]
        :param on: Performs the operation on the target name specified. For example, `targetName01`.
        :type on: str
        :param remote_protection_group_snapshot:
        :type remote_protection_group_snapshot: RemoteProtectionGroupSnapshotPost
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api239_remote_protection_group_snapshots_post_serialize(
            authorization = authorization,
            x_request_id = x_request_id,
            apply_retention = apply_retention,
            context_names = context_names,
            convert_source_to_baseline = convert_source_to_baseline,
            for_replication = for_replication,
            ids = ids,
            names = names,
            replicate = replicate,
            replicate_now = replicate_now,
            allow_throttle = allow_throttle,
            source_names = source_names,
            source_ids = source_ids,
            on = on,
            remote_protection_group_snapshot = remote_protection_group_snapshot,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemoteProtectionGroupSnapshotResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api239_remote_protection_group_snapshots_post_serialize(
        self,
        authorization,
        x_request_id,
        apply_retention,
        context_names,
        convert_source_to_baseline,
        for_replication,
        ids,
        names,
        replicate,
        replicate_now,
        allow_throttle,
        source_names,
        source_ids,
        on,
        remote_protection_group_snapshot,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'context_names': 'csv',
            'ids': 'csv',
            'names': 'csv',
            'source_names': 'csv',
            'source_ids': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if apply_retention is not None:
            
            _query_params.append(('apply_retention', apply_retention))
            
        if context_names is not None:
            
            _query_params.append(('context_names', context_names))
            
        if convert_source_to_baseline is not None:
            
            _query_params.append(('convert_source_to_baseline', convert_source_to_baseline))
            
        if for_replication is not None:
            
            _query_params.append(('for_replication', for_replication))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if names is not None:
            
            _query_params.append(('names', names))
            
        if replicate is not None:
            
            _query_params.append(('replicate', replicate))
            
        if replicate_now is not None:
            
            _query_params.append(('replicate_now', replicate_now))
            
        if allow_throttle is not None:
            
            _query_params.append(('allow_throttle', allow_throttle))
            
        if source_names is not None:
            
            _query_params.append(('source_names', source_names))
            
        if source_ids is not None:
            
            _query_params.append(('source_ids', source_ids))
            
        if on is not None:
            
            _query_params.append(('on', on))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if remote_protection_group_snapshot is not None:
            _body_params = remote_protection_group_snapshot


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        _default_content_type = (
            self.api_client.select_header_content_type(
                [
                    'application/json'
                ]
            )
        )
        if _default_content_type is not None:
            _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/2.39/remote-protection-group-snapshots',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )


    @validate_call
    def api239_remote_protection_group_snapshots_test_post_with_http_info(
        self,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        context_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")] = None,
        apply_retention: Annotated[Optional[StrictBool], Field(description="If `true`, applies the local and remote retention policy to the snapshots.")] = None,
        convert_source_to_baseline: Annotated[Optional[StrictBool], Field(description="Set to `true` to have the snapshot be eradicated when it is no longer baseline on source.")] = None,
        for_replication: Annotated[Optional[StrictBool], Field(description="If `true`, destroys and eradicates the snapshot after 1 hour.")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.")] = None,
        names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        replicate: Annotated[Optional[StrictBool], Field(description="If set to `true`, queues up and begins replicating to each allowed target after all earlier replication sessions for the same protection group have been completed to that target. The `replicate` and `replicate_now` parameters cannot be used together.")] = None,
        replicate_now: Annotated[Optional[StrictBool], Field(description="If set to `true`, replicates the snapshots to each allowed target. The `replicate` and `replicate_now` parameters cannot be used together.")] = None,
        allow_throttle: Annotated[Optional[StrictBool], Field(description="If set to `true`, allows snapshot to fail if array health is not optimal.")] = None,
        source_ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.")] = None,
        source_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.")] = None,
        on: Annotated[Optional[StrictStr], Field(description="Performs the operation on the target name specified. For example, `targetName01`.")] = None,
        remote_protection_group_snapshot: Optional[RemoteProtectionGroupSnapshotPost] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[TestResultWithResourceWithIdPostResponse]:
        """Create an attempt to take remote protection group snapshot

        Creates an attempt to take a remote protection group snapshot without actually taking it, to test if the snapshot can be successfully taken.

        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param context_names: Performs the operation on the context specified. If specified, the context names must be an array of size 1, and the single element must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.
        :type context_names: List[str]
        :param apply_retention: If `true`, applies the local and remote retention policy to the snapshots.
        :type apply_retention: bool
        :param convert_source_to_baseline: Set to `true` to have the snapshot be eradicated when it is no longer baseline on source.
        :type convert_source_to_baseline: bool
        :param for_replication: If `true`, destroys and eradicates the snapshot after 1 hour.
        :type for_replication: bool
        :param ids: Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.
        :type ids: List[str]
        :param names: Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type names: List[str]
        :param replicate: If set to `true`, queues up and begins replicating to each allowed target after all earlier replication sessions for the same protection group have been completed to that target. The `replicate` and `replicate_now` parameters cannot be used together.
        :type replicate: bool
        :param replicate_now: If set to `true`, replicates the snapshots to each allowed target. The `replicate` and `replicate_now` parameters cannot be used together.
        :type replicate_now: bool
        :param allow_throttle: If set to `true`, allows snapshot to fail if array health is not optimal.
        :type allow_throttle: bool
        :param source_ids: Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.
        :type source_ids: List[str]
        :param source_names: Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.
        :type source_names: List[str]
        :param on: Performs the operation on the target name specified. For example, `targetName01`.
        :type on: str
        :param remote_protection_group_snapshot:
        :type remote_protection_group_snapshot: RemoteProtectionGroupSnapshotPost
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api239_remote_protection_group_snapshots_test_post_serialize(
            authorization = authorization,
            x_request_id = x_request_id,
            context_names = context_names,
            apply_retention = apply_retention,
            convert_source_to_baseline = convert_source_to_baseline,
            for_replication = for_replication,
            ids = ids,
            names = names,
            replicate = replicate,
            replicate_now = replicate_now,
            allow_throttle = allow_throttle,
            source_ids = source_ids,
            source_names = source_names,
            on = on,
            remote_protection_group_snapshot = remote_protection_group_snapshot,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "TestResultWithResourceWithIdPostResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api239_remote_protection_group_snapshots_test_post_serialize(
        self,
        authorization,
        x_request_id,
        context_names,
        apply_retention,
        convert_source_to_baseline,
        for_replication,
        ids,
        names,
        replicate,
        replicate_now,
        allow_throttle,
        source_ids,
        source_names,
        on,
        remote_protection_group_snapshot,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'context_names': 'csv',
            'ids': 'csv',
            'names': 'csv',
            'source_ids': 'csv',
            'source_names': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if context_names is not None:
            
            _query_params.append(('context_names', context_names))
            
        if apply_retention is not None:
            
            _query_params.append(('apply_retention', apply_retention))
            
        if convert_source_to_baseline is not None:
            
            _query_params.append(('convert_source_to_baseline', convert_source_to_baseline))
            
        if for_replication is not None:
            
            _query_params.append(('for_replication', for_replication))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if names is not None:
            
            _query_params.append(('names', names))
            
        if replicate is not None:
            
            _query_params.append(('replicate', replicate))
            
        if replicate_now is not None:
            
            _query_params.append(('replicate_now', replicate_now))
            
        if allow_throttle is not None:
            
            _query_params.append(('allow_throttle', allow_throttle))
            
        if source_ids is not None:
            
            _query_params.append(('source_ids', source_ids))
            
        if source_names is not None:
            
            _query_params.append(('source_names', source_names))
            
        if on is not None:
            
            _query_params.append(('on', on))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter
        if remote_protection_group_snapshot is not None:
            _body_params = remote_protection_group_snapshot


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )

        # set the HTTP header `Content-Type`
        _default_content_type = (
            self.api_client.select_header_content_type(
                [
                    'application/json'
                ]
            )
        )
        if _default_content_type is not None:
            _header_params['Content-Type'] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/2.39/remote-protection-group-snapshots/test',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )


    @validate_call
    def api239_remote_protection_group_snapshots_transfer_get_with_http_info(
        self,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        allow_errors: Annotated[Optional[StrictBool], Field(description="If set to `true`, the API will allow the operation to continue even if there are errors. Any errors will be returned in the `errors` field of the response. If set to `false`, the operation will fail if there are any errors.")] = None,
        context_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique contexts specified. If specified, each context name must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of data with some consistency guaranteed. The token is a Base64 encoded value. Set `continuation_token` to the system-generated token taken from the `x-next-token` header field of the response. A query has reached its last page when the response does not include a token. Pagination requires the `limit` and `continuation_token` query parameters.")] = None,
        destroyed: Annotated[Optional[StrictBool], Field(description="If set to `true`, lists only destroyed objects that are in the eradication pending state. If set to `false`, lists only objects that are not destroyed. For destroyed objects, the time remaining is displayed in milliseconds.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Narrows down the results to only the response objects that satisfy the filter criteria.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Limits the size of the response to the specified number of objects on each page. To return the total number of resources, set `limit=0`. The total number of resources is returned as a `total_item_count` value. If the page size requested is larger than the system maximum limit, the server returns the maximum limit, disregarding the requested page size.")] = None,
        ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.")] = None,
        names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting position based on the results of the query in relation to the full set of response objects returned.")] = None,
        on: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the target name specified. Enter multiple target names in comma-separated format. For example, `targetName01,targetName02`.")] = None,
        sort: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Returns the response objects in the order specified. Set `sort` to the name in the response by which to sort. Sorting can be performed on any of the names in the response, and the objects can be sorted in ascending or descending order. By default, the response objects are sorted in ascending order. To sort in descending order, append the minus sign (`-`) to the name. A single request can be sorted on multiple objects. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple names, list the names as comma-separated values.")] = None,
        source_ids: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.")] = None,
        source_names: Annotated[Optional[List[StrictStr]], Field(description="Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.")] = None,
        total_item_count: Annotated[Optional[StrictBool], Field(description="If set to `true`, the `total_item_count` matching the specified query parameters is calculated and returned in the response. If set to `false`, the `total_item_count` is `null` in the response. This may speed up queries where the `total_item_count` is large. If not specified, defaults to `false`.")] = None,
        total_only: Annotated[Optional[StrictBool], Field(description="If set to `true`, returns the aggregate value of all items after filtering. Where it makes more sense, the average value is displayed instead. The values are displayed for each name where meaningful. If `total_only=true`, the `items` list will be empty.")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[RemoteProtectionGroupSnapshotTransferGetResponse]:
        """List remote protection groups with transfer statistics

        Displays a list of remote protection groups and their transfer statistics.

        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param allow_errors: If set to `true`, the API will allow the operation to continue even if there are errors. Any errors will be returned in the `errors` field of the response. If set to `false`, the operation will fail if there are any errors.
        :type allow_errors: bool
        :param context_names: Performs the operation on the unique contexts specified. If specified, each context name must be the name of an array in the same fleet. If not specified, the context will default to the array that received this request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type context_names: List[str]
        :param continuation_token: A token used to retrieve the next page of data with some consistency guaranteed. The token is a Base64 encoded value. Set `continuation_token` to the system-generated token taken from the `x-next-token` header field of the response. A query has reached its last page when the response does not include a token. Pagination requires the `limit` and `continuation_token` query parameters.
        :type continuation_token: str
        :param destroyed: If set to `true`, lists only destroyed objects that are in the eradication pending state. If set to `false`, lists only objects that are not destroyed. For destroyed objects, the time remaining is displayed in milliseconds.
        :type destroyed: bool
        :param filter: Narrows down the results to only the response objects that satisfy the filter criteria.
        :type filter: str
        :param limit: Limits the size of the response to the specified number of objects on each page. To return the total number of resources, set `limit=0`. The total number of resources is returned as a `total_item_count` value. If the page size requested is larger than the system maximum limit, the server returns the maximum limit, disregarding the requested page size.
        :type limit: int
        :param ids: Performs the operation on the unique resource IDs specified. Enter multiple resource IDs in comma-separated format. The `ids` or `names` parameter is required, but they cannot be set together.
        :type ids: List[str]
        :param names: Performs the operation on the unique name specified. Enter multiple names in comma-separated format. For example, `name01,name02`.
        :type names: List[str]
        :param offset: The starting position based on the results of the query in relation to the full set of response objects returned.
        :type offset: int
        :param on: Performs the operation on the target name specified. Enter multiple target names in comma-separated format. For example, `targetName01,targetName02`.
        :type on: List[str]
        :param sort: Returns the response objects in the order specified. Set `sort` to the name in the response by which to sort. Sorting can be performed on any of the names in the response, and the objects can be sorted in ascending or descending order. By default, the response objects are sorted in ascending order. To sort in descending order, append the minus sign (`-`) to the name. A single request can be sorted on multiple objects. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple names, list the names as comma-separated values.
        :type sort: List[str]
        :param source_ids: Performs the operation on the source ID specified. Enter multiple source IDs in comma-separated format.
        :type source_ids: List[str]
        :param source_names: Performs the operation on the source name specified. Enter multiple source names in comma-separated format. For example, `name01,name02`.
        :type source_names: List[str]
        :param total_item_count: If set to `true`, the `total_item_count` matching the specified query parameters is calculated and returned in the response. If set to `false`, the `total_item_count` is `null` in the response. This may speed up queries where the `total_item_count` is large. If not specified, defaults to `false`.
        :type total_item_count: bool
        :param total_only: If set to `true`, returns the aggregate value of all items after filtering. Where it makes more sense, the average value is displayed instead. The values are displayed for each name where meaningful. If `total_only=true`, the `items` list will be empty.
        :type total_only: bool
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api239_remote_protection_group_snapshots_transfer_get_serialize(
            authorization = authorization,
            x_request_id = x_request_id,
            allow_errors = allow_errors,
            context_names = context_names,
            continuation_token = continuation_token,
            destroyed = destroyed,
            filter = filter,
            limit = limit,
            ids = ids,
            names = names,
            offset = offset,
            on = on,
            sort = sort,
            source_ids = source_ids,
            source_names = source_names,
            total_item_count = total_item_count,
            total_only = total_only,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "RemoteProtectionGroupSnapshotTransferGetResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api239_remote_protection_group_snapshots_transfer_get_serialize(
        self,
        authorization,
        x_request_id,
        allow_errors,
        context_names,
        continuation_token,
        destroyed,
        filter,
        limit,
        ids,
        names,
        offset,
        on,
        sort,
        source_ids,
        source_names,
        total_item_count,
        total_only,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'context_names': 'csv',
            'ids': 'csv',
            'names': 'csv',
            'on': 'csv',
            'sort': 'csv',
            'source_ids': 'csv',
            'source_names': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if allow_errors is not None:
            
            _query_params.append(('allow_errors', allow_errors))
            
        if context_names is not None:
            
            _query_params.append(('context_names', context_names))
            
        if continuation_token is not None:
            
            _query_params.append(('continuation_token', continuation_token))
            
        if destroyed is not None:
            
            _query_params.append(('destroyed', destroyed))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if ids is not None:
            
            _query_params.append(('ids', ids))
            
        if names is not None:
            
            _query_params.append(('names', names))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if on is not None:
            
            _query_params.append(('on', on))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if source_ids is not None:
            
            _query_params.append(('source_ids', source_ids))
            
        if source_names is not None:
            
            _query_params.append(('source_names', source_names))
            
        if total_item_count is not None:
            
            _query_params.append(('total_item_count', total_item_count))
            
        if total_only is not None:
            
            _query_params.append(('total_only', total_only))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/2.39/remote-protection-group-snapshots/transfer',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )
