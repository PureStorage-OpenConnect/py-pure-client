# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.39
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class ArrayErasure(BaseModel):
    """
    ArrayErasure
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the factory reset process. Valid values include `resetting`, `reset_failed`, `reimage_failed`, `waiting_for_finalize`, `downloading`, `downloaded`, and `download_failed`. A status of `resetting` indicates that the factory reset is running. A status of `reset_failed` indicates that the factory reset encountered a failure. A status of `reimage_failed` indicates that the factory reset failed to reimage the array. A status of `waiting_for_finalize` indicates that the factory reset has finished sanitizing drives, and is waiting to be finalized. A status of `downloading` indicates that the factory reset is downloading ISO image. A status of `downloaded` indicates that the factory reset completed ISO image download. A status of `download_failed` indicates that the factory reset failed to download ISO image.")
    image_source: Optional[StrictStr] = Field(default=None, description="Source of the ISO image to download. Valid values include `auto` and URLs. `auto` means download the image from Pure1 cloud, and a URL means download the image from the specified URL.")
    image_version: Optional[StrictStr] = Field(default=None, description="Version of the image to download and install.")
    image_download_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress of the ISO image download, displayed in decimal format.")
    details: Optional[StrictStr] = Field(default=None, description="The detailed reason of the `status`.")
    sanitization_certificate: Optional[StrictStr] = Field(default=None, description="The sanitization certificate of the factory reset, which complies with the standard described in NIST SP800-88R1 section 4.8.")
    __properties: ClassVar[List[str]] = ["id", "name", "status", "image_source", "image_version", "image_download_progress", "details", "sanitization_certificate"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayErasure from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayErasure from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "image_source": obj.get("image_source"),
            "image_version": obj.get("image_version"),
            "image_download_progress": obj.get("image_download_progress"),
            "details": obj.get("details"),
            "sanitization_certificate": obj.get("sanitization_certificate")
        })
        return _obj


