# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.39
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_rx_los import NetworkInterfacePortDetailsRxLos
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_rx_power import NetworkInterfacePortDetailsRxPower
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_static import NetworkInterfacePortDetailsStatic
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_temperature import NetworkInterfacePortDetailsTemperature
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_tx_bias import NetworkInterfacePortDetailsTxBias
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_tx_fault import NetworkInterfacePortDetailsTxFault
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_tx_power import NetworkInterfacePortDetailsTxPower
from pypureclient.flasharray.FA_2_39.models.network_interface_port_details_voltage import NetworkInterfacePortDetailsVoltage
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfacesPortDetails(BaseModel):
    """
    Network interface SFP details.
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    interface_type: Optional[StrictStr] = Field(default=None, description="The interface type. Valid values are `eth` and `fc`.")
    temperature: Optional[List[NetworkInterfacePortDetailsTemperature]] = Field(default=None, description="Displays real-time measurement of transceiver temperature and range. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    voltage: Optional[List[NetworkInterfacePortDetailsVoltage]] = Field(default=None, description="Displays real-time measurement of supply voltage and whether it is within range. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    tx_bias: Optional[List[NetworkInterfacePortDetailsTxBias]] = Field(default=None, description="Displays real-time measurement of Tx bias current and whether it is within range. For four-lane modules, the array contains a measurement and status for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    tx_power: Optional[List[NetworkInterfacePortDetailsTxPower]] = Field(default=None, description="Displays real-time measurement of Tx output power and whether it is within range. For four-lane modules, the array contains a measurement and status for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    rx_power: Optional[List[NetworkInterfacePortDetailsRxPower]] = Field(default=None, description="Displays real-time measurement of Rx input power and whether it is within range. For four-lane modules, the array contains a measurement and status for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    tx_fault: Optional[List[NetworkInterfacePortDetailsTxFault]] = Field(default=None, description="Displays status flags for Tx Fault. A value of `true` indicates transmitter/laser fault. For four-lane modules, the array contains a flag for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    rx_los: Optional[List[NetworkInterfacePortDetailsRxLos]] = Field(default=None, description="Displays status flags for Rx LOS. A value of `true` indicates Rx Loss-of-Signal. For four-lane modules, the array contains a flag for each channel. If the transceiver does not support digital diagnostic monitoring, the array is empty.")
    static: Optional[NetworkInterfacePortDetailsStatic] = None
    __properties: ClassVar[List[str]] = ["name", "interface_type", "temperature", "voltage", "tx_bias", "tx_power", "rx_power", "tx_fault", "rx_los", "static"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "interface_type",
            "temperature",
            "voltage",
            "tx_bias",
            "tx_power",
            "rx_power",
            "tx_fault",
            "rx_los",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in temperature (list)
        if self.temperature and (include_readonly or "temperature" not in excluded_fields):
            _items = []
            for _item_temperature in self.temperature:
                if _item_temperature:
                    _items.append(_item_temperature.to_dict())
            _dict['temperature'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in voltage (list)
        if self.voltage and (include_readonly or "voltage" not in excluded_fields):
            _items = []
            for _item_voltage in self.voltage:
                if _item_voltage:
                    _items.append(_item_voltage.to_dict())
            _dict['voltage'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tx_bias (list)
        if self.tx_bias and (include_readonly or "tx_bias" not in excluded_fields):
            _items = []
            for _item_tx_bias in self.tx_bias:
                if _item_tx_bias:
                    _items.append(_item_tx_bias.to_dict())
            _dict['tx_bias'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tx_power (list)
        if self.tx_power and (include_readonly or "tx_power" not in excluded_fields):
            _items = []
            for _item_tx_power in self.tx_power:
                if _item_tx_power:
                    _items.append(_item_tx_power.to_dict())
            _dict['tx_power'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rx_power (list)
        if self.rx_power and (include_readonly or "rx_power" not in excluded_fields):
            _items = []
            for _item_rx_power in self.rx_power:
                if _item_rx_power:
                    _items.append(_item_rx_power.to_dict())
            _dict['rx_power'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tx_fault (list)
        if self.tx_fault and (include_readonly or "tx_fault" not in excluded_fields):
            _items = []
            for _item_tx_fault in self.tx_fault:
                if _item_tx_fault:
                    _items.append(_item_tx_fault.to_dict())
            _dict['tx_fault'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rx_los (list)
        if self.rx_los and (include_readonly or "rx_los" not in excluded_fields):
            _items = []
            for _item_rx_los in self.rx_los:
                if _item_rx_los:
                    _items.append(_item_rx_los.to_dict())
            _dict['rx_los'] = _items
        # override the default output from pydantic by calling `to_dict()` of static
        if self.static and (include_readonly or "static" not in excluded_fields):
            _dict['static'] = self.static.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfacesPortDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfacesPortDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "interface_type": obj.get("interface_type"),
            "temperature": [NetworkInterfacePortDetailsTemperature.from_dict(_item) for _item in obj["temperature"]] if obj.get("temperature") is not None else None,
            "voltage": [NetworkInterfacePortDetailsVoltage.from_dict(_item) for _item in obj["voltage"]] if obj.get("voltage") is not None else None,
            "tx_bias": [NetworkInterfacePortDetailsTxBias.from_dict(_item) for _item in obj["tx_bias"]] if obj.get("tx_bias") is not None else None,
            "tx_power": [NetworkInterfacePortDetailsTxPower.from_dict(_item) for _item in obj["tx_power"]] if obj.get("tx_power") is not None else None,
            "rx_power": [NetworkInterfacePortDetailsRxPower.from_dict(_item) for _item in obj["rx_power"]] if obj.get("rx_power") is not None else None,
            "tx_fault": [NetworkInterfacePortDetailsTxFault.from_dict(_item) for _item in obj["tx_fault"]] if obj.get("tx_fault") is not None else None,
            "rx_los": [NetworkInterfacePortDetailsRxLos.from_dict(_item) for _item in obj["rx_los"]] if obj.get("rx_los") is not None else None,
            "static": NetworkInterfacePortDetailsStatic.from_dict(obj["static"]) if obj.get("static") is not None else None
        })
        return _obj


