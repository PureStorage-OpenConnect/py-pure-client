# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.39
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_39 import models

class CertificatePost(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'country': 'str',
        'issued_by': 'str',
        'issued_to': 'str',
        'certificate': 'str',
        'locality': 'str',
        'valid_from': 'int',
        'intermediate_certificate': 'str',
        'organization': 'str',
        'valid_to': 'int',
        'state': 'str',
        'common_name': 'str',
        'email': 'str',
        'organizational_unit': 'str',
        'key_size': 'int',
        'status': 'str',
        'days': 'int',
        'passphrase': 'str',
        'key': 'str'
    }

    attribute_map = {
        'name': 'name',
        'country': 'country',
        'issued_by': 'issued_by',
        'issued_to': 'issued_to',
        'certificate': 'certificate',
        'locality': 'locality',
        'valid_from': 'valid_from',
        'intermediate_certificate': 'intermediate_certificate',
        'organization': 'organization',
        'valid_to': 'valid_to',
        'state': 'state',
        'common_name': 'common_name',
        'email': 'email',
        'organizational_unit': 'organizational_unit',
        'key_size': 'key_size',
        'status': 'status',
        'days': 'days',
        'passphrase': 'passphrase',
        'key': 'key'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        country=None,  # type: str
        issued_by=None,  # type: str
        issued_to=None,  # type: str
        certificate=None,  # type: str
        locality=None,  # type: str
        valid_from=None,  # type: int
        intermediate_certificate=None,  # type: str
        organization=None,  # type: str
        valid_to=None,  # type: int
        state=None,  # type: str
        common_name=None,  # type: str
        email=None,  # type: str
        organizational_unit=None,  # type: str
        key_size=None,  # type: int
        status=None,  # type: str
        days=None,  # type: int
        passphrase=None,  # type: str
        key=None,  # type: str
    ):
        """
        Keyword args:
            name (str): A locally unique, system-generated name. The name cannot be modified. 
            country (str): Two-letter country (ISO) code listed in the certificate.
            issued_by (str): The party that issued the certificate.
            issued_to (str): The party to whom the certificate is issued.
            certificate (str): The text of the certificate.
            locality (str): The locality field listed in the certificate.
            valid_from (int): The date when the certificate starts being valid.
            intermediate_certificate (str): The text of the intermediate certificate chains.
            organization (str): The organization field listed in the certificate.
            valid_to (int): The date of when the certificate stops being valid.
            state (str): The state/province field listed in the certificate.
            common_name (str): The common name field listed in the certificate.
            email (str): The email field listed in the certificate.
            organizational_unit (str): The organizational unit field listed in the certificate.
            key_size (int): The size of the private key for the certificate in bits. Default is 2048 bits.
            status (str): The type of certificate. Valid values are `self-signed` and `imported`. 
            days (int): The number of days that the self-signed certificate is valid. If not specified, defaults to 3650. 
            passphrase (str): The passphrase used to encrypt `private_key`.
            key (str): The text of private key.
        """
        if name is not None:
            self.name = name
        if country is not None:
            self.country = country
        if issued_by is not None:
            self.issued_by = issued_by
        if issued_to is not None:
            self.issued_to = issued_to
        if certificate is not None:
            self.certificate = certificate
        if locality is not None:
            self.locality = locality
        if valid_from is not None:
            self.valid_from = valid_from
        if intermediate_certificate is not None:
            self.intermediate_certificate = intermediate_certificate
        if organization is not None:
            self.organization = organization
        if valid_to is not None:
            self.valid_to = valid_to
        if state is not None:
            self.state = state
        if common_name is not None:
            self.common_name = common_name
        if email is not None:
            self.email = email
        if organizational_unit is not None:
            self.organizational_unit = organizational_unit
        if key_size is not None:
            self.key_size = key_size
        if status is not None:
            self.status = status
        if days is not None:
            self.days = days
        if passphrase is not None:
            self.passphrase = passphrase
        if key is not None:
            self.key = key

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `CertificatePost`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `CertificatePost`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `CertificatePost`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `CertificatePost`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(CertificatePost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificatePost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
