# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.39
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_39.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class VirtualMachine(BaseModel):
    """
    VirtualMachine
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The ID of the virtual machine to create or modify, as assigned by the external system. `id` is deprecated. Use `vm_id` instead.")
    vm_id: Optional[StrictStr] = Field(default=None, description="The ID of the virtual machine, as assigned by the external system.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the virtual machine, as assigned by the external system")
    vm_type: Optional[StrictStr] = Field(default=None, description="The type of virtual machine. The only valid value is `vvol`.")
    created: Optional[StrictInt] = Field(default=None, description="The virtual machine creation time, measured in milliseconds since the UNIX epoch.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the virtual machine has been destroyed and is pending eradication.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed volume is permanently eradicated, measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed volume can be recovered by setting `destroyed=false`.")
    recover_context: Optional[FixedReference] = Field(default=None, description="A reference to any additional entities needed to recover this virtual machine.")
    __properties: ClassVar[List[str]] = ["id", "vm_id", "name", "vm_type", "created", "destroyed", "time_remaining", "recover_context"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "vm_id",
            "name",
            "vm_type",
            "created",
            "destroyed",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of recover_context
        if self.recover_context and (include_readonly or "recover_context" not in excluded_fields):
            _dict['recover_context'] = self.recover_context.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VirtualMachine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VirtualMachine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "vm_id": obj.get("vm_id"),
            "name": obj.get("name"),
            "vm_type": obj.get("vm_type"),
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "time_remaining": obj.get("time_remaining"),
            "recover_context": FixedReference.from_dict(obj["recover_context"]) if obj.get("recover_context") is not None else None
        })
        return _obj


