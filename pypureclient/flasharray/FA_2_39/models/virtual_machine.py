# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.39
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flasharray.FA_2_39.models.fixed_reference import FixedReference


class VirtualMachine(BaseModel):
    """
    VirtualMachine
    """
    created: Optional[StrictInt] = Field(default=None, description="The virtual machine creation time, measured in milliseconds since the UNIX epoch.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the virtual machine has been destroyed and is pending eradication.")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the virtual machine to create or modify, as assigned by the external system. `id` is deprecated. Use `vm_id` instead.")
    name: Optional[StrictStr] = Field(default=None, description="The name of the virtual machine, as assigned by the external system")
    recover_context: Optional[FixedReference] = Field(default=None, description="A reference to any additional entities needed to recover this virtual machine.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed volume is permanently eradicated, measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed volume can be recovered by setting `destroyed=false`.")
    vm_id: Optional[StrictStr] = Field(default=None, description="The ID of the virtual machine, as assigned by the external system.")
    vm_type: Optional[StrictStr] = Field(default=None, description="The type of virtual machine. The only valid value is `vvol`.")
    __properties = ["created", "destroyed", "id", "name", "recover_context", "time_remaining", "vm_id", "vm_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "created",
                "destroyed",
                "name",
                "time_remaining",
                "vm_id",
                "vm_type",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of recover_context
        if _include_in_dict('recover_context', include_readonly, excluded_fields, none_fields):
            _dict['recover_context'] = self.recover_context.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> VirtualMachine:
        """Create an instance of VirtualMachine from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> VirtualMachine:
        """Create an instance of VirtualMachine from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VirtualMachine.parse_obj(obj)

        _obj = VirtualMachine.construct(_fields_set=None, **{
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "recover_context": FixedReference.from_dict(obj.get("recover_context")) if obj.get("recover_context") is not None else None,
            "time_remaining": obj.get("time_remaining"),
            "vm_id": obj.get("vm_id"),
            "vm_type": obj.get("vm_type")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

