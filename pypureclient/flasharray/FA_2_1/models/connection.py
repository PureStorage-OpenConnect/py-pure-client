# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from pypureclient.flasharray.FA_2_1.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_1.models.reference import Reference
from pypureclient.flasharray.FA_2_1.models.reference_no_id import ReferenceNoId


class Connection(BaseModel):
    """
    Connection
    """
    host: Optional[ReferenceNoId] = Field(default=None, description="The host computer that sends and receives I/O requests to and from volumes on the FlashArray array.")
    host_group: Optional[ReferenceNoId] = Field(default=None, description="A virtual collection of hosts with common connectivity to volumes.")
    lun: Optional[StrictInt] = Field(default=None, description="The logical unit number (LUN) by which the specified hosts are to address the specified volume. LUN can be in one of two formats: a simple LUN, or a LUN and Sublun with virtual volumes. A LUN and Sublun are integers in the range of 1 to 4095. The first format is simply the LUN number. The second format is a single int64 combining both ((LUN << 32) + Sublun) or (LUN * 4294967296 + Sublun). In the FA UI, a combined LUN and Sublun is represented as \"LUN:Sublun\". Example: LUN = 30, Sublun = 2, LUN:Sublun = 30:2 Combined: (30 * 4294967296 + 2) == 128849018882. In REST it will be returned as 128849018882. To automatically assign a LUN to a private connection, the system starts at LUN '1' and counts up to the maximum LUN '4095', assigning the first available LUN to the connection. For shared connections, the system starts at LUN '254' and counts down to the minimum LUN '1', assigning the first available LUN to the connection. If all LUNs in the '[1...254]' range are taken, the system starts at LUN '255' and counts up to the maximum LUN '4095', assigning the first available LUN to the connection. The maximum int64 LUN:Sublun value is 17587891081215.")
    protocol_endpoint: Optional[Reference] = Field(default=None, description="A protocol endpoint (also known as a conglomerate volume) which acts as a proxy through which virtual volumes are created and then connected to VMware ESXi hosts or host groups. The protocol endpoint itself does not serve I/Os; instead, its job is to form connections between FlashArray volumes and ESXi hosts and host groups.")
    volume: Optional[FixedReference] = Field(default=None, description="A container that manages the storage space on the array.")
    __properties = ["host", "host_group", "lun", "protocol_endpoint", "volume"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of host
        if _include_in_dict('host', include_readonly, excluded_fields, none_fields):
            _dict['host'] = self.host.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of host_group
        if _include_in_dict('host_group', include_readonly, excluded_fields, none_fields):
            _dict['host_group'] = self.host_group.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of protocol_endpoint
        if _include_in_dict('protocol_endpoint', include_readonly, excluded_fields, none_fields):
            _dict['protocol_endpoint'] = self.protocol_endpoint.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of volume
        if _include_in_dict('volume', include_readonly, excluded_fields, none_fields):
            _dict['volume'] = self.volume.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Connection:
        """Create an instance of Connection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Connection:
        """Create an instance of Connection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Connection.parse_obj(obj)

        _obj = Connection.construct(_fields_set=None, **{
            "host": ReferenceNoId.from_dict(obj.get("host")) if obj.get("host") is not None else None,
            "host_group": ReferenceNoId.from_dict(obj.get("host_group")) if obj.get("host_group") is not None else None,
            "lun": obj.get("lun"),
            "protocol_endpoint": Reference.from_dict(obj.get("protocol_endpoint")) if obj.get("protocol_endpoint") is not None else None,
            "volume": FixedReference.from_dict(obj.get("volume")) if obj.get("volume") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

