# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_36.models.fixed_reference_no_id import FixedReferenceNoId
from pypureclient.flasharray.FA_2_36.models.network_interface_neighbor_neighbor_chassis import NetworkInterfaceNeighborNeighborChassis
from pypureclient.flasharray.FA_2_36.models.network_interface_neighbor_neighbor_port import NetworkInterfaceNeighborNeighborPort
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfaceNeighbor(BaseModel):
    """
    NetworkInterfaceNeighbor
    """ # noqa: E501
    local_port: Optional[FixedReferenceNoId] = Field(default=None, description="A reference to the local network interface the neighbor is connected to.")
    neighbor_chassis: Optional[NetworkInterfaceNeighborNeighborChassis] = None
    neighbor_port: Optional[NetworkInterfaceNeighborNeighborPort] = None
    initial_ttl_in_sec: Optional[StrictInt] = Field(default=None, description="The initial time to live in seconds from when the local port received notice that the neighbor information is regarded as valid. The time is not measured from when this endpoint was queried.")
    __properties: ClassVar[List[str]] = ["local_port", "neighbor_chassis", "neighbor_port", "initial_ttl_in_sec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "initial_ttl_in_sec",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_port
        if self.local_port and (include_readonly or "local_port" not in excluded_fields):
            _dict['local_port'] = self.local_port.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neighbor_chassis
        if self.neighbor_chassis and (include_readonly or "neighbor_chassis" not in excluded_fields):
            _dict['neighbor_chassis'] = self.neighbor_chassis.to_dict()
        # override the default output from pydantic by calling `to_dict()` of neighbor_port
        if self.neighbor_port and (include_readonly or "neighbor_port" not in excluded_fields):
            _dict['neighbor_port'] = self.neighbor_port.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfaceNeighbor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfaceNeighbor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "local_port": FixedReferenceNoId.from_dict(obj["local_port"]) if obj.get("local_port") is not None else None,
            "neighbor_chassis": NetworkInterfaceNeighborNeighborChassis.from_dict(obj["neighbor_chassis"]) if obj.get("neighbor_chassis") is not None else None,
            "neighbor_port": NetworkInterfaceNeighborNeighborPort.from_dict(obj["neighbor_port"]) if obj.get("neighbor_port") is not None else None,
            "initial_ttl_in_sec": obj.get("initial_ttl_in_sec")
        })
        return _obj


