# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_36.models.priority_adjustment import PriorityAdjustment
from pypureclient.flasharray.FA_2_36.models.protocol_endpoint import ProtocolEndpoint
from pypureclient.flasharray.FA_2_36.models.qos import Qos
from pypureclient.flasharray.FA_2_36.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class VolumePost(BaseModel):
    """
    VolumePost
    """ # noqa: E501
    destroyed: Optional[StrictBool] = Field(default=None, description="If set to `true`, destroys a resource. Once set to `true`, the `time_remaining` value will display the amount of time left until the destroyed resource is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed resource can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the resource is permanently eradicated and can no longer be recovered.")
    provisioned: Optional[Annotated[int, Field(le=4503599627370496, strict=True)]] = Field(default=None, description="Sets the virtual size of the volume, measured in bytes.")
    qos: Optional[Qos] = Field(default=None, description="Sets QoS limits.")
    priority_adjustment: Optional[PriorityAdjustment] = Field(default=None, description="Adjusts volume priority.")
    source: Optional[Reference] = Field(default=None, description="The source volume of a volume copy.")
    subtype: Optional[StrictStr] = Field(default=None, description="The type of volume. Valid values are `protocol_endpoint` and `regular`.")
    protocol_endpoint: Optional[ProtocolEndpoint] = Field(default=None, description="Sets the properties that are specific to protocol endpoints. This can only be used in conjunction to `subtype=protocol_endpoint`.")
    __properties: ClassVar[List[str]] = ["destroyed", "provisioned", "qos", "priority_adjustment", "source", "subtype", "protocol_endpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of qos
        if self.qos and (include_readonly or "qos" not in excluded_fields):
            _dict['qos'] = self.qos.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority_adjustment
        if self.priority_adjustment and (include_readonly or "priority_adjustment" not in excluded_fields):
            _dict['priority_adjustment'] = self.priority_adjustment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source and (include_readonly or "source" not in excluded_fields):
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of protocol_endpoint
        if self.protocol_endpoint and (include_readonly or "protocol_endpoint" not in excluded_fields):
            _dict['protocol_endpoint'] = self.protocol_endpoint.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VolumePost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VolumePost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "destroyed": obj.get("destroyed"),
            "provisioned": obj.get("provisioned"),
            "qos": Qos.from_dict(obj["qos"]) if obj.get("qos") is not None else None,
            "priority_adjustment": PriorityAdjustment.from_dict(obj["priority_adjustment"]) if obj.get("priority_adjustment") is not None else None,
            "source": Reference.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "subtype": obj.get("subtype"),
            "protocol_endpoint": ProtocolEndpoint.from_dict(obj["protocol_endpoint"]) if obj.get("protocol_endpoint") is not None else None
        })
        return _obj


