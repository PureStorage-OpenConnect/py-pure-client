# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.36
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_36.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class PodReplicaLink(BaseModel):
    """
    PodReplicaLink
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values include `inbound` and `outbound`.")
    lag: Optional[StrictInt] = Field(default=None, description="Duration in milliseconds that represents how far behind the replication target is from the source. This is the time difference between current time and `recovery_point`.")
    local_pod: Optional[FixedReference] = Field(default=None, description="Reference to a local pod.")
    paused: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the replica link is in a `paused` state. Returns a value of `false` if the replica link is not in a `paused` state.")
    recovery_point: Optional[StrictInt] = Field(default=None, description="Time when the last piece of data was replicated, in milliseconds since the UNIX epoch, and the recovery point if the target pod is promoted. If the pod is currently baselining, then the value is `null`.")
    remotes: Optional[List[FixedReference]] = Field(default=None, description="A list of remote arrays that share this pod.")
    remote_pod: Optional[FixedReference] = Field(default=None, description="Reference to a remote pod.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the replica-link. Valid values include `replicating`, `baselining`, `paused`, `quiescing`, `quiesced`, `idle`, and `unhealthy`.")
    __properties: ClassVar[List[str]] = ["id", "direction", "lag", "local_pod", "paused", "recovery_point", "remotes", "remote_pod", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "direction",
            "lag",
            "recovery_point",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_pod
        if self.local_pod and (include_readonly or "local_pod" not in excluded_fields):
            _dict['local_pod'] = self.local_pod.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in remotes (list)
        if self.remotes and (include_readonly or "remotes" not in excluded_fields):
            _items = []
            for _item_remotes in self.remotes:
                if _item_remotes:
                    _items.append(_item_remotes.to_dict())
            _dict['remotes'] = _items
        # override the default output from pydantic by calling `to_dict()` of remote_pod
        if self.remote_pod and (include_readonly or "remote_pod" not in excluded_fields):
            _dict['remote_pod'] = self.remote_pod.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodReplicaLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodReplicaLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "direction": obj.get("direction"),
            "lag": obj.get("lag"),
            "local_pod": FixedReference.from_dict(obj["local_pod"]) if obj.get("local_pod") is not None else None,
            "paused": obj.get("paused"),
            "recovery_point": obj.get("recovery_point"),
            "remotes": [FixedReference.from_dict(_item) for _item in obj["remotes"]] if obj.get("remotes") is not None else None,
            "remote_pod": FixedReference.from_dict(obj["remote_pod"]) if obj.get("remote_pod") is not None else None,
            "status": obj.get("status")
        })
        return _obj


