# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.33
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictStr


class ArrayConnectionPath(BaseModel):
    """
    ArrayConnectionPath
    """
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    encryption: Optional[StrictStr] = Field(default=None, description="If `encrypted`, all traffic over this array connection will be encrypted. If `unencrypted`, all traffic over this array connection will be unencrypted.")
    encryption_mode: Optional[StrictStr] = Field(default=None, description="Cryptographic protocol, trust model, and encryption algorithm information. Will be `null` if `encrypted` is `false`.")
    local_address: Optional[StrictStr] = Field(default=None, description="IP address or WWN of the local port.")
    local_port: Optional[StrictStr] = Field(default=None, description="The local port of the path.")
    remote_address: Optional[StrictStr] = Field(default=None, description="IP address or WWN of the remote port.")
    remote_port: Optional[StrictStr] = Field(default=None, description="The remote port of the path.")
    replication_transport: Optional[StrictStr] = Field(default=None, description="The protocol used to transport data between the local array and the remote array. Valid values are `ip` and `fc`.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the connection. Valid values are `connected`, `connecting`, and `quarantined`. A status of `connected` indicates that the arrays are communicating. A status of `connecting` indicates that the array is trying to establish a connection. A status of `quarantined` indicates that the path is unstable and has been temporarily embargoed for synchronous replication connections.")
    __properties = ["name", "encryption", "encryption_mode", "local_address", "local_port", "remote_address", "remote_port", "replication_transport", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "name",
                "status",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ArrayConnectionPath:
        """Create an instance of ArrayConnectionPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ArrayConnectionPath:
        """Create an instance of ArrayConnectionPath from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArrayConnectionPath.parse_obj(obj)

        _obj = ArrayConnectionPath.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "encryption": obj.get("encryption"),
            "encryption_mode": obj.get("encryption_mode"),
            "local_address": obj.get("local_address"),
            "local_port": obj.get("local_port"),
            "remote_address": obj.get("remote_address"),
            "remote_port": obj.get("remote_port"),
            "replication_transport": obj.get("replication_transport"),
            "status": obj.get("status")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

