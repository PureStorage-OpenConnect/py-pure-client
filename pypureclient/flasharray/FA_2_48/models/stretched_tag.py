# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.48
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional

try:
    from pydantic.v1 import BaseModel, Field, StrictBool, StrictStr, conlist
except ModuleNotFoundError:
    from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from pypureclient.flasharray.FA_2_48.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_48.models.fixed_reference_with_type import FixedReferenceWithType
from pypureclient.flasharray.FA_2_48.models.resource import Resource


class StretchedTag(BaseModel):
    """
    StretchedTag
    """
    context: Optional[FixedReferenceWithType] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    copyable: Optional[StrictBool] = Field(default=None, description="Specifies whether or not to include the tag when copying the parent resource. If set to `true`, the tag is included in resource copying. If set to `false`, the tag is not included. If not specified, defaults to `true`.")
    key: Optional[StrictStr] = Field(default=None, description="Key of the tag. Supports up to 64 Unicode characters.")
    namespace: Optional[StrictStr] = Field(default=None, description="Optional namespace of the tag. Namespace identifies the category of the tag. Omitting the namespace defaults to the namespace `default`. The `pure&#42;` namespaces are reserved for plugins and integration partners. It is recommended that customers avoid using reserved namespaces.")
    resource: Optional[FixedReference] = None
    value: Optional[StrictStr] = Field(default=None, description="Value of the tag. Supports up to 256 Unicode characters.")
    arrays: Optional[conlist(Resource, min_items=1)] = None
    __properties = ["context", "copyable", "key", "namespace", "resource", "value", "arrays"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of resource
        if _include_in_dict('resource', include_readonly, excluded_fields, none_fields):
            _dict['resource'] = self.resource.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in arrays (list)
        if _include_in_dict('arrays', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.arrays:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['arrays'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> StretchedTag:
        """Create an instance of StretchedTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> StretchedTag:
        """Create an instance of StretchedTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StretchedTag.parse_obj(obj)

        _obj = StretchedTag.construct(_fields_set=None, **{
            "context": FixedReferenceWithType.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "copyable": obj.get("copyable"),
            "key": obj.get("key"),
            "namespace": obj.get("namespace"),
            "resource": FixedReference.from_dict(obj.get("resource")) if obj.get("resource") is not None else None,
            "value": obj.get("value"),
            "arrays": [Resource.from_dict(_item) for _item in obj.get("arrays")] if obj.get("arrays") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

