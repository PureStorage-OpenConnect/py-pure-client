# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.24
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from pypureclient.flasharray.FA_2_24.models.fixed_reference import FixedReference


class AlertEvent(BaseModel):
    """
    AlertEvent
    """
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    actual: Optional[StrictStr] = Field(default=None, description="Actual condition at the time the alert is created.")
    alert: Optional[FixedReference] = None
    code: Optional[StrictInt] = Field(default=None, description="The parent alert number.")
    component_name: Optional[StrictStr] = Field(default=None, description="The component type of the alert.")
    component_type: Optional[StrictStr] = Field(default=None, description="The component name of the alert.")
    created: Optional[StrictInt] = Field(default=None, description="The time the parent alert was created.")
    expected: Optional[StrictStr] = Field(default=None, description="Expected state and threshold under normal conditions.")
    issue: Optional[StrictStr] = Field(default=None, description="Information about the alert cause.")
    knowledge_base_url: Optional[StrictStr] = Field(default=None, description="The knowledge base URL of the alert.")
    severity: Optional[StrictStr] = Field(default=None, description="The severity level of the alert. Valid values include `info`, `warning`, `critical`, and `hidden`.")
    state: Optional[StrictStr] = Field(default=None, description="The state of the alert. Valid values include `open`, `closing`, and `closed`.")
    summary: Optional[StrictStr] = Field(default=None, description="A summary of the alert.")
    time: Optional[StrictInt] = Field(default=None, description="The time the event occurred.")
    __properties = ["name", "actual", "alert", "code", "component_name", "component_type", "created", "expected", "issue", "knowledge_base_url", "severity", "state", "summary", "time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "name",
                "actual",
                "code",
                "component_name",
                "component_type",
                "expected",
                "issue",
                "knowledge_base_url",
                "severity",
                "state",
                "summary",
                "time",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of alert
        if _include_in_dict('alert', include_readonly, excluded_fields, none_fields):
            _dict['alert'] = self.alert.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> AlertEvent:
        """Create an instance of AlertEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> AlertEvent:
        """Create an instance of AlertEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AlertEvent.parse_obj(obj)

        _obj = AlertEvent.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "actual": obj.get("actual"),
            "alert": FixedReference.from_dict(obj.get("alert")) if obj.get("alert") is not None else None,
            "code": obj.get("code"),
            "component_name": obj.get("component_name"),
            "component_type": obj.get("component_type"),
            "created": obj.get("created"),
            "expected": obj.get("expected"),
            "issue": obj.get("issue"),
            "knowledge_base_url": obj.get("knowledge_base_url"),
            "severity": obj.get("severity"),
            "state": obj.get("state"),
            "summary": obj.get("summary"),
            "time": obj.get("time")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

