# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.24
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_24.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_24.models.replica_link_lag import ReplicaLinkLag


class PodReplicaLinkLag(BaseModel):
    """
    PodReplicaLinkLag
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values include `inbound` and `outbound`.")
    lag: Optional[ReplicaLinkLag] = Field(default=None, description="Duration in milliseconds that indicates how far behind the replication target is from the source.")
    local_pod: Optional[FixedReference] = Field(default=None, description="Reference to a local pod.")
    recovery_point: Optional[StrictInt] = Field(default=None, description="Time when the last piece of data was replicated, in milliseconds since the UNIX epoch, and the recovery point if the pod is promoted. If the pod is baselining then the value is `null`.")
    remote_pod: Optional[FixedReference] = Field(default=None, description="Reference to a remote pod.")
    remotes: Optional[conlist(FixedReference)] = Field(default=None, description="Reference to a remote array.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the replica-link. Valid values include `replicating`, `baselining`, `paused`, `quiescing`, `quiesced`, `idle`, and `unhealthy`.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since the UNIX epoch.")
    __properties = ["id", "direction", "lag", "local_pod", "recovery_point", "remote_pod", "remotes", "status", "time"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "direction",
                "recovery_point",
                "status",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of lag
        if _include_in_dict('lag', include_readonly, excluded_fields, none_fields):
            _dict['lag'] = self.lag.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of local_pod
        if _include_in_dict('local_pod', include_readonly, excluded_fields, none_fields):
            _dict['local_pod'] = self.local_pod.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote_pod
        if _include_in_dict('remote_pod', include_readonly, excluded_fields, none_fields):
            _dict['remote_pod'] = self.remote_pod.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in remotes (list)
        if _include_in_dict('remotes', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.remotes:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['remotes'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PodReplicaLinkLag:
        """Create an instance of PodReplicaLinkLag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PodReplicaLinkLag:
        """Create an instance of PodReplicaLinkLag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PodReplicaLinkLag.parse_obj(obj)

        _obj = PodReplicaLinkLag.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "direction": obj.get("direction"),
            "lag": ReplicaLinkLag.from_dict(obj.get("lag")) if obj.get("lag") is not None else None,
            "local_pod": FixedReference.from_dict(obj.get("local_pod")) if obj.get("local_pod") is not None else None,
            "recovery_point": obj.get("recovery_point"),
            "remote_pod": FixedReference.from_dict(obj.get("remote_pod")) if obj.get("remote_pod") is not None else None,
            "remotes": [FixedReference.from_dict(_item) for _item in obj.get("remotes")] if obj.get("remotes") is not None else None,
            "status": obj.get("status"),
            "time": obj.get("time")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

