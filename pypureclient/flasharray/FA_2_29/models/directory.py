# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_29.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_29.models.limited_by import LimitedBy
from pypureclient.flasharray.FA_2_29.models.space import Space
from typing import Optional, Set
from typing_extensions import Self

class Directory(BaseModel):
    """
    Directory
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    created: Optional[StrictInt] = Field(default=None, description="The managed directory creation time, measured in milliseconds since the UNIX epoch.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the managed directory has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed managed directory is permanently eradicated. Once the `time_remaining` period has elapsed, the managed directory is permanently eradicated and can no longer be recovered.")
    directory_name: Optional[StrictStr] = Field(default=None, description="The managed directory name without the file system name prefix. A full managed directory name is constructed in the form of `FILE_SYSTEM:DIR` where `FILE_SYSTEM` is the file system name and `DIR` is the value of this field.")
    file_system: Optional[FixedReference] = Field(default=None, description="The file system that this managed directory is in.")
    path: Optional[StrictStr] = Field(default=None, description="Absolute path of the managed directory in the file system.")
    space: Optional[Space] = Field(default=None, description="Displays size and space consumption information.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left, measured in milliseconds until the destroyed managed directory is permanently eradicated.")
    limited_by: Optional[LimitedBy] = Field(default=None, description="The quota policy that is limiting usage on this managed directory. This policy defines the total amount of space provisioned to this managed directory and its descendants. The returned value contains two parts&#58; the name of the policy and the managed directory to which the policy is attached.")
    __properties: ClassVar[List[str]] = ["id", "name", "created", "destroyed", "directory_name", "file_system", "path", "space", "time_remaining", "limited_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created",
            "directory_name",
            "path",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_system
        if self.file_system and (include_readonly or "file_system" not in excluded_fields):
            _dict['file_system'] = self.file_system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space and (include_readonly or "space" not in excluded_fields):
            _dict['space'] = self.space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of limited_by
        if self.limited_by and (include_readonly or "limited_by" not in excluded_fields):
            _dict['limited_by'] = self.limited_by.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Directory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Directory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "directory_name": obj.get("directory_name"),
            "file_system": FixedReference.from_dict(obj["file_system"]) if obj.get("file_system") is not None else None,
            "path": obj.get("path"),
            "space": Space.from_dict(obj["space"]) if obj.get("space") is not None else None,
            "time_remaining": obj.get("time_remaining"),
            "limited_by": LimitedBy.from_dict(obj["limited_by"]) if obj.get("limited_by") is not None else None
        })
        return _obj


