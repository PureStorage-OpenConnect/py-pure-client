# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pypureclient.flasharray.FA_2_29.models.array_encryption import ArrayEncryption
from pypureclient.flasharray.FA_2_29.models.eradication_config import EradicationConfig
from pypureclient.flasharray.FA_2_29.models.space import Space
from typing import Optional, Set
from typing_extensions import Self

class Arrays(BaseModel):
    """
    Arrays
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    as_of: Optional[StrictInt] = Field(default=None, description="The time in milliseconds since UNIX epoch.", alias="_as_of")
    banner: Optional[StrictStr] = None
    capacity: Optional[StrictInt] = Field(default=None, description="The usable capacity in bytes. If the user does not have sufficient access, this field will return `null`.")
    console_lock_enabled: Optional[StrictBool] = Field(default=None, description="If `true`, console lock is enabled for the array. If the user does not have sufficient access, this field will return `null`.")
    encryption: Optional[ArrayEncryption] = None
    eradication_config: Optional[EradicationConfig] = None
    idle_timeout: Optional[StrictInt] = Field(default=None, description="The idle timeout in milliseconds. Valid values include `0` and any multiple of `60000` in the range of `300000` and `10800000`. Any other values are rounded down to the nearest multiple of `60000`.")
    ntp_servers: Optional[List[StrictStr]] = Field(default=None, description="NTP Servers. If the user does not have sufficient access, this field will return `null`.")
    ntp_symmetric_key: Optional[StrictStr] = Field(default=None, description="The text of ntp symmetric authentication key. Supported formats include a hex-encoded string no longer than 64 characters, or an ASCII string no longer than 20 characters, excluding \"#\". Any configured key will be masked as \"****\" on return. If the user does not have sufficient access, this field will return `null`.")
    os: Optional[StrictStr] = Field(default=None, description="Specifies the operating system. Valid values are `Purity`, `Purity//FA`, and `Purity//FB`.")
    parity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A representation of data redundancy on the array. Data redundancy is rebuilt automatically by the system whenever parity is less than `1.0`. If the user does not have sufficient access, this field will return `null`.")
    scsi_timeout: Optional[StrictInt] = Field(default=None, description="The SCSI timeout. If not specified, defaults to `60s`. If the user does not have sufficient access, this field will return `null`.")
    space: Optional[Space] = None
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone of the array.")
    version: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["id", "name", "_as_of", "banner", "capacity", "console_lock_enabled", "encryption", "eradication_config", "idle_timeout", "ntp_servers", "ntp_symmetric_key", "os", "parity", "scsi_timeout", "space", "time_zone", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "as_of",
            "capacity",
            "os",
            "parity",
            "time_zone",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption and (include_readonly or "encryption" not in excluded_fields):
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eradication_config
        if self.eradication_config and (include_readonly or "eradication_config" not in excluded_fields):
            _dict['eradication_config'] = self.eradication_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space and (include_readonly or "space" not in excluded_fields):
            _dict['space'] = self.space.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Arrays from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Arrays from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "as_of": obj.get("_as_of"),
            "banner": obj.get("banner"),
            "capacity": obj.get("capacity"),
            "console_lock_enabled": obj.get("console_lock_enabled"),
            "encryption": ArrayEncryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "eradication_config": EradicationConfig.from_dict(obj["eradication_config"]) if obj.get("eradication_config") is not None else None,
            "idle_timeout": obj.get("idle_timeout"),
            "ntp_servers": obj.get("ntp_servers"),
            "ntp_symmetric_key": obj.get("ntp_symmetric_key"),
            "os": obj.get("os"),
            "parity": obj.get("parity"),
            "scsi_timeout": obj.get("scsi_timeout"),
            "space": Space.from_dict(obj["space"]) if obj.get("space") is not None else None,
            "time_zone": obj.get("time_zone"),
            "version": obj.get("version")
        })
        return _obj


