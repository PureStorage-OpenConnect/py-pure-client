# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flasharray.FA_2_29.models.fixed_reference_with_type import FixedReferenceWithType


class PolicyRuleQuota(BaseModel):
    """
    PolicyRuleQuota
    """
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the pod containing the quota policy rule has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed policy is permanently eradicated. Once the `time_remaining` period has elapsed, the quota policy rule is permanently eradicated and can no longer be recovered.")
    enforced: Optional[StrictBool] = Field(default=None, description="Defines whether the quota rule is enforced or unenforced. If the quota rule is enforced and logical space usage exceeds the quota limit, any modification operations that result in a need for more space are blocked. If the quota rule is unenforced and logical space usage exceeds the quota limit, notification emails are sent to targets that are specified using the `notification` parameter. No client operations are blocked when an unenforced limit is exceeded. If set to `true`, the limit is enforced. If set to `false`, notification targets are informed when the usage exceeds 80 percent of the limit.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this rule. The name is automatically generated by the system.")
    notifications: Optional[StrictStr] = Field(default=None, description="Targets to notify when usage approaches the quota limit. The list of notification targets is a comma-separated string. Valid values are `user`, and `group`. If not specified, notification targets are not assigned for the rule.")
    policy: Optional[FixedReferenceWithType] = Field(default=None, description="The policy to which this rule belongs.")
    quota_limit: Optional[StrictInt] = Field(default=None, description="Logical space limit of the quota assigned by the rule, measured in bytes. This value cannot be set to 0.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left, in milliseconds, until the destroyed quota policy rule is permanently eradicated.")
    __properties = ["destroyed", "enforced", "name", "notifications", "policy", "quota_limit", "time_remaining"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "enforced",
                "name",
                "notifications",
                "quota_limit",
                "time_remaining",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of policy
        if _include_in_dict('policy', include_readonly, excluded_fields, none_fields):
            _dict['policy'] = self.policy.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PolicyRuleQuota:
        """Create an instance of PolicyRuleQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyRuleQuota:
        """Create an instance of PolicyRuleQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyRuleQuota.parse_obj(obj)

        _obj = PolicyRuleQuota.construct(_fields_set=None, **{
            "destroyed": obj.get("destroyed"),
            "enforced": obj.get("enforced"),
            "name": obj.get("name"),
            "notifications": obj.get("notifications"),
            "policy": FixedReferenceWithType.from_dict(obj.get("policy")) if obj.get("policy") is not None else None,
            "quota_limit": obj.get("quota_limit"),
            "time_remaining": obj.get("time_remaining")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

