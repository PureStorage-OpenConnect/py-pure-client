# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.29
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_29.models.fixed_reference_with_type import FixedReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class PolicyRuleQuota(BaseModel):
    """
    PolicyRuleQuota
    """ # noqa: E501
    enforced: Optional[StrictBool] = Field(default=None, description="Defines whether the quota rule is enforced or unenforced. If the quota rule is enforced and logical space usage exceeds the quota limit, any modification operations that result in a need for more space are blocked. If the quota rule is unenforced and logical space usage exceeds the quota limit, notification emails are sent to targets that are specified using the `notification` parameter. No client operations are blocked when an unenforced limit is exceeded. If set to `true`, the limit is enforced. If set to `false`, notification targets are informed when the usage exceeds 80 percent of the limit.")
    quota_limit: Optional[StrictInt] = Field(default=None, description="Logical space limit of the quota assigned by the rule, measured in bytes. This value cannot be set to 0.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this rule. The name is automatically generated by the system.")
    notifications: Optional[StrictStr] = Field(default=None, description="Targets to notify when usage approaches the quota limit. The list of notification targets is a comma-separated string. Valid values are `user`, and `group`. If not specified, notification targets are not assigned for the rule.")
    policy: Optional[FixedReferenceWithType] = Field(default=None, description="The policy to which this rule belongs.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the pod containing the quota policy rule has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed policy is permanently eradicated. Once the `time_remaining` period has elapsed, the quota policy rule is permanently eradicated and can no longer be recovered.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left, in milliseconds, until the destroyed quota policy rule is permanently eradicated.")
    __properties: ClassVar[List[str]] = ["enforced", "quota_limit", "name", "notifications", "policy", "destroyed", "time_remaining"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "enforced",
            "quota_limit",
            "name",
            "notifications",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy and (include_readonly or "policy" not in excluded_fields):
            _dict['policy'] = self.policy.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyRuleQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyRuleQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "enforced": obj.get("enforced"),
            "quota_limit": obj.get("quota_limit"),
            "name": obj.get("name"),
            "notifications": obj.get("notifications"),
            "policy": FixedReferenceWithType.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "destroyed": obj.get("destroyed"),
            "time_remaining": obj.get("time_remaining")
        })
        return _obj


