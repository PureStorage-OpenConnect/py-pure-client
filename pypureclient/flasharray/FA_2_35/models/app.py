# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.35
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class App(BaseModel):
    """
    App
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    description: Optional[StrictStr] = Field(default=None, description="A description of the app.")
    enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, the app is enabled. By default, apps are disabled.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the app. Values include `healthy` and `unhealthy`. For cluster apps, this represents the aggregate status of the app. The aggregate status is only `healthy` if all nodes are `healthy`&#59; otherwise, it is `unhealthy`.")
    version: Optional[StrictStr] = Field(default=None, description="The app version. For cluster apps, this represents the node version if all nodes are of the same version. If the node versions differ, a value of `null` is returned.")
    details: Optional[StrictStr] = Field(default=None, description="Details of the status of the app.")
    vnc_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, VNC access is enabled. By default, VNC access is disabled.")
    __properties: ClassVar[List[str]] = ["name", "description", "enabled", "status", "version", "details", "vnc_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "description",
            "status",
            "version",
            "details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of App from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of App from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "description": obj.get("description"),
            "enabled": obj.get("enabled"),
            "status": obj.get("status"),
            "version": obj.get("version"),
            "details": obj.get("details"),
            "vnc_enabled": obj.get("vnc_enabled")
        })
        return _obj


