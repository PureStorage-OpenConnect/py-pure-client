# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class SoftwarePatch(BaseModel):
    """
    SoftwarePatch
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource. The name cannot be modified.")
    details: Optional[StrictStr] = Field(default=None, description="The detailed reason for the `status`.")
    description: Optional[StrictStr] = Field(default=None, description="The detailed description of the patch.")
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress of the software patch installation, displayed in decimal format.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the software patch installation. Valid values are `available`, `downloaded`, `downloading`, `download_failed`, `installing`, `installed`, `failed`, and `not_applicable`. A status of `available` indicates that the patch is available for download. A status of `downloaded` indicates that the patch has been downloaded and will be installed. A status of `downloading` indicates that the patch is currently downloading. A status of `download_failed` indicates that the download of the patch failed. A status of `installing` indicates that the patch is currently being installed. A status of `installed` indicates that the patch has been installed. A status of `failed` indicates that the patch failed to be installed. A status of `not_applicable` indicates the patch does not need to be installed on the array.")
    __properties: ClassVar[List[str]] = ["id", "name", "details", "description", "progress", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwarePatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwarePatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "details": obj.get("details"),
            "description": obj.get("description"),
            "progress": obj.get("progress"),
            "status": obj.get("status")
        })
        return _obj


