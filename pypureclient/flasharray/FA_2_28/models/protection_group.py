# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_28.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_28.models.protection_group_eradication_config import ProtectionGroupEradicationConfig
from pypureclient.flasharray.FA_2_28.models.replication_schedule import ReplicationSchedule
from pypureclient.flasharray.FA_2_28.models.retention_policy import RetentionPolicy
from pypureclient.flasharray.FA_2_28.models.snapshot_schedule import SnapshotSchedule
from pypureclient.flasharray.FA_2_28.models.space import Space
from typing import Optional, Set
from typing_extensions import Self

class ProtectionGroup(BaseModel):
    """
    ProtectionGroup
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Has this protection group been destroyed? To destroy a protection group, patch to `true`. To recover a destroyed protection group, patch to `false`. If not specified, defaults to `false`.")
    host_count: Optional[StrictInt] = Field(default=None, description="Number of hosts in this protection group.")
    host_group_count: Optional[StrictInt] = Field(default=None, description="Number of host groups in this protection group.")
    is_local: Optional[StrictBool] = Field(default=None, description="If set to `true`, the protection group belongs to the local array. If set to `false`, the protection group belongs to the remote array.")
    pod: Optional[FixedReference] = Field(default=None, description="The pod in which the protection group resides.")
    replication_schedule: Optional[ReplicationSchedule] = Field(default=None, description="The schedule settings for asynchronous replication.")
    snapshot_schedule: Optional[SnapshotSchedule] = Field(default=None, description="The schedule settings for protection group snapshots.")
    source: Optional[FixedReference] = Field(default=None, description="The array or pod on which the protection group was created.")
    source_retention: Optional[RetentionPolicy] = Field(default=None, description="The retention policy for the source array of the protection group.")
    space: Optional[Space] = Field(default=None, description="Displays provisioned size and physical storage consumption data for each protection group.")
    target_retention: Optional[RetentionPolicy] = Field(default=None, description="The retention policy for the target(s) of the protection group.")
    target_count: Optional[StrictInt] = Field(default=None, description="The number of targets to where this protection group replicates.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed protection group is permanently eradicated. Measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed protection group can be recovered by setting `destroyed=false`.")
    volume_count: Optional[StrictInt] = Field(default=None, description="The number of volumes in the protection group.")
    eradication_config: Optional[ProtectionGroupEradicationConfig] = None
    retention_lock: Optional[StrictStr] = Field(default=None, description="The valid values are `ratcheted` and `unlocked`. The default value for a newly created protection group is `unlocked`. Set `retention_lock` to `ratcheted` to enable SafeMode restrictions on the protection group. Contact Pure Technical Services to change `retention_lock` to `unlocked`.")
    __properties: ClassVar[List[str]] = ["name", "id", "destroyed", "host_count", "host_group_count", "is_local", "pod", "replication_schedule", "snapshot_schedule", "source", "source_retention", "space", "target_retention", "target_count", "time_remaining", "volume_count", "eradication_config", "retention_lock"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "host_count",
            "host_group_count",
            "is_local",
            "target_count",
            "time_remaining",
            "volume_count",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of pod
        if self.pod and (include_readonly or "pod" not in excluded_fields):
            _dict['pod'] = self.pod.to_dict()
        # override the default output from pydantic by calling `to_dict()` of replication_schedule
        if self.replication_schedule and (include_readonly or "replication_schedule" not in excluded_fields):
            _dict['replication_schedule'] = self.replication_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of snapshot_schedule
        if self.snapshot_schedule and (include_readonly or "snapshot_schedule" not in excluded_fields):
            _dict['snapshot_schedule'] = self.snapshot_schedule.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source and (include_readonly or "source" not in excluded_fields):
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_retention
        if self.source_retention and (include_readonly or "source_retention" not in excluded_fields):
            _dict['source_retention'] = self.source_retention.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space and (include_readonly or "space" not in excluded_fields):
            _dict['space'] = self.space.to_dict()
        # override the default output from pydantic by calling `to_dict()` of target_retention
        if self.target_retention and (include_readonly or "target_retention" not in excluded_fields):
            _dict['target_retention'] = self.target_retention.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eradication_config
        if self.eradication_config and (include_readonly or "eradication_config" not in excluded_fields):
            _dict['eradication_config'] = self.eradication_config.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProtectionGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProtectionGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "destroyed": obj.get("destroyed"),
            "host_count": obj.get("host_count"),
            "host_group_count": obj.get("host_group_count"),
            "is_local": obj.get("is_local"),
            "pod": FixedReference.from_dict(obj["pod"]) if obj.get("pod") is not None else None,
            "replication_schedule": ReplicationSchedule.from_dict(obj["replication_schedule"]) if obj.get("replication_schedule") is not None else None,
            "snapshot_schedule": SnapshotSchedule.from_dict(obj["snapshot_schedule"]) if obj.get("snapshot_schedule") is not None else None,
            "source": FixedReference.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "source_retention": RetentionPolicy.from_dict(obj["source_retention"]) if obj.get("source_retention") is not None else None,
            "space": Space.from_dict(obj["space"]) if obj.get("space") is not None else None,
            "target_retention": RetentionPolicy.from_dict(obj["target_retention"]) if obj.get("target_retention") is not None else None,
            "target_count": obj.get("target_count"),
            "time_remaining": obj.get("time_remaining"),
            "volume_count": obj.get("volume_count"),
            "eradication_config": ProtectionGroupEradicationConfig.from_dict(obj["eradication_config"]) if obj.get("eradication_config") is not None else None,
            "retention_lock": obj.get("retention_lock")
        })
        return _obj


