# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.28
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_28.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_28.models.pod_array_status import PodArrayStatus
from pypureclient.flasharray.FA_2_28.models.pod_eradication_config import PodEradicationConfig
from pypureclient.flasharray.FA_2_28.models.pod_space import PodSpace
from pypureclient.flasharray.FA_2_28.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class Pod(BaseModel):
    """
    Pod
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    arrays: Optional[Annotated[List[PodArrayStatus], Field(min_length=1)]] = Field(default=None, description="A list of arrays over which the pod is stretched. If there are two or more arrays in the stretched pod, all data in the pod is synchronously replicated between all of the arrays within the pod.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the pod has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed pod is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed pod can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the pod is permanently eradicated and can no longer be recovered.")
    failover_preferences: Optional[List[Reference]] = Field(default=None, description="Determines which array within a stretched pod should be given priority to stay online should the arrays ever lose contact with each other. The current array and any peer arrays that are connected to the current array for synchronous replication can be added to a pod for failover preference. By default, `failover_preferences=null`, meaning no arrays have been configured for failover preference.")
    footprint: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The maximum amount of physical space the pod would take up on any array, ignoring any data shared outside the pod. Measured in bytes. The footprint metric is mostly used for capacity planning.")
    mediator: Optional[StrictStr] = Field(default=None, description="The URL of the mediator for the pod. By default, the Pure1 Cloud Mediator (`purestorage`) serves as the mediator.")
    mediator_version: Optional[StrictStr] = Field(default=None, description="The mediator version.")
    source: Optional[FixedReference] = Field(default=None, description="The source pod from where data is cloned to create the new pod.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed pod is permanently eradicated, measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed pod can be recovered by setting `destroyed=false`.")
    requested_promotion_state: Optional[StrictStr] = Field(default=None, description="Values include `promoted` and `demoted`. Patch `requested_promotion_state` to `demoted` to demote the pod so that it can be used as a link target for continuous replication between pods. Demoted pods do not accept write requests, and a destroyed version of the pod with `undo-demote` appended to the pod name is created on the array with the state of the pod when it was in the promoted state. Patch `requested_promotion_state` to `promoted` to start the process of promoting the pod. The `promotion_status` indicates when the pod has been successfully promoted. Promoted pods stop incorporating replicated data from the source pod and start accepting write requests. The replication process does not stop as the source pod continues replicating data to the pod. The space consumed by the unique replicated data is tracked by the `space.journal` field of the pod.")
    promotion_status: Optional[StrictStr] = Field(default=None, description="Current promotion status of a pod. Values include `promoted`, `demoted`, and `promoting`. The `promoted` status indicates that the pod has been promoted. The pod takes writes from hosts instead of incorporating replicated data. This is the default mode for a pod when it is created. The `demoted` status indicates that the pod has been demoted. The pod does not accept write requests and is ready to be used as a link target. The `promoting` status indicates that the pod is in an intermediate status between `demoted` and `promoted` while the promotion process is taking place.")
    link_source_count: Optional[StrictInt] = Field(default=None, description="The number of source pods that link to the pod.")
    link_target_count: Optional[StrictInt] = Field(default=None, description="The number of target pods that link to the pod.")
    array_count: Optional[StrictInt] = Field(default=None, description="The number of arrays a pod connects to.")
    eradication_config: Optional[PodEradicationConfig] = None
    quota_limit: Optional[Annotated[int, Field(le=4503599627370496, strict=True)]] = Field(default=None, description="The logical quota limit of the pod, measured in bytes.")
    space: Optional[PodSpace] = Field(default=None, description="Displays provisioned size and physical storage consumption information for the sum of all volumes connected to the specified host.")
    __properties: ClassVar[List[str]] = ["id", "name", "arrays", "destroyed", "failover_preferences", "footprint", "mediator", "mediator_version", "source", "time_remaining", "requested_promotion_state", "promotion_status", "link_source_count", "link_target_count", "array_count", "eradication_config", "quota_limit", "space"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "time_remaining",
            "quota_limit",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in arrays (list)
        if self.arrays and (include_readonly or "arrays" not in excluded_fields):
            _items = []
            for _item_arrays in self.arrays:
                if _item_arrays:
                    _items.append(_item_arrays.to_dict())
            _dict['arrays'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in failover_preferences (list)
        if self.failover_preferences and (include_readonly or "failover_preferences" not in excluded_fields):
            _items = []
            for _item_failover_preferences in self.failover_preferences:
                if _item_failover_preferences:
                    _items.append(_item_failover_preferences.to_dict())
            _dict['failover_preferences'] = _items
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source and (include_readonly or "source" not in excluded_fields):
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eradication_config
        if self.eradication_config and (include_readonly or "eradication_config" not in excluded_fields):
            _dict['eradication_config'] = self.eradication_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of space
        if self.space and (include_readonly or "space" not in excluded_fields):
            _dict['space'] = self.space.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Pod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Pod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "arrays": [PodArrayStatus.from_dict(_item) for _item in obj["arrays"]] if obj.get("arrays") is not None else None,
            "destroyed": obj.get("destroyed"),
            "failover_preferences": [Reference.from_dict(_item) for _item in obj["failover_preferences"]] if obj.get("failover_preferences") is not None else None,
            "footprint": obj.get("footprint"),
            "mediator": obj.get("mediator"),
            "mediator_version": obj.get("mediator_version"),
            "source": FixedReference.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "time_remaining": obj.get("time_remaining"),
            "requested_promotion_state": obj.get("requested_promotion_state"),
            "promotion_status": obj.get("promotion_status"),
            "link_source_count": obj.get("link_source_count"),
            "link_target_count": obj.get("link_target_count"),
            "array_count": obj.get("array_count"),
            "eradication_config": PodEradicationConfig.from_dict(obj["eradication_config"]) if obj.get("eradication_config") is not None else None,
            "quota_limit": obj.get("quota_limit"),
            "space": PodSpace.from_dict(obj["space"]) if obj.get("space") is not None else None
        })
        return _obj


