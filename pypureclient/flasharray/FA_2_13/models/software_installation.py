# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_13.models.override_check import OverrideCheck
from pypureclient.flasharray.FA_2_13.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class SoftwareInstallation(BaseModel):
    """
    SoftwareInstallation
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource. The name cannot be modified.")
    start_time: Optional[StrictInt] = Field(default=None, description="Start time in milliseconds since the UNIX epoch.")
    end_time: Optional[StrictInt] = Field(default=None, description="End time in milliseconds since the UNIX epoch.")
    current_step_id: Optional[StrictStr] = Field(default=None, description="The `id` of the current step or `null` if the upgrade is not active.")
    details: Optional[StrictStr] = Field(default=None, description="The detailed reason for the `status`.")
    mode: Optional[StrictStr] = Field(default=None, description="Mode that the upgrade is in. Valid values are `check-only`, `interactive`, `semi-interactive`, and `one-click`. The `check_only` mode is deprecated. Use `/software-checks`. In this mode, the upgrade only runs pre-upgrade checks and returns. In `interactive` mode, the upgrade pauses at several points, at which users must enter certain commands to proceed. In `semi-interactive` mode, the upgrade pauses if there are any upgrade check failures, and functions like `one-click` mode otherwise. In `one-click` mode, the upgrade proceeds automatically without pausing.")
    override_checks: Optional[List[OverrideCheck]] = Field(default=None, description="A list of upgrade checks whose failure is overridden during the upgrade. If any optional `args` are provided, they are validated later when the corresponding check script runs.")
    software: Optional[Reference] = Field(default=None, description="Referenced `software` to which the upgrade belongs.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the upgrade. Valid values are `installing`, `paused`, `aborting`, `aborted`, and `finished`. A status of `installing` indicates that the upgrade is running. A status of `paused` indicates that the upgrade is paused and waiting for user input. A status of `aborting` indicates that the upgrade is being aborted. A status of `aborted` indicates that the upgrade has stopped due to an abort. A status of `finished` indicates that the upgrade has finished successfully.")
    __properties: ClassVar[List[str]] = ["id", "name", "start_time", "end_time", "current_step_id", "details", "mode", "override_checks", "software", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in override_checks (list)
        if self.override_checks and (include_readonly or "override_checks" not in excluded_fields):
            _items = []
            for _item_override_checks in self.override_checks:
                if _item_override_checks:
                    _items.append(_item_override_checks.to_dict())
            _dict['override_checks'] = _items
        # override the default output from pydantic by calling `to_dict()` of software
        if self.software and (include_readonly or "software" not in excluded_fields):
            _dict['software'] = self.software.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareInstallation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareInstallation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "current_step_id": obj.get("current_step_id"),
            "details": obj.get("details"),
            "mode": obj.get("mode"),
            "override_checks": [OverrideCheck.from_dict(_item) for _item in obj["override_checks"]] if obj.get("override_checks") is not None else None,
            "software": Reference.from_dict(obj["software"]) if obj.get("software") is not None else None,
            "status": obj.get("status")
        })
        return _obj


