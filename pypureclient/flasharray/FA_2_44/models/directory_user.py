# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.44
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional

try:
    from pydantic.v1 import BaseModel, Field, StrictStr
except ModuleNotFoundError:
    from pydantic import BaseModel, Field, StrictStr
from pypureclient.flasharray.FA_2_44.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_44.models.user_group import UserGroup
from pypureclient.flasharray.FA_2_44.models.user_group_quota_limited_by import UserGroupQuotaLimitedBy
from pypureclient.flasharray.FA_2_44.models.user_group_space import UserGroupSpace


class DirectoryUser(BaseModel):
    """
    DirectoryUser
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    directory_name: Optional[StrictStr] = Field(default=None, description="The managed directory name without the file system name prefix. A full managed directory name is constructed in the form of `FILE_SYSTEM:DIR` where `FILE_SYSTEM` is the file system name and `DIR` is the value of this field.")
    file_system: Optional[FixedReference] = Field(default=None, description="The file system that the managed directory is in.")
    limited_by: Optional[UserGroupQuotaLimitedBy] = Field(default=None, description="The user-group-quota or quota policy that is limiting usage for this user in this managed directory. This policy defines the total amount of space allowed for this user or this managed directory. The returned value contains two parts&#58; the name of the policy and the managed directory to which the policy is attached.")
    path: Optional[StrictStr] = Field(default=None, description="Absolute path of the managed directory in the file system.")
    space: Optional[UserGroupSpace] = Field(default=None, description="The logical space owned by the user.")
    user: Optional[UserGroup] = Field(default=None, description="A user which has content in the managed directory.")
    __properties = ["id", "name", "context", "directory_name", "file_system", "limited_by", "path", "space", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "directory_name",
                "path",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of file_system
        if _include_in_dict('file_system', include_readonly, excluded_fields, none_fields):
            _dict['file_system'] = self.file_system.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of limited_by
        if _include_in_dict('limited_by', include_readonly, excluded_fields, none_fields):
            _dict['limited_by'] = self.limited_by.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of space
        if _include_in_dict('space', include_readonly, excluded_fields, none_fields):
            _dict['space'] = self.space.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of user
        if _include_in_dict('user', include_readonly, excluded_fields, none_fields):
            _dict['user'] = self.user.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> DirectoryUser:
        """Create an instance of DirectoryUser from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> DirectoryUser:
        """Create an instance of DirectoryUser from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DirectoryUser.parse_obj(obj)

        _obj = DirectoryUser.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "directory_name": obj.get("directory_name"),
            "file_system": FixedReference.from_dict(obj.get("file_system")) if obj.get("file_system") is not None else None,
            "limited_by": UserGroupQuotaLimitedBy.from_dict(obj.get("limited_by")) if obj.get("limited_by") is not None else None,
            "path": obj.get("path"),
            "space": UserGroupSpace.from_dict(obj.get("space")) if obj.get("space") is not None else None,
            "user": UserGroup.from_dict(obj.get("user")) if obj.get("user") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

