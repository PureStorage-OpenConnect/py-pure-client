# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.44
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional

try:
    from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
except ModuleNotFoundError:
    from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_44.models.policyruleusergroupquota_subject import PolicyruleusergroupquotaSubject


class PolicyruleusergroupquotapostRules(BaseModel):
    """
    PolicyruleusergroupquotapostRules
    """
    enforced: Optional[StrictBool] = Field(default=None, description="If set to `true`, the quota is enforced and an out-of-space warning is issued if logical space usage exceeds the specified limit. If set to `false`, the quota is not enforced and alerts and/or notifications are issued when logical space usage exceeds the limit value. If not specified, defaults to `false`.")
    notifications: Optional[conlist(StrictStr)] = Field(default=None, description="Targets to notify when usage approaches or exceeds the quota limit. Valid non-empty values are `account` or `none`. The `account` value specifies that the user or group owning the usage will be notified, `none` specifies that notifications are not sent. If not specified, we assume `none`.")
    quota_limit: Optional[StrictInt] = Field(default=None, description="Logical space limit of the quota (in bytes) assigned by the rule. This value cannot be negative.")
    quota_type: Optional[StrictStr] = Field(default=None, description="Specifies the type of quota rule. Valid values are `user-default`, `user`, `user-group-member`, `group-default` and `group`. Every user-group-quota rule requires a mandatory rule type.")
    subject: Optional[PolicyruleusergroupquotaSubject] = Field(default=None, description="The subject for which the rule applies. Rules of quota type `user`, `user-group-member`, `group` require a non-empty subject, while rules of quota type `user-default` and `group-default` do not have a subject. The subject identifies the accounts for which the quota rule applies.")
    __properties = ["enforced", "notifications", "quota_limit", "quota_type", "subject"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of subject
        if _include_in_dict('subject', include_readonly, excluded_fields, none_fields):
            _dict['subject'] = self.subject.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PolicyruleusergroupquotapostRules:
        """Create an instance of PolicyruleusergroupquotapostRules from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyruleusergroupquotapostRules:
        """Create an instance of PolicyruleusergroupquotapostRules from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyruleusergroupquotapostRules.parse_obj(obj)

        _obj = PolicyruleusergroupquotapostRules.construct(_fields_set=None, **{
            "enforced": obj.get("enforced"),
            "notifications": obj.get("notifications"),
            "quota_limit": obj.get("quota_limit"),
            "quota_type": obj.get("quota_type"),
            "subject": PolicyruleusergroupquotaSubject.from_dict(obj.get("subject")) if obj.get("subject") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

