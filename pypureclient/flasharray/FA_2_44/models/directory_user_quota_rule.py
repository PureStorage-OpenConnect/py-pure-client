# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.44
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional

try:
    from pydantic.v1 import BaseModel, Field, StrictBool, StrictInt, StrictStr
except ModuleNotFoundError:
    from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flasharray.FA_2_44.models.fixed_reference_with_type import FixedReferenceWithType
from pypureclient.flasharray.FA_2_44.models.policy_rule_user_group_quota_subject import PolicyRuleUserGroupQuotaSubject


class DirectoryUserQuotaRule(BaseModel):
    """
    DirectoryUserQuotaRule
    """
    effectiveness: Optional[StrictStr] = Field(default=None, description="Describes whether the rule is the most effective rule that applies to the user. Possible values are `effective` and `ineffective_limit`. If the value is `effective` then the rule is the most effective rule for the user. If the value is `ineffective_limit` then there is at least one enforced rule with a lower quota limit that also applies to the user, resulting in the quota limit of the rule not being the most effective.")
    enabled: Optional[StrictBool] = Field(default=None, description="Where the user-group-quota policy is enabled. If `true` the rules in the policy impact the amount of usage the user can own in the managed directory. If `false` the rules in the policy do not have an effect.")
    enforced: Optional[StrictBool] = Field(default=None, description="Determines whether the quota limit in the rule is enforced. If `true`, the user will be out of the allowed available space when usage reaches the quota limit. If `false`, the allowed usage may grow beyond the quota limit, but the user will be notified.")
    policy: Optional[FixedReferenceWithType] = Field(default=None, description="The user-group-quota policy with rules impacting the usage of the user.")
    quota_limit: Optional[StrictInt] = Field(default=None, description="The logical space limit assigned by the user-group-quota rule.")
    quota_type: Optional[StrictStr] = Field(default=None, description="The type of the user-group-quota rule. The `user-default`, `user` and `user-group-member` types impact the user.")
    rule_name: Optional[StrictStr] = Field(default=None, description="The unique name of the user-group-quota policy rule.")
    subject: Optional[PolicyRuleUserGroupQuotaSubject] = Field(default=None, description="The rule subject if the quota type is `user` or `user-group-member`. For `user` type, the subject matches the user impacted by the quota rule. For `user-group-member` type, the subject matches a group that the user is a member of.")
    __properties = ["effectiveness", "enabled", "enforced", "policy", "quota_limit", "quota_type", "rule_name", "subject"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "effectiveness",
                "enabled",
                "enforced",
                "quota_limit",
                "quota_type",
                "rule_name",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of policy
        if _include_in_dict('policy', include_readonly, excluded_fields, none_fields):
            _dict['policy'] = self.policy.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of subject
        if _include_in_dict('subject', include_readonly, excluded_fields, none_fields):
            _dict['subject'] = self.subject.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> DirectoryUserQuotaRule:
        """Create an instance of DirectoryUserQuotaRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> DirectoryUserQuotaRule:
        """Create an instance of DirectoryUserQuotaRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DirectoryUserQuotaRule.parse_obj(obj)

        _obj = DirectoryUserQuotaRule.construct(_fields_set=None, **{
            "effectiveness": obj.get("effectiveness"),
            "enabled": obj.get("enabled"),
            "enforced": obj.get("enforced"),
            "policy": FixedReferenceWithType.from_dict(obj.get("policy")) if obj.get("policy") is not None else None,
            "quota_limit": obj.get("quota_limit"),
            "quota_type": obj.get("quota_type"),
            "rule_name": obj.get("rule_name"),
            "subject": PolicyRuleUserGroupQuotaSubject.from_dict(obj.get("subject")) if obj.get("subject") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

