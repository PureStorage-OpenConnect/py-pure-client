# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.42
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_42 import models

class WorkloadPlacementRecommendation(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'FixedReference',
        'expires': 'int',
        'more_results_available': 'bool',
        'created': 'int',
        'preset': 'FixedReference',
        'projection_months': 'int',
        'additional_constraints': 'WorkloadPlacementRecommendationAdditionalConstraints',
        'name': 'str',
        'progress': 'float',
        'id': 'str',
        'parameters': 'list[WorkloadParameter]',
        'placement_names': 'list[str]',
        'results': 'list[WorkloadPlacementRecommendationResult]',
        'results_limit': 'int',
        'status': 'str'
    }

    attribute_map = {
        'context': 'context',
        'expires': 'expires',
        'more_results_available': 'more_results_available',
        'created': 'created',
        'preset': 'preset',
        'projection_months': 'projection_months',
        'additional_constraints': 'additional_constraints',
        'name': 'name',
        'progress': 'progress',
        'id': 'id',
        'parameters': 'parameters',
        'placement_names': 'placement_names',
        'results': 'results',
        'results_limit': 'results_limit',
        'status': 'status'
    }

    required_args = {
    }

    def __init__(
        self,
        context=None,  # type: models.FixedReference
        expires=None,  # type: int
        more_results_available=None,  # type: bool
        created=None,  # type: int
        preset=None,  # type: models.FixedReference
        projection_months=None,  # type: int
        additional_constraints=None,  # type: models.WorkloadPlacementRecommendationAdditionalConstraints
        name=None,  # type: str
        progress=None,  # type: float
        id=None,  # type: str
        parameters=None,  # type: List[models.WorkloadParameter]
        placement_names=None,  # type: List[str]
        results=None,  # type: List[models.WorkloadPlacementRecommendationResult]
        results_limit=None,  # type: int
        status=None,  # type: str
    ):
        """
        Keyword args:
            context (FixedReference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
            expires (int): The time when recommendation expires, measured in milliseconds since the UNIX epoch. 
            more_results_available (bool)
            created (int): The time the recommendation was made, measured in milliseconds since the UNIX epoch. 
            preset (FixedReference)
            projection_months (int): The number of months to compute the projections. If not specified, defaults to 1 month. 
            additional_constraints (WorkloadPlacementRecommendationAdditionalConstraints)
            name (str): A globally unique, system-generated name. The name cannot be modified and cannot refer to another resource. 
            progress (float): The percentage progress of the recommendation computation. The percentage is displayed as a decimal value, starting at 0.00 and ending at 1.00. 
            id (str): A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource. 
            parameters (list[WorkloadParameter]): The parameter values to pass to the preset. Value must be supplied for all parameters that do not have a default defined in the preset. 
            placement_names (list[str])
            results (list[WorkloadPlacementRecommendationResult]): The results of the recommendation. 
            results_limit (int): The maximum number of results to return. If not specified, defaults to 10 results. 
            status (str): The status of the recommendation. Possible values are `processing`, `completed`, and `failed`. 
        """
        if context is not None:
            self.context = context
        if expires is not None:
            self.expires = expires
        if more_results_available is not None:
            self.more_results_available = more_results_available
        if created is not None:
            self.created = created
        if preset is not None:
            self.preset = preset
        if projection_months is not None:
            self.projection_months = projection_months
        if additional_constraints is not None:
            self.additional_constraints = additional_constraints
        if name is not None:
            self.name = name
        if progress is not None:
            self.progress = progress
        if id is not None:
            self.id = id
        if parameters is not None:
            self.parameters = parameters
        if placement_names is not None:
            self.placement_names = placement_names
        if results is not None:
            self.results = results
        if results_limit is not None:
            self.results_limit = results_limit
        if status is not None:
            self.status = status

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendation`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendation`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendation`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendation`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(WorkloadPlacementRecommendation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkloadPlacementRecommendation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
