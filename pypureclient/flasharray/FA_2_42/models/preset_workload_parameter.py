# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from pypureclient.flasharray.FA_2_42.models.preset_workload_constraints import PresetWorkloadConstraints
from pypureclient.flasharray.FA_2_42.models.preset_workload_metadata import PresetWorkloadMetadata


class PresetWorkloadParameter(BaseModel):
    """
    PresetWorkloadParameter
    """
    constraints: Optional[PresetWorkloadConstraints] = None
    metadata: Optional[PresetWorkloadMetadata] = None
    name: StrictStr = Field(default=..., description="The name of the parameter, by which other fields in the preset can reference it. Name must be unique across all parameters in the preset.")
    type: StrictStr = Field(default=..., description="The type of the parameter. Valid values include `string`, `integer`, `boolean` and `resource_reference`. String parameters can be used to collect metadata about workloads deployed from the preset, such as the environment to which they are deployed (e.g., production, development, etc.) or the billing account to which they belong for charge back and show back purposes. Integer and boolean parameters can be used to configure specific fields in the preset, such as the number or size of volumes to provision. Resource reference parameters can be used to collect references to other objects, such as storage classes or remote arrays.")
    __properties = ["constraints", "metadata", "name", "type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of constraints
        if _include_in_dict('constraints', include_readonly, excluded_fields, none_fields):
            _dict['constraints'] = self.constraints.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of metadata
        if _include_in_dict('metadata', include_readonly, excluded_fields, none_fields):
            _dict['metadata'] = self.metadata.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PresetWorkloadParameter:
        """Create an instance of PresetWorkloadParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PresetWorkloadParameter:
        """Create an instance of PresetWorkloadParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PresetWorkloadParameter.parse_obj(obj)

        _obj = PresetWorkloadParameter.construct(_fields_set=None, **{
            "constraints": PresetWorkloadConstraints.from_dict(obj.get("constraints")) if obj.get("constraints") is not None else None,
            "metadata": PresetWorkloadMetadata.from_dict(obj.get("metadata")) if obj.get("metadata") is not None else None,
            "name": obj.get("name"),
            "type": obj.get("type")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

