# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.42
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr


class ArrayErasure(BaseModel):
    """
    ArrayErasure
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    details: Optional[StrictStr] = Field(default=None, description="The detailed reason of the `status`.")
    image_download_progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The progress of the ISO image download, displayed in decimal format.")
    image_source: Optional[StrictStr] = Field(default=None, description="Source of the ISO image to download. Valid values include `auto` and URLs. `auto` means download the image from Pure1 cloud, and a URL means download the image from the specified URL.")
    image_version: Optional[StrictStr] = Field(default=None, description="Version of the image to download and install.")
    sanitization_certificate: Optional[StrictStr] = Field(default=None, description="The sanitization certificate of the factory reset, which complies with the standard described in NIST SP800-88R1 section 4.8.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the factory reset process. Valid values include `resetting`, `reset_failed`, `reimage_failed`, `waiting_for_finalize`, `downloading`, `downloaded`, and `download_failed`. A status of `resetting` indicates that the factory reset is running. A status of `reset_failed` indicates that the factory reset encountered a failure. A status of `reimage_failed` indicates that the factory reset failed to reimage the array. A status of `waiting_for_finalize` indicates that the factory reset has finished sanitizing drives, and is waiting to be finalized. A status of `downloading` indicates that the factory reset is downloading ISO image. A status of `downloaded` indicates that the factory reset completed ISO image download. A status of `download_failed` indicates that the factory reset failed to download ISO image.")
    __properties = ["id", "name", "details", "image_download_progress", "image_source", "image_version", "sanitization_certificate", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ArrayErasure:
        """Create an instance of ArrayErasure from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ArrayErasure:
        """Create an instance of ArrayErasure from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArrayErasure.parse_obj(obj)

        _obj = ArrayErasure.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "details": obj.get("details"),
            "image_download_progress": obj.get("image_download_progress"),
            "image_source": obj.get("image_source"),
            "image_version": obj.get("image_version"),
            "sanitization_certificate": obj.get("sanitization_certificate"),
            "status": obj.get("status")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

