# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.26
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_26.models.fixed_reference_with_type import FixedReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class LocalMember(BaseModel):
    """
    LocalMember
    """ # noqa: E501
    group: Optional[FixedReferenceWithType] = Field(default=None, description="Reference to the group to which the member belongs.")
    group_gid: Optional[StrictInt] = Field(default=None, description="GID of the group to which the member belongs.")
    is_primary_group: Optional[StrictBool] = Field(default=None, description="When a membership of `member_type` has the value `User`, this specifies whether this membership is a primary-group mapping or not. In any other case, this field will be `false`.")
    member: Optional[FixedReferenceWithType] = Field(default=None, description="Reference to the member of the group.")
    member_id: Optional[StrictInt] = Field(default=None, description="GID if the `member_type` is `Group` and UID if the `member_type` is `User`.")
    __properties: ClassVar[List[str]] = ["group", "group_gid", "is_primary_group", "member", "member_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "is_primary_group",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group and (include_readonly or "group" not in excluded_fields):
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member and (include_readonly or "member" not in excluded_fields):
            _dict['member'] = self.member.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LocalMember from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LocalMember from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "group": FixedReferenceWithType.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "group_gid": obj.get("group_gid"),
            "is_primary_group": obj.get("is_primary_group"),
            "member": FixedReferenceWithType.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "member_id": obj.get("member_id")
        })
        return _obj


