# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.26
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_26 import models

class EradicationConfig(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'disabled_delay': 'int',
        'eradication_delay': 'int',
        'enabled_delay': 'int',
        'manual_eradication': 'str'
    }

    attribute_map = {
        'disabled_delay': 'disabled_delay',
        'eradication_delay': 'eradication_delay',
        'enabled_delay': 'enabled_delay',
        'manual_eradication': 'manual_eradication'
    }

    required_args = {
    }

    def __init__(
        self,
        disabled_delay=None,  # type: int
        eradication_delay=None,  # type: int
        enabled_delay=None,  # type: int
        manual_eradication=None,  # type: str
    ):
        """
        Keyword args:
            disabled_delay (int): The eradication delay in milliseconds for destroyed objects that cannot be manually eradicated. Destroyed objects that cannot be manually eradicated will be automatically eradicated after the configured delay time passes. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.
            eradication_delay (int): Eradication delay in milliseconds for all destroyed objects. Automatically eradicate destroyed objects after the configured delay time passes. Updating this field will update both `eradication_disabled_delay` and `eradication_enabled_delay` if both `eradication_disabled_delay` and `eradication_enabled_delay` have the same value. If `eradication_disabled_delay` and `eradication_enabled_delay` have different values, trying to configure `eradication_delay` will result in an error. This field has been deprecated and will be removed in a future REST version. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.
            enabled_delay (int): The eradication delay in milliseconds for destroyed objects that can be manually eradicated. Destroyed objects that can be manually eradicated will be automatically eradicated after the configured delay time passes. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.
            manual_eradication (str): Manual eradication status applied on the array level. If status is `all-disabled`, you cannot eradicate objects, files, and directories. If at least one local object has `manual_eradication` disabled, then the status will be `partially-disabled`. Values include `all-disabled`, `partially-disabled`, and `all-enabled`.
        """
        if disabled_delay is not None:
            self.disabled_delay = disabled_delay
        if eradication_delay is not None:
            self.eradication_delay = eradication_delay
        if enabled_delay is not None:
            self.enabled_delay = enabled_delay
        if manual_eradication is not None:
            self.manual_eradication = manual_eradication

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `EradicationConfig`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `EradicationConfig`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `EradicationConfig`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `EradicationConfig`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(EradicationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EradicationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
