# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Hardware(BaseModel):
    """
    Hardware
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    details: Optional[StrictStr] = Field(default=None, description="Details about the status of the component if not healthy.")
    identify_enabled: Optional[StrictBool] = Field(default=None, description="If `true`, the ID LED is lit to visually identify the component.")
    index: Optional[StrictInt] = Field(default=None, description="Number that identifies the relative position of a hardware component within the array.")
    model: Optional[StrictStr] = Field(default=None, description="Model number of the hardware component.")
    serial: Optional[StrictStr] = Field(default=None, description="Serial number of the hardware component.")
    slot: Optional[StrictInt] = Field(default=None, description="Slot number occupied by the PCI Express card that hosts the component.")
    speed: Optional[StrictInt] = Field(default=None, description="Speed (in bytes per second) at which the component is operating.")
    status: Optional[StrictStr] = Field(default=None, description="Component status. Values include `critical`, `healthy`, `identifying`, `unhealthy`, `unknown`, and `unused`.")
    temperature: Optional[StrictInt] = Field(default=None, description="Temperature (in degrees Celsius) reported by the component.")
    type: Optional[StrictStr] = Field(default=None, description="Type of hardware component. Values include `bay`, `ct`, `ch`, `eth`, `fan`, `fb`, `fc`, `fm`, `ib`, `iom`, `nvb`, `pwr`, `sas`, `sh`, and `tmp`.")
    voltage: Optional[StrictInt] = Field(default=None, description="Voltage (in Volts) reported by the component.")
    __properties: ClassVar[List[str]] = ["name", "details", "identify_enabled", "index", "model", "serial", "slot", "speed", "status", "temperature", "type", "voltage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "details",
            "identify_enabled",
            "index",
            "model",
            "serial",
            "slot",
            "speed",
            "status",
            "temperature",
            "type",
            "voltage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Hardware from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Hardware from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "details": obj.get("details"),
            "identify_enabled": obj.get("identify_enabled"),
            "index": obj.get("index"),
            "model": obj.get("model"),
            "serial": obj.get("serial"),
            "slot": obj.get("slot"),
            "speed": obj.get("speed"),
            "status": obj.get("status"),
            "temperature": obj.get("temperature"),
            "type": obj.get("type"),
            "voltage": obj.get("voltage")
        })
        return _obj


