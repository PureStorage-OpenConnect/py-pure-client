# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, conint
from pypureclient.flasharray.FA_2_14.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_14.models.replication_performance_with_total import ReplicationPerformanceWithTotal


class PodPerformanceReplication(BaseModel):
    """
    PodPerformanceReplication
    """
    continuous_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second for continuous replication. The continuous replication feature is used for disaster recovery on FlashArray and provides a recovery point objective (RPO) of significantly less than 30s.")
    periodic_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second for periodic replication.")
    pod: Optional[FixedReference] = Field(default=None, description="Reference to the pod that the performance data is associated with.")
    resync_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second during resync replication. Resync replication is the mechanism to bring two arrays into sync. This may occur during an initial pod stretch, or, in case of outage, when two arrays reestablish connection. After the connection is restored, the array that was online starts replicating pod data to its peer array until the pod is once again in sync.")
    sync_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second for synchronous replication.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since the UNIX epoch.")
    total_bytes_per_sec: Optional[conint(strict=True, ge=0)] = Field(default=None, description="Total bytes transmitted and received per second for all types of replication.")
    __properties = ["continuous_bytes_per_sec", "periodic_bytes_per_sec", "pod", "resync_bytes_per_sec", "sync_bytes_per_sec", "time", "total_bytes_per_sec"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "time",
                "total_bytes_per_sec",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of continuous_bytes_per_sec
        if _include_in_dict('continuous_bytes_per_sec', include_readonly, excluded_fields, none_fields):
            _dict['continuous_bytes_per_sec'] = self.continuous_bytes_per_sec.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of periodic_bytes_per_sec
        if _include_in_dict('periodic_bytes_per_sec', include_readonly, excluded_fields, none_fields):
            _dict['periodic_bytes_per_sec'] = self.periodic_bytes_per_sec.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of pod
        if _include_in_dict('pod', include_readonly, excluded_fields, none_fields):
            _dict['pod'] = self.pod.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of resync_bytes_per_sec
        if _include_in_dict('resync_bytes_per_sec', include_readonly, excluded_fields, none_fields):
            _dict['resync_bytes_per_sec'] = self.resync_bytes_per_sec.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of sync_bytes_per_sec
        if _include_in_dict('sync_bytes_per_sec', include_readonly, excluded_fields, none_fields):
            _dict['sync_bytes_per_sec'] = self.sync_bytes_per_sec.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PodPerformanceReplication:
        """Create an instance of PodPerformanceReplication from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PodPerformanceReplication:
        """Create an instance of PodPerformanceReplication from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PodPerformanceReplication.parse_obj(obj)

        _obj = PodPerformanceReplication.construct(_fields_set=None, **{
            "continuous_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj.get("continuous_bytes_per_sec")) if obj.get("continuous_bytes_per_sec") is not None else None,
            "periodic_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj.get("periodic_bytes_per_sec")) if obj.get("periodic_bytes_per_sec") is not None else None,
            "pod": FixedReference.from_dict(obj.get("pod")) if obj.get("pod") is not None else None,
            "resync_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj.get("resync_bytes_per_sec")) if obj.get("resync_bytes_per_sec") is not None else None,
            "sync_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj.get("sync_bytes_per_sec")) if obj.get("sync_bytes_per_sec") is not None else None,
            "time": obj.get("time"),
            "total_bytes_per_sec": obj.get("total_bytes_per_sec")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

