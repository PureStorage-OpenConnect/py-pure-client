# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_16.models.chap import Chap
from pypureclient.flasharray.FA_2_16.models.host_port_connectivity import HostPortConnectivity
from pypureclient.flasharray.FA_2_16.models.reference import Reference
from pypureclient.flasharray.FA_2_16.models.reference_no_id import ReferenceNoId
from pypureclient.flasharray.FA_2_16.models.space import Space


class Host(BaseModel):
    """
    Host
    """
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    chap: Optional[Chap] = None
    connection_count: Optional[StrictInt] = Field(default=None, description="The number of volumes connected to the specified host.")
    host_group: Optional[ReferenceNoId] = Field(default=None, description="The host group to which the host should be associated.")
    iqns: Optional[conlist(StrictStr)] = Field(default=None, description="The iSCSI qualified name (IQN) associated with the host.")
    is_local: Optional[StrictBool] = Field(default=None, description="If set to `true`, the location reference is to the local array. If set to `false`, the location reference is to a remote location, such as a remote array or offload target.")
    nqns: Optional[conlist(StrictStr)] = Field(default=None, description="The NVMe Qualified Name (NQN) associated with the host.")
    personality: Optional[StrictStr] = Field(default=None, description="Determines how the system tunes the array to ensure that it works optimally with the host. Set `personality` to the name of the host operating system or virtual memory system. Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`, `oracle-vm-server`, `solaris`, and `vms`. If your system is not listed as one of the valid host personalities, do not set the option. By default, the personality is not set.")
    port_connectivity: Optional[HostPortConnectivity] = None
    preferred_arrays: Optional[conlist(Reference)] = Field(default=None, description="For synchronous replication configurations, sets a host's preferred array to specify which array exposes active/optimized paths to that host. Enter multiple preferred arrays in comma-separated format. If a preferred array is set for a host, then the other arrays in the same pod will expose active/non-optimized paths to that host. If the host is in a host group, `preferred_arrays` cannot be set because host groups have their own preferred arrays. On a preferred array of a certain host, all the paths on all the ports (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths, while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths.")
    space: Optional[Space] = Field(default=None, description="Displays provisioned size and physical storage consumption information for the sum of all volumes connected to the specified host.")
    vlan: Optional[StrictStr] = Field(default=None, description="The VLAN ID that the host is associated with. If set to `any`, the host can access any VLAN. If set to `untagged`, the host can only access untagged VLANs. If set to a number between `1` and `4094`, the host can only access the specified VLAN with that number.")
    wwns: Optional[conlist(StrictStr)] = Field(default=None, description="The Fibre Channel World Wide Name (WWN) associated with the host.")
    __properties = ["name", "chap", "connection_count", "host_group", "iqns", "is_local", "nqns", "personality", "port_connectivity", "preferred_arrays", "space", "vlan", "wwns"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "connection_count",
                "is_local",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of chap
        if _include_in_dict('chap', include_readonly, excluded_fields, none_fields):
            _dict['chap'] = self.chap.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of host_group
        if _include_in_dict('host_group', include_readonly, excluded_fields, none_fields):
            _dict['host_group'] = self.host_group.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of port_connectivity
        if _include_in_dict('port_connectivity', include_readonly, excluded_fields, none_fields):
            _dict['port_connectivity'] = self.port_connectivity.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in preferred_arrays (list)
        if _include_in_dict('preferred_arrays', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.preferred_arrays:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['preferred_arrays'] = _items
        # override the default output from pydantic by calling `to_dict()` of space
        if _include_in_dict('space', include_readonly, excluded_fields, none_fields):
            _dict['space'] = self.space.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Host:
        """Create an instance of Host from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Host:
        """Create an instance of Host from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Host.parse_obj(obj)

        _obj = Host.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "chap": Chap.from_dict(obj.get("chap")) if obj.get("chap") is not None else None,
            "connection_count": obj.get("connection_count"),
            "host_group": ReferenceNoId.from_dict(obj.get("host_group")) if obj.get("host_group") is not None else None,
            "iqns": obj.get("iqns"),
            "is_local": obj.get("is_local"),
            "nqns": obj.get("nqns"),
            "personality": obj.get("personality"),
            "port_connectivity": HostPortConnectivity.from_dict(obj.get("port_connectivity")) if obj.get("port_connectivity") is not None else None,
            "preferred_arrays": [Reference.from_dict(_item) for _item in obj.get("preferred_arrays")] if obj.get("preferred_arrays") is not None else None,
            "space": Space.from_dict(obj.get("space")) if obj.get("space") is not None else None,
            "vlan": obj.get("vlan"),
            "wwns": obj.get("wwns")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

