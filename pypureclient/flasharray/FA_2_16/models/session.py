# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr


class Session(BaseModel):
    """
    Session
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    end_time: Optional[StrictInt] = Field(default=None, description="Date and time the user logged out of the Purity//FA interface. Not set if the session is still active.")
    event: Optional[StrictStr] = Field(default=None, description="Description of session events such as login and user session. Valid values include `failed authentication`, `user session`, `login`, `logout`, `API token obtained`, and `request without session`.")
    event_count: Optional[StrictInt] = Field(default=None, description="Number of session events.")
    location: Optional[StrictStr] = Field(default=None, description="IP address of the user client connecting to the array or console if connected through local console.")
    method: Optional[StrictStr] = Field(default=None, description="Method by which the user attempted to log in. Valid values include `API token`, `JWT`, `password`, and `public key`.")
    start_time: Optional[StrictInt] = Field(default=None, description="Date and time the user logged in to the Purity//FA interface.")
    user: Optional[StrictStr] = Field(default=None, description="Username of the Purity//FA user who triggered the user session event.")
    user_interface: Optional[StrictStr] = Field(default=None, description="The user interface through which the user session event was performed. Valid values include `CLI`, `GUI`, and `REST`.")
    __properties = ["id", "name", "end_time", "event", "event_count", "location", "method", "start_time", "user", "user_interface"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "end_time",
                "event",
                "event_count",
                "location",
                "method",
                "start_time",
                "user",
                "user_interface",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Session:
        """Create an instance of Session from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Session:
        """Create an instance of Session from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Session.parse_obj(obj)

        _obj = Session.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "end_time": obj.get("end_time"),
            "event": obj.get("event"),
            "event_count": obj.get("event_count"),
            "location": obj.get("location"),
            "method": obj.get("method"),
            "start_time": obj.get("start_time"),
            "user": obj.get("user"),
            "user_interface": obj.get("user_interface")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

