# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_15.models.chap import Chap
from pypureclient.flasharray.FA_2_15.models.reference import Reference
from pypureclient.flasharray.FA_2_15.models.reference_no_id import ReferenceNoId
from typing import Optional, Set
from typing_extensions import Self

class HostPatch(BaseModel):
    """
    HostPatch
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="The new name for the resource.")
    add_iqns: Optional[List[StrictStr]] = Field(default=None, description="Adds the specified iSCSI Qualified Names (IQNs) to those already associated with the specified host.")
    add_nqns: Optional[List[StrictStr]] = Field(default=None, description="Adds the specified NVMe Qualified Names (NQNs) to those already associated with the specified host.")
    add_wwns: Optional[List[StrictStr]] = Field(default=None, description="Adds the specified Fibre Channel World Wide Names (WWNs) to those already associated with the specified host.")
    chap: Optional[Chap] = None
    host_group: Optional[ReferenceNoId] = Field(default=None, description="The host group to which the host should be associated.")
    iqns: Optional[List[StrictStr]] = Field(default=None, description="The iSCSI qualified name (IQN) associated with the host.")
    nqns: Optional[List[StrictStr]] = Field(default=None, description="The NVMe Qualified Name (NQN) associated with the host.")
    personality: Optional[StrictStr] = Field(default=None, description="Determines how the system tunes the array to ensure that it works optimally with the host. Set `personality` to the name of the host operating system or virtual memory system. Valid values are `aix`, `esxi`, `hitachi-vsp`, `hpux`, `oracle-vm-server`, `solaris`, and `vms`. If your system is not listed as one of the valid host personalities, do not set the option. By default, the personality is not set.")
    preferred_arrays: Optional[List[Reference]] = Field(default=None, description="For synchronous replication configurations, sets a host's preferred array to specify which array exposes active/optimized paths to that host. Enter multiple preferred arrays in comma-separated format. If a preferred array is set for a host, then the other arrays in the same pod will expose active/non-optimized paths to that host. If the host is in a host group, `preferred_arrays` cannot be set because host groups have their own preferred arrays. On a preferred array of a certain host, all the paths on all the ports (for both the primary and secondary controllers) are set up as A/O (active/optimized) paths, while on a non-preferred array, all the paths are A/N (Active/Non-optimized) paths.")
    remove_iqns: Optional[List[StrictStr]] = Field(default=None, description="Disassociates the specified iSCSI Qualified Names (IQNs) from the specified host.")
    remove_nqns: Optional[List[StrictStr]] = Field(default=None, description="Disassociates the specified NVMe Qualified Names (NQNs) from the specified host.")
    remove_wwns: Optional[List[StrictStr]] = Field(default=None, description="Disassociates the specified Fibre Channel World Wide Names (WWNs) from the specified host.")
    wwns: Optional[List[StrictStr]] = Field(default=None, description="The Fibre Channel World Wide Name (WWN) associated with the host.")
    __properties: ClassVar[List[str]] = ["name", "add_iqns", "add_nqns", "add_wwns", "chap", "host_group", "iqns", "nqns", "personality", "preferred_arrays", "remove_iqns", "remove_nqns", "remove_wwns", "wwns"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of chap
        if self.chap and (include_readonly or "chap" not in excluded_fields):
            _dict['chap'] = self.chap.to_dict()
        # override the default output from pydantic by calling `to_dict()` of host_group
        if self.host_group and (include_readonly or "host_group" not in excluded_fields):
            _dict['host_group'] = self.host_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in preferred_arrays (list)
        if self.preferred_arrays and (include_readonly or "preferred_arrays" not in excluded_fields):
            _items = []
            for _item_preferred_arrays in self.preferred_arrays:
                if _item_preferred_arrays:
                    _items.append(_item_preferred_arrays.to_dict())
            _dict['preferred_arrays'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HostPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HostPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "add_iqns": obj.get("add_iqns"),
            "add_nqns": obj.get("add_nqns"),
            "add_wwns": obj.get("add_wwns"),
            "chap": Chap.from_dict(obj["chap"]) if obj.get("chap") is not None else None,
            "host_group": ReferenceNoId.from_dict(obj["host_group"]) if obj.get("host_group") is not None else None,
            "iqns": obj.get("iqns"),
            "nqns": obj.get("nqns"),
            "personality": obj.get("personality"),
            "preferred_arrays": [Reference.from_dict(_item) for _item in obj["preferred_arrays"]] if obj.get("preferred_arrays") is not None else None,
            "remove_iqns": obj.get("remove_iqns"),
            "remove_nqns": obj.get("remove_nqns"),
            "remove_wwns": obj.get("remove_wwns"),
            "wwns": obj.get("wwns")
        })
        return _obj


