# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictBool, StrictStr, field_validator
from typing import List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_40.models.vchost_connection_get_response import VchostConnectionGetResponse
from pypureclient.flasharray.FA_2_40.models.vchost_connection_response import VchostConnectionResponse
from pypureclient.flasharray.FA_2_40.api_client import ApiClient as _TransportApiClient, RequestSerialized
from pypureclient.flasharray.FA_2_40.api_response import ApiResponse
from pypureclient.flasharray.FA_2_40.rest import RESTResponseType


class VchostConnectionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client: Optional[_TransportApiClient] = None) -> None:
        self.api_client = api_client if api_client else _TransportApiClient.get_default()


    @validate_call
    def api240_vchost_connections_delete_with_http_info(
        self,
        all_vchosts: Annotated[Optional[StrictBool], Field(description="If set to `true`, the storage container represented by the protocol endpoint is accessible to all vchosts. Users should not specify `vchost_ids` or `vchost_names` in the request. If set to `false`, the storage container represented by the protocol endpoint is only accessible to the vchosts that have explicit vchost-connections with the protocol endpoint. Users need to specify `vchost_ids` or `vchost_names` in the request.")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        protocol_endpoint_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of protocol endpoint IDs. Performs the operation on the protocol endpoints specified. For example, `peid01,peid02`. Cannot be used in conjunction with `protocol_endpoint_names`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.")] = None,
        protocol_endpoint_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of protocol endpoint names. Performs the operation on the protocol endpoints specified. For example, `pe01,pe02`. Cannot be used in conjunction with `protocol_endpoint_ids`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        vchost_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of vchost IDs. Performs the operation on the vchosts specified. For example, `vchostid01,vchostid02`. Cannot be used in conjunction with `vchost_names`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.")] = None,
        vchost_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of vchost names. Performs the operation on the vchosts specified. For example, `vchost01,vchost02`. Cannot be used in conjunction with `vchost_ids`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[None]:
        """Delete the vchost-connection between a protocol endpoint and its vchost

        Deletes the vchost-connection between a protocol endpoint and its vchost. The storage container represented by the protocol endpoint will no longer be visible to the vCenter represented by the vchost. One of the `protocol_endpoint_names` or `protocol_endpoint_ids` query parameters, and one of the `vchost_names` or `vchost_ids` query parameters are required. But if `all_vchosts` is set to `true`, `vchost_names` and `vchost_ids` should not be specified.

        :param all_vchosts: If set to `true`, the storage container represented by the protocol endpoint is accessible to all vchosts. Users should not specify `vchost_ids` or `vchost_names` in the request. If set to `false`, the storage container represented by the protocol endpoint is only accessible to the vchosts that have explicit vchost-connections with the protocol endpoint. Users need to specify `vchost_ids` or `vchost_names` in the request.
        :type all_vchosts: bool
        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param protocol_endpoint_ids: A comma-separated list of protocol endpoint IDs. Performs the operation on the protocol endpoints specified. For example, `peid01,peid02`. Cannot be used in conjunction with `protocol_endpoint_names`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.
        :type protocol_endpoint_ids: List[str]
        :param protocol_endpoint_names: A comma-separated list of protocol endpoint names. Performs the operation on the protocol endpoints specified. For example, `pe01,pe02`. Cannot be used in conjunction with `protocol_endpoint_ids`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.
        :type protocol_endpoint_names: List[str]
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param vchost_ids: A comma-separated list of vchost IDs. Performs the operation on the vchosts specified. For example, `vchostid01,vchostid02`. Cannot be used in conjunction with `vchost_names`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.
        :type vchost_ids: List[str]
        :param vchost_names: A comma-separated list of vchost names. Performs the operation on the vchosts specified. For example, `vchost01,vchost02`. Cannot be used in conjunction with `vchost_ids`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.
        :type vchost_names: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api240_vchost_connections_delete_serialize(
            all_vchosts = all_vchosts,
            authorization = authorization,
            protocol_endpoint_ids = protocol_endpoint_ids,
            protocol_endpoint_names = protocol_endpoint_names,
            x_request_id = x_request_id,
            vchost_ids = vchost_ids,
            vchost_names = vchost_names,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api240_vchost_connections_delete_serialize(
        self,
        all_vchosts,
        authorization,
        protocol_endpoint_ids,
        protocol_endpoint_names,
        x_request_id,
        vchost_ids,
        vchost_names,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'protocol_endpoint_ids': 'csv',
            'protocol_endpoint_names': 'csv',
            'vchost_ids': 'csv',
            'vchost_names': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if all_vchosts is not None:
            
            _query_params.append(('all_vchosts', all_vchosts))
            
        if protocol_endpoint_ids is not None:
            
            _query_params.append(('protocol_endpoint_ids', protocol_endpoint_ids))
            
        if protocol_endpoint_names is not None:
            
            _query_params.append(('protocol_endpoint_names', protocol_endpoint_names))
            
        if vchost_ids is not None:
            
            _query_params.append(('vchost_ids', vchost_ids))
            
        if vchost_names is not None:
            
            _query_params.append(('vchost_names', vchost_names))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter




        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='DELETE',
            resource_path='/api/2.40/vchost-connections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )


    @validate_call
    def api240_vchost_connections_get_with_http_info(
        self,
        all_vchosts: Annotated[Optional[StrictBool], Field(description="If set to `true`, the storage container represented by the protocol endpoint is accessible to all vchosts. Users should not specify `vchost_ids` or `vchost_names` in the request. If set to `false`, the storage container represented by the protocol endpoint is only accessible to the vchosts that have explicit vchost-connections with the protocol endpoint. Users need to specify `vchost_ids` or `vchost_names` in the request.")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        continuation_token: Annotated[Optional[StrictStr], Field(description="A token used to retrieve the next page of data with some consistency guaranteed. The token is a Base64 encoded value. Set `continuation_token` to the system-generated token taken from the `x-next-token` header field of the response. A query has reached its last page when the response does not include a token. Pagination requires the `limit` and `continuation_token` query parameters.")] = None,
        filter: Annotated[Optional[StrictStr], Field(description="Narrows down the results to only the response objects that satisfy the filter criteria.")] = None,
        limit: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Limits the size of the response to the specified number of objects on each page. To return the total number of resources, set `limit=0`. The total number of resources is returned as a `total_item_count` value. If the page size requested is larger than the system maximum limit, the server returns the maximum limit, disregarding the requested page size.")] = None,
        offset: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="The starting position based on the results of the query in relation to the full set of response objects returned.")] = None,
        protocol_endpoint_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of protocol endpoint IDs. Performs the operation on the protocol endpoints specified. For example, `peid01,peid02`. Cannot be used in conjunction with `protocol_endpoint_names`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.")] = None,
        protocol_endpoint_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of protocol endpoint names. Performs the operation on the protocol endpoints specified. For example, `pe01,pe02`. Cannot be used in conjunction with `protocol_endpoint_ids`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.")] = None,
        sort: Annotated[Optional[List[Annotated[str, Field(strict=True)]]], Field(description="Returns the response objects in the order specified. Set `sort` to the name in the response by which to sort. Sorting can be performed on any of the names in the response, and the objects can be sorted in ascending or descending order. By default, the response objects are sorted in ascending order. To sort in descending order, append the minus sign (`-`) to the name. A single request can be sorted on multiple objects. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple names, list the names as comma-separated values.")] = None,
        total_item_count: Annotated[Optional[StrictBool], Field(description="If set to `true`, the `total_item_count` matching the specified query parameters is calculated and returned in the response. If set to `false`, the `total_item_count` is `null` in the response. This may speed up queries where the `total_item_count` is large. If not specified, defaults to `false`.")] = None,
        vchost_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of vchost IDs. Performs the operation on the vchosts specified. For example, `vchostid01,vchostid02`. Cannot be used in conjunction with `vchost_names`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.")] = None,
        vchost_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of vchost names. Performs the operation on the vchosts specified. For example, `vchost01,vchost02`. Cannot be used in conjunction with `vchost_ids`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[VchostConnectionGetResponse]:
        """List the vchost-connections between protocol endpoint and vchost.

        Displays a list of vchost-connections between the protocol endpoint and vchost.

        :param all_vchosts: If set to `true`, the storage container represented by the protocol endpoint is accessible to all vchosts. Users should not specify `vchost_ids` or `vchost_names` in the request. If set to `false`, the storage container represented by the protocol endpoint is only accessible to the vchosts that have explicit vchost-connections with the protocol endpoint. Users need to specify `vchost_ids` or `vchost_names` in the request.
        :type all_vchosts: bool
        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param continuation_token: A token used to retrieve the next page of data with some consistency guaranteed. The token is a Base64 encoded value. Set `continuation_token` to the system-generated token taken from the `x-next-token` header field of the response. A query has reached its last page when the response does not include a token. Pagination requires the `limit` and `continuation_token` query parameters.
        :type continuation_token: str
        :param filter: Narrows down the results to only the response objects that satisfy the filter criteria.
        :type filter: str
        :param limit: Limits the size of the response to the specified number of objects on each page. To return the total number of resources, set `limit=0`. The total number of resources is returned as a `total_item_count` value. If the page size requested is larger than the system maximum limit, the server returns the maximum limit, disregarding the requested page size.
        :type limit: int
        :param offset: The starting position based on the results of the query in relation to the full set of response objects returned.
        :type offset: int
        :param protocol_endpoint_ids: A comma-separated list of protocol endpoint IDs. Performs the operation on the protocol endpoints specified. For example, `peid01,peid02`. Cannot be used in conjunction with `protocol_endpoint_names`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.
        :type protocol_endpoint_ids: List[str]
        :param protocol_endpoint_names: A comma-separated list of protocol endpoint names. Performs the operation on the protocol endpoints specified. For example, `pe01,pe02`. Cannot be used in conjunction with `protocol_endpoint_ids`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.
        :type protocol_endpoint_names: List[str]
        :param sort: Returns the response objects in the order specified. Set `sort` to the name in the response by which to sort. Sorting can be performed on any of the names in the response, and the objects can be sorted in ascending or descending order. By default, the response objects are sorted in ascending order. To sort in descending order, append the minus sign (`-`) to the name. A single request can be sorted on multiple objects. For example, you can sort all volumes from largest to smallest volume size, and then sort volumes of the same size in ascending order by volume name. To sort on multiple names, list the names as comma-separated values.
        :type sort: List[str]
        :param total_item_count: If set to `true`, the `total_item_count` matching the specified query parameters is calculated and returned in the response. If set to `false`, the `total_item_count` is `null` in the response. This may speed up queries where the `total_item_count` is large. If not specified, defaults to `false`.
        :type total_item_count: bool
        :param vchost_ids: A comma-separated list of vchost IDs. Performs the operation on the vchosts specified. For example, `vchostid01,vchostid02`. Cannot be used in conjunction with `vchost_names`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.
        :type vchost_ids: List[str]
        :param vchost_names: A comma-separated list of vchost names. Performs the operation on the vchosts specified. For example, `vchost01,vchost02`. Cannot be used in conjunction with `vchost_ids`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.
        :type vchost_names: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api240_vchost_connections_get_serialize(
            all_vchosts = all_vchosts,
            authorization = authorization,
            x_request_id = x_request_id,
            continuation_token = continuation_token,
            filter = filter,
            limit = limit,
            offset = offset,
            protocol_endpoint_ids = protocol_endpoint_ids,
            protocol_endpoint_names = protocol_endpoint_names,
            sort = sort,
            total_item_count = total_item_count,
            vchost_ids = vchost_ids,
            vchost_names = vchost_names,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VchostConnectionGetResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api240_vchost_connections_get_serialize(
        self,
        all_vchosts,
        authorization,
        x_request_id,
        continuation_token,
        filter,
        limit,
        offset,
        protocol_endpoint_ids,
        protocol_endpoint_names,
        sort,
        total_item_count,
        vchost_ids,
        vchost_names,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'protocol_endpoint_ids': 'csv',
            'protocol_endpoint_names': 'csv',
            'sort': 'csv',
            'vchost_ids': 'csv',
            'vchost_names': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if all_vchosts is not None:
            
            _query_params.append(('all_vchosts', all_vchosts))
            
        if continuation_token is not None:
            
            _query_params.append(('continuation_token', continuation_token))
            
        if filter is not None:
            
            _query_params.append(('filter', filter))
            
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if offset is not None:
            
            _query_params.append(('offset', offset))
            
        if protocol_endpoint_ids is not None:
            
            _query_params.append(('protocol_endpoint_ids', protocol_endpoint_ids))
            
        if protocol_endpoint_names is not None:
            
            _query_params.append(('protocol_endpoint_names', protocol_endpoint_names))
            
        if sort is not None:
            
            _query_params.append(('sort', sort))
            
        if total_item_count is not None:
            
            _query_params.append(('total_item_count', total_item_count))
            
        if vchost_ids is not None:
            
            _query_params.append(('vchost_ids', vchost_ids))
            
        if vchost_names is not None:
            
            _query_params.append(('vchost_names', vchost_names))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/api/2.40/vchost-connections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )


    @validate_call
    def api240_vchost_connections_post_with_http_info(
        self,
        all_vchosts: Annotated[Optional[StrictBool], Field(description="If set to `true`, the storage container represented by the protocol endpoint is accessible to all vchosts. Users should not specify `vchost_ids` or `vchost_names` in the request. If set to `false`, the storage container represented by the protocol endpoint is only accessible to the vchosts that have explicit vchost-connections with the protocol endpoint. Users need to specify `vchost_ids` or `vchost_names` in the request.")] = None,
        allow_stretched_multi_vchost: Annotated[Optional[StrictBool], Field(description="If set to `true`, users are allowed to create a new vchost-connection to a stretched container that already has a vchost-connection. In principle, a stretched container can only have one vchost-connection at a time.")] = None,
        authorization: Annotated[Optional[StrictStr], Field(description="Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)")] = None,
        protocol_endpoint_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of protocol endpoint names. Performs the operation on the protocol endpoints specified. For example, `pe01,pe02`. Cannot be used in conjunction with `protocol_endpoint_ids`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.")] = None,
        protocol_endpoint_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of protocol endpoint IDs. Performs the operation on the protocol endpoints specified. For example, `peid01,peid02`. Cannot be used in conjunction with `protocol_endpoint_names`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.")] = None,
        x_request_id: Annotated[Optional[StrictStr], Field(description="Supplied by client during request or generated by server.")] = None,
        vchost_ids: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of vchost IDs. Performs the operation on the vchosts specified. For example, `vchostid01,vchostid02`. Cannot be used in conjunction with `vchost_names`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.")] = None,
        vchost_names: Annotated[Optional[List[StrictStr]], Field(description="A comma-separated list of vchost names. Performs the operation on the vchosts specified. For example, `vchost01,vchost02`. Cannot be used in conjunction with `vchost_ids`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.")] = None,
        _request_timeout: Union[None, Annotated[StrictFloat, Field(gt=0)], Tuple[Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]]] = None
    ) -> ApiResponse[VchostConnectionResponse]:
        """Create a vchost-connection between protocol endpoint and vchost.

        Creates a vchost-connection between protocol endpoint and vchost. Each vchost is associated with a vCenter. Each protocol endpoint is associated with a storage container. A vchost-connection makes the storage container accessible to the vCenter when the vCenter attempts to mount the container. One of `protocol_endpoint_names` or `protocol_endpoint_ids` query parameters and one of `vchost_names` or `vchost_ids` query parameters are required. But if `all_vchosts` is set to `true`, `vchost_names` and `vchost_ids` should not be specified.

        :param all_vchosts: If set to `true`, the storage container represented by the protocol endpoint is accessible to all vchosts. Users should not specify `vchost_ids` or `vchost_names` in the request. If set to `false`, the storage container represented by the protocol endpoint is only accessible to the vchosts that have explicit vchost-connections with the protocol endpoint. Users need to specify `vchost_ids` or `vchost_names` in the request.
        :type all_vchosts: bool
        :param allow_stretched_multi_vchost: If set to `true`, users are allowed to create a new vchost-connection to a stretched container that already has a vchost-connection. In principle, a stretched container can only have one vchost-connection at a time.
        :type allow_stretched_multi_vchost: bool
        :param authorization: Access token (in JWT format) required to use any API endpoint (except `/oauth2`, `/login`, and `/logout`)
        :type authorization: str
        :param protocol_endpoint_names: A comma-separated list of protocol endpoint names. Performs the operation on the protocol endpoints specified. For example, `pe01,pe02`. Cannot be used in conjunction with `protocol_endpoint_ids`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.
        :type protocol_endpoint_names: List[str]
        :param protocol_endpoint_ids: A comma-separated list of protocol endpoint IDs. Performs the operation on the protocol endpoints specified. For example, `peid01,peid02`. Cannot be used in conjunction with `protocol_endpoint_names`. If the list contains more than one value, then `vchost_ids` or `vchost_names` must have exactly one value.
        :type protocol_endpoint_ids: List[str]
        :param x_request_id: Supplied by client during request or generated by server.
        :type x_request_id: str
        :param vchost_ids: A comma-separated list of vchost IDs. Performs the operation on the vchosts specified. For example, `vchostid01,vchostid02`. Cannot be used in conjunction with `vchost_names`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.
        :type vchost_ids: List[str]
        :param vchost_names: A comma-separated list of vchost names. Performs the operation on the vchosts specified. For example, `vchost01,vchost02`. Cannot be used in conjunction with `vchost_ids`. If the list contains more than one value, then `protocol_endpoint_ids` or `protocol_endpoint_names` must have exactly one value.
        :type vchost_names: List[str]
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :return: Returns the result object.
        """ # noqa: E501


        _param = self._api240_vchost_connections_post_serialize(
            all_vchosts = all_vchosts,
            allow_stretched_multi_vchost = allow_stretched_multi_vchost,
            authorization = authorization,
            protocol_endpoint_names = protocol_endpoint_names,
            protocol_endpoint_ids = protocol_endpoint_ids,
            x_request_id = x_request_id,
            vchost_ids = vchost_ids,
            vchost_names = vchost_names,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "VchostConnectionResponse",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    def _api240_vchost_connections_post_serialize(
        self,
        all_vchosts,
        allow_stretched_multi_vchost,
        authorization,
        protocol_endpoint_names,
        protocol_endpoint_ids,
        x_request_id,
        vchost_ids,
        vchost_names,
    ) -> RequestSerialized:

        _collection_formats: Dict[str, str] = {
            'protocol_endpoint_names': 'csv',
            'protocol_endpoint_ids': 'csv',
            'vchost_ids': 'csv',
            'vchost_names': 'csv',
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if all_vchosts is not None:
            
            _query_params.append(('all_vchosts', all_vchosts))
            
        if allow_stretched_multi_vchost is not None:
            
            _query_params.append(('allow_stretched_multi_vchost', allow_stretched_multi_vchost))
            
        if protocol_endpoint_names is not None:
            
            _query_params.append(('protocol_endpoint_names', protocol_endpoint_names))
            
        if protocol_endpoint_ids is not None:
            
            _query_params.append(('protocol_endpoint_ids', protocol_endpoint_ids))
            
        if vchost_ids is not None:
            
            _query_params.append(('vchost_ids', vchost_ids))
            
        if vchost_names is not None:
            
            _query_params.append(('vchost_names', vchost_names))
            
        # process the header parameters
        if authorization is not None:
            _header_params['Authorization'] = authorization
        if x_request_id is not None:
            _header_params['X-Request-ID'] = x_request_id
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
        ]

        return self.api_client.param_serialize(
            method='POST',
            resource_path='/api/2.40/vchost-connections',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats
        )
