# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_40.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_40.models.workload_parameter import WorkloadParameter
from pypureclient.flasharray.FA_2_40.models.workload_placement_recommendation_additional_constraints import WorkloadPlacementRecommendationAdditionalConstraints
from pypureclient.flasharray.FA_2_40.models.workload_placement_recommendation_result import WorkloadPlacementRecommendationResult


class WorkloadPlacementRecommendation(BaseModel):
    """
    WorkloadPlacementRecommendation
    """
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    additional_constraints: Optional[WorkloadPlacementRecommendationAdditionalConstraints] = None
    created: Optional[StrictInt] = Field(default=None, description="The time the recommendation was made, measured in milliseconds since the UNIX epoch.")
    expires: Optional[StrictInt] = Field(default=None, description="The time when recommendation expires, measured in milliseconds since the UNIX epoch.")
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    more_results_available: Optional[StrictBool] = None
    name: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated name. The name cannot be modified and cannot refer to another resource.")
    parameters: Optional[conlist(WorkloadParameter)] = Field(default=None, description="The parameter values to pass to the preset. Value must be supplied for all parameters that do not have a default defined in the preset.")
    placement_names: Optional[conlist(StrictStr)] = None
    preset: Optional[FixedReference] = None
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage progress of the recommendation computation. The percentage is displayed as a decimal value, starting at 0.00 and ending at 1.00.")
    projection_months: Optional[StrictInt] = Field(default=None, description="The number of months to compute the projections. If not specified, defaults to 1 month.")
    results: Optional[conlist(WorkloadPlacementRecommendationResult)] = Field(default=None, description="The results of the recommendation.")
    results_limit: Optional[StrictInt] = Field(default=None, description="The maximum number of results to return. If not specified, defaults to 10 results.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the recommendation. Possible values are `processing`, `completed`, and `failed`.")
    __properties = ["context", "additional_constraints", "created", "expires", "id", "more_results_available", "name", "parameters", "placement_names", "preset", "progress", "projection_months", "results", "results_limit", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "created",
                "expires",
                "id",
                "more_results_available",
                "name",
                "placement_names",
                "progress",
                "results",
                "status",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of additional_constraints
        if _include_in_dict('additional_constraints', include_readonly, excluded_fields, none_fields):
            _dict['additional_constraints'] = self.additional_constraints.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        if _include_in_dict('parameters', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of preset
        if _include_in_dict('preset', include_readonly, excluded_fields, none_fields):
            _dict['preset'] = self.preset.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        if _include_in_dict('results', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.results:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['results'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> WorkloadPlacementRecommendation:
        """Create an instance of WorkloadPlacementRecommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> WorkloadPlacementRecommendation:
        """Create an instance of WorkloadPlacementRecommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkloadPlacementRecommendation.parse_obj(obj)

        _obj = WorkloadPlacementRecommendation.construct(_fields_set=None, **{
            "context": FixedReference.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "additional_constraints": WorkloadPlacementRecommendationAdditionalConstraints.from_dict(obj.get("additional_constraints")) if obj.get("additional_constraints") is not None else None,
            "created": obj.get("created"),
            "expires": obj.get("expires"),
            "id": obj.get("id"),
            "more_results_available": obj.get("more_results_available"),
            "name": obj.get("name"),
            "parameters": [WorkloadParameter.from_dict(_item) for _item in obj.get("parameters")] if obj.get("parameters") is not None else None,
            "placement_names": obj.get("placement_names"),
            "preset": FixedReference.from_dict(obj.get("preset")) if obj.get("preset") is not None else None,
            "progress": obj.get("progress"),
            "projection_months": obj.get("projection_months"),
            "results": [WorkloadPlacementRecommendationResult.from_dict(_item) for _item in obj.get("results")] if obj.get("results") is not None else None,
            "results_limit": obj.get("results_limit"),
            "status": obj.get("status")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

