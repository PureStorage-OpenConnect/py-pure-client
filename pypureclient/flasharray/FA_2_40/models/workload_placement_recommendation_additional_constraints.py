# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_40.models.reference_with_type import ReferenceWithType
from pypureclient.flasharray.FA_2_40.models.workload_placement_recommendation_resource_reference import WorkloadPlacementRecommendationResourceReference
from typing import Optional, Set
from typing_extensions import Self

class WorkloadPlacementRecommendationAdditionalConstraints(BaseModel):
    """
    The list of targets considered for workload placement must satisfy the requirements imposed by the preset. It is also possible to specify additional constraints to further restrict the list of targets for consideration.
    """ # noqa: E501
    targets: Optional[List[ReferenceWithType]] = Field(default=None, description="If specified, only consider these targets when computing placement recommendations. If not specified, the whole fleet is used to compute the recommendation.")
    required_resource_references: Optional[List[WorkloadPlacementRecommendationResourceReference]] = Field(default=None, description="Defines a group of resources. At least one resource from each item should be present on this target for the target to be considered an acceptable candidate for workload placement")
    __properties: ClassVar[List[str]] = ["targets", "required_resource_references"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        if self.targets and (include_readonly or "targets" not in excluded_fields):
            _items = []
            for _item_targets in self.targets:
                if _item_targets:
                    _items.append(_item_targets.to_dict())
            _dict['targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in required_resource_references (list)
        if self.required_resource_references and (include_readonly or "required_resource_references" not in excluded_fields):
            _items = []
            for _item_required_resource_references in self.required_resource_references:
                if _item_required_resource_references:
                    _items.append(_item_required_resource_references.to_dict())
            _dict['required_resource_references'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadPlacementRecommendationAdditionalConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadPlacementRecommendationAdditionalConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "targets": [ReferenceWithType.from_dict(_item) for _item in obj["targets"]] if obj.get("targets") is not None else None,
            "required_resource_references": [WorkloadPlacementRecommendationResourceReference.from_dict(_item) for _item in obj["required_resource_references"]] if obj.get("required_resource_references") is not None else None
        })
        return _obj


