# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List
from pydantic import BaseModel, Field, conlist
from pypureclient.flasharray.FA_2_40.models.reference_with_type import ReferenceWithType


class WorkloadPlacementRecommendationResourceReference(BaseModel):
    """
    Defines a group of resources. At least one of them should be present on this target to use it for computation of a recommendation. Currently only hosts or host groups could be used.
    """
    allowed_values: conlist(ReferenceWithType) = Field(default=..., description="A list of allowed values for the resource reference. For hosts and host groups, each item does not define a specific object on some target, but defines a pattern which should be matched by the target. For example, { `type`: `host`, `name`: `host1` } will match all targets that have a host with name `host1`.")
    __properties = ["allowed_values"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_values (list)
        if _include_in_dict('allowed_values', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.allowed_values:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['allowed_values'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> WorkloadPlacementRecommendationResourceReference:
        """Create an instance of WorkloadPlacementRecommendationResourceReference from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> WorkloadPlacementRecommendationResourceReference:
        """Create an instance of WorkloadPlacementRecommendationResourceReference from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkloadPlacementRecommendationResourceReference.parse_obj(obj)

        _obj = WorkloadPlacementRecommendationResourceReference.construct(_fields_set=None, **{
            "allowed_values": [ReferenceWithType.from_dict(_item) for _item in obj.get("allowed_values")] if obj.get("allowed_values") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

