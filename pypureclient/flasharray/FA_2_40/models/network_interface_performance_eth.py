# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfacePerformanceEth(BaseModel):
    """
    Ethernet network interface statistics.
    """ # noqa: E501
    other_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="This field has been deprecated. Since Purity version 6.6.8, this will always return `null`. The sum of unspecified reception and transmission errors per second.")
    received_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Bytes received per second.")
    received_crc_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Reception CRC errors per second.")
    received_frame_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Received packet frame errors per second.")
    received_packets_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Packets received per second.")
    total_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The sum of all reception and transmission errors per second.")
    transmitted_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Bytes transmitted per second.")
    transmitted_carrier_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Transmission carrier errors per second.")
    transmitted_dropped_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Transmitted packets dropped per second.")
    transmitted_packets_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Packets transmitted per second.")
    flow_control_received_congestion_packets_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of congestion control packets received per second.")
    flow_control_received_discarded_packets_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of received packets that were physically discarded by the NIC per second due to errors or other reasons.")
    flow_control_received_lossless_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Bytes received per second with lossless flow control settings.")
    flow_control_received_pause_frames_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Received pause frames per second.")
    flow_control_transmitted_congestion_packets_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of congestion control packets transmitted per second.")
    flow_control_transmitted_discarded_packets_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Number of transmitted packets that were physically discarded by the NIC per second due to errors or other reasons.")
    flow_control_transmitted_lossless_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Bytes transmitted per second with lossless flow control settings.")
    flow_control_transmitted_pause_frames_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Transmitted pause frames per second.")
    rdma_received_req_cqe_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of times port detected RDMA CQEs with error per second.")
    rdma_received_sequence_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of received RDMA packet sequence errors per second.")
    rdma_transmitted_local_ack_timeout_errors_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The number of times RDMA ack timer expired for QPs per second.")
    __properties: ClassVar[List[str]] = ["other_errors_per_sec", "received_bytes_per_sec", "received_crc_errors_per_sec", "received_frame_errors_per_sec", "received_packets_per_sec", "total_errors_per_sec", "transmitted_bytes_per_sec", "transmitted_carrier_errors_per_sec", "transmitted_dropped_errors_per_sec", "transmitted_packets_per_sec", "flow_control_received_congestion_packets_per_sec", "flow_control_received_discarded_packets_per_sec", "flow_control_received_lossless_bytes_per_sec", "flow_control_received_pause_frames_per_sec", "flow_control_transmitted_congestion_packets_per_sec", "flow_control_transmitted_discarded_packets_per_sec", "flow_control_transmitted_lossless_bytes_per_sec", "flow_control_transmitted_pause_frames_per_sec", "rdma_received_req_cqe_errors_per_sec", "rdma_received_sequence_errors_per_sec", "rdma_transmitted_local_ack_timeout_errors_per_sec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfacePerformanceEth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfacePerformanceEth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "other_errors_per_sec": obj.get("other_errors_per_sec"),
            "received_bytes_per_sec": obj.get("received_bytes_per_sec"),
            "received_crc_errors_per_sec": obj.get("received_crc_errors_per_sec"),
            "received_frame_errors_per_sec": obj.get("received_frame_errors_per_sec"),
            "received_packets_per_sec": obj.get("received_packets_per_sec"),
            "total_errors_per_sec": obj.get("total_errors_per_sec"),
            "transmitted_bytes_per_sec": obj.get("transmitted_bytes_per_sec"),
            "transmitted_carrier_errors_per_sec": obj.get("transmitted_carrier_errors_per_sec"),
            "transmitted_dropped_errors_per_sec": obj.get("transmitted_dropped_errors_per_sec"),
            "transmitted_packets_per_sec": obj.get("transmitted_packets_per_sec"),
            "flow_control_received_congestion_packets_per_sec": obj.get("flow_control_received_congestion_packets_per_sec"),
            "flow_control_received_discarded_packets_per_sec": obj.get("flow_control_received_discarded_packets_per_sec"),
            "flow_control_received_lossless_bytes_per_sec": obj.get("flow_control_received_lossless_bytes_per_sec"),
            "flow_control_received_pause_frames_per_sec": obj.get("flow_control_received_pause_frames_per_sec"),
            "flow_control_transmitted_congestion_packets_per_sec": obj.get("flow_control_transmitted_congestion_packets_per_sec"),
            "flow_control_transmitted_discarded_packets_per_sec": obj.get("flow_control_transmitted_discarded_packets_per_sec"),
            "flow_control_transmitted_lossless_bytes_per_sec": obj.get("flow_control_transmitted_lossless_bytes_per_sec"),
            "flow_control_transmitted_pause_frames_per_sec": obj.get("flow_control_transmitted_pause_frames_per_sec"),
            "rdma_received_req_cqe_errors_per_sec": obj.get("rdma_received_req_cqe_errors_per_sec"),
            "rdma_received_sequence_errors_per_sec": obj.get("rdma_received_sequence_errors_per_sec"),
            "rdma_transmitted_local_ack_timeout_errors_per_sec": obj.get("rdma_transmitted_local_ack_timeout_errors_per_sec")
        })
        return _obj


