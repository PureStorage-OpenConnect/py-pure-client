# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_40.models.reference_no_id import ReferenceNoId
from pypureclient.flasharray.FA_2_40.models.reference_with_type import ReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class Dns(BaseModel):
    """
    Dns
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    domain: Optional[StrictStr] = Field(default=None, description="The domain suffix to be appended by the appliance when performing DNS lookups.")
    nameservers: Optional[List[StrictStr]] = Field(default=None, description="The list of DNS servers either in the form of IP addresses or HTTPS endpoints. Domain names in HTTPS endpoints are not supported. IP addresses must be used instead. If nameservers begin with `https://`, then DNS queries will be performed over HTTPS. Otherwise, unencrypted DNS queries will be performed. Using a combination of nameservers that begin with `https://` and that do not begin with `https://` is not supported. If servers are specified with `https://` one of `ca_certificate` and `ca_certificate_group` parameters must be set.")
    ca_certificate: Optional[ReferenceWithType] = Field(default=None, description="A reference to the `certificate` to use for validating nameservers with HTTPS connections. This property is mutually exclusive with `ca_certificate_group` property and may only be configured when nameservers begin with HTTPS.")
    ca_certificate_group: Optional[ReferenceWithType] = Field(default=None, description="A reference to the `certificate group` to use for validating nameservers with HTTPS connections. This property is mutually exclusive with `ca_certificate` property and may only be configured when nameservers begin with HTTPS.")
    services: Optional[List[StrictStr]] = Field(default=None, description="The list of services utilizing the DNS configuration.")
    source: Optional[ReferenceNoId] = Field(default=None, description="The network interface used for communication with the DNS server.")
    __properties: ClassVar[List[str]] = ["name", "domain", "nameservers", "ca_certificate", "ca_certificate_group", "services", "source"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ca_certificate
        if self.ca_certificate and (include_readonly or "ca_certificate" not in excluded_fields):
            _dict['ca_certificate'] = self.ca_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ca_certificate_group
        if self.ca_certificate_group and (include_readonly or "ca_certificate_group" not in excluded_fields):
            _dict['ca_certificate_group'] = self.ca_certificate_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source and (include_readonly or "source" not in excluded_fields):
            _dict['source'] = self.source.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Dns from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Dns from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "domain": obj.get("domain"),
            "nameservers": obj.get("nameservers"),
            "ca_certificate": ReferenceWithType.from_dict(obj["ca_certificate"]) if obj.get("ca_certificate") is not None else None,
            "ca_certificate_group": ReferenceWithType.from_dict(obj["ca_certificate_group"]) if obj.get("ca_certificate_group") is not None else None,
            "services": obj.get("services"),
            "source": ReferenceNoId.from_dict(obj["source"]) if obj.get("source") is not None else None
        })
        return _obj


