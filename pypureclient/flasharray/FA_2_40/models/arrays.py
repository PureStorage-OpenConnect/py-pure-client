# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.40
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_40 import models

class Arrays(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'context': 'FixedReference',
        'os': 'str',
        'scsi_timeout': 'int',
        'parity': 'float',
        'banner': 'str',
        'console_lock_enabled': 'bool',
        'eradication_config': 'EradicationConfig',
        'ntp_servers': 'list[str]',
        'as_of': 'int',
        'time_zone': 'str',
        'version': 'str',
        'space': 'Space',
        'capacity': 'int',
        'encryption': 'ArrayEncryption',
        'ntp_symmetric_key': 'str',
        'idle_timeout': 'int'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'context': 'context',
        'os': 'os',
        'scsi_timeout': 'scsi_timeout',
        'parity': 'parity',
        'banner': 'banner',
        'console_lock_enabled': 'console_lock_enabled',
        'eradication_config': 'eradication_config',
        'ntp_servers': 'ntp_servers',
        'as_of': '_as_of',
        'time_zone': 'time_zone',
        'version': 'version',
        'space': 'space',
        'capacity': 'capacity',
        'encryption': 'encryption',
        'ntp_symmetric_key': 'ntp_symmetric_key',
        'idle_timeout': 'idle_timeout'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        context=None,  # type: models.FixedReference
        os=None,  # type: str
        scsi_timeout=None,  # type: int
        parity=None,  # type: float
        banner=None,  # type: str
        console_lock_enabled=None,  # type: bool
        eradication_config=None,  # type: models.EradicationConfig
        ntp_servers=None,  # type: List[str]
        as_of=None,  # type: int
        time_zone=None,  # type: str
        version=None,  # type: str
        space=None,  # type: models.Space
        capacity=None,  # type: int
        encryption=None,  # type: models.ArrayEncryption
        ntp_symmetric_key=None,  # type: str
        idle_timeout=None,  # type: int
    ):
        """
        Keyword args:
            name (str): A user-specified name. The name must be locally unique and can be changed. 
            id (str): A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource. 
            context (FixedReference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
            os (str): Specifies the operating system. Valid values are `Purity`, `Purity//FA`, and `Purity//FB`. 
            scsi_timeout (int): The SCSI timeout. If not specified, defaults to `60s`. If the user does not have sufficient access, this field will return `null`. 
            parity (float): A representation of data redundancy on the array. Data redundancy is rebuilt automatically by the system whenever parity is less than `1.0`. If the user does not have sufficient access, this field will return `null`. 
            banner (str)
            console_lock_enabled (bool): If `true`, console lock is enabled for the array. If the user does not have sufficient access, this field will return `null`. 
            eradication_config (EradicationConfig)
            ntp_servers (list[str]): NTP Servers. If the user does not have sufficient access, this field will return `null`. 
            as_of (int): The time in milliseconds since UNIX epoch. 
            time_zone (str): The time zone of the array. 
            version (str)
            space (Space)
            capacity (int): The usable capacity in bytes. If the user does not have sufficient access, this field will return `null`. 
            encryption (ArrayEncryption)
            ntp_symmetric_key (str): The text of ntp symmetric authentication key. Supported formats include a hex-encoded string no longer than 64 characters, or an ASCII string no longer than 20 characters, excluding \"#\". Any configured key will be masked as \"****\" on return. If the user does not have sufficient access, this field will return `null`. 
            idle_timeout (int): The idle timeout in milliseconds. Valid values include `0` and any multiple of `60000` in the range of `300000` and `10800000`. Any other values are rounded down to the nearest multiple of `60000`. 
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if context is not None:
            self.context = context
        if os is not None:
            self.os = os
        if scsi_timeout is not None:
            self.scsi_timeout = scsi_timeout
        if parity is not None:
            self.parity = parity
        if banner is not None:
            self.banner = banner
        if console_lock_enabled is not None:
            self.console_lock_enabled = console_lock_enabled
        if eradication_config is not None:
            self.eradication_config = eradication_config
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        if as_of is not None:
            self.as_of = as_of
        if time_zone is not None:
            self.time_zone = time_zone
        if version is not None:
            self.version = version
        if space is not None:
            self.space = space
        if capacity is not None:
            self.capacity = capacity
        if encryption is not None:
            self.encryption = encryption
        if ntp_symmetric_key is not None:
            self.ntp_symmetric_key = ntp_symmetric_key
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Arrays`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Arrays`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Arrays`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Arrays`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(Arrays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Arrays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
