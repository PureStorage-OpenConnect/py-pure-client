# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_40.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_40.models.reference import Reference
from pypureclient.flasharray.FA_2_40.models.reference_with_type import ReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class TargetProtectionGroup(BaseModel):
    """
    TargetProtectionGroup
    """ # noqa: E501
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    group: Optional[Reference] = None
    member: Optional[ReferenceWithType] = None
    allowed: Optional[StrictBool] = Field(default=None, description="If set to `true`, the target array or pod allows the source array to replicate protection group data to the target. If set to `false`, the target array or pod does not allow the source array to replicate protection group data to the target.")
    status: Optional[StrictStr] = Field(default=None, description="The replication status of the target. Valid values are `replicating`, `suspended`, and `disallowed`. If `allowed` is `true` and protection group data is replicating to the target, `status` will display `replicating`. If `allowed` is `true`, but replication is suspended due to the target being demoted, linked, stretched, etc., `status` will display `suspended`. Replication will be automatically resumed if the target becomes promoted or local only again. If `allowed` is `false`, `status` will display `disallowed`.")
    __properties: ClassVar[List[str]] = ["context", "group", "member", "allowed", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group and (include_readonly or "group" not in excluded_fields):
            _dict['group'] = self.group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member and (include_readonly or "member" not in excluded_fields):
            _dict['member'] = self.member.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TargetProtectionGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TargetProtectionGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "group": Reference.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "member": ReferenceWithType.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "allowed": obj.get("allowed"),
            "status": obj.get("status")
        })
        return _obj


