# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flasharray.FA_2_40.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_40.models.priority_adjustment import PriorityAdjustment
from pypureclient.flasharray.FA_2_40.models.protocol_endpoint import ProtocolEndpoint
from pypureclient.flasharray.FA_2_40.models.qos import Qos
from pypureclient.flasharray.FA_2_40.models.reference import Reference
from pypureclient.flasharray.FA_2_40.models.volume_space_common import VolumeSpaceCommon
from pypureclient.flasharray.FA_2_40.models.workload_configuration_reference import WorkloadConfigurationReference


class Volume(BaseModel):
    """
    Volume
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    connection_count: Optional[StrictInt] = Field(default=None, description="The total number of hosts and host groups connected to the volume.")
    created: Optional[StrictInt] = Field(default=None, description="The volume creation time, measured in milliseconds since the UNIX epoch.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the volume has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed volume is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed volume can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the volume is permanently eradicated and can no longer be recovered.")
    host_encryption_key_status: Optional[StrictStr] = Field(default=None, description="The host encryption key status for this volume. Values include `none`, `detected`, and `fetched`.")
    priority_adjustment: Optional[PriorityAdjustment] = Field(default=None, description="Priority adjustment operator and value.")
    provisioned: Optional[StrictInt] = Field(default=None, description="The virtual size of the volume as a multiple of 512, measured in bytes. The maximum size is 4503599627370496 (4PB).")
    qos: Optional[Qos] = Field(default=None, description="Displays QoS limit information.")
    serial: Optional[StrictStr] = Field(default=None, description="A globally unique serial number generated by the FlashArray when the volume is created.")
    space: Optional[VolumeSpaceCommon] = Field(default=None, description="Displays size and space consumption information.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed volume is permanently eradicated, measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed volume can be recovered by setting `destroyed=false`.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    pod: Optional[Reference] = Field(default=None, description="A reference to the pod.")
    priority: Optional[StrictInt] = Field(default=None, description="The current priority value. Priority is calculated by combining all applicable relative `priority_adjustment` values or taking the exact value if the volume has an absolute `priority_adjustment` (specified by an `=` `priority_adjustment_operator`).")
    promotion_status: Optional[StrictStr] = Field(default=None, description="Current promotion status of a volume. Values include `promoted` and `demoted`. A status of `promoted` indicates that the volume has been promoted and can accept write requests from hosts. This is the default status for a volume when it is created. A status of `demoted` indicates that the volume has been demoted and no longer accepts write requests.")
    protocol_endpoint: Optional[ProtocolEndpoint] = Field(default=None, description="Properties that are specific to volumes of `subtype=protocol_endpoint`.")
    requested_promotion_state: Optional[StrictStr] = Field(default=None, description="Values include `promoted` and `demoted`. Patch `requested_promotion_state` to `demoted` to demote the volume so that the volume stops accepting write requests. Patch `requested_promotion_state` to `promoted` to promote the volume so that the volume starts accepting write requests.")
    source: Optional[FixedReference] = Field(default=None, description="A reference to the originating volume as a result of a volume copy.")
    subtype: Optional[StrictStr] = Field(default=None, description="The type of volume. Values include `protocol_endpoint` and `regular`.")
    volume_group: Optional[Reference] = Field(default=None, description="A reference to the volume group.")
    workload: Optional[WorkloadConfigurationReference] = Field(default=None, description="A reference to the workload that is managing this volume. The `name` may show as an empty string briefly after controller failover.")
    __properties = ["id", "name", "connection_count", "created", "destroyed", "host_encryption_key_status", "priority_adjustment", "provisioned", "qos", "serial", "space", "time_remaining", "context", "pod", "priority", "promotion_status", "protocol_endpoint", "requested_promotion_state", "source", "subtype", "volume_group", "workload"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "connection_count",
                "created",
                "host_encryption_key_status",
                "serial",
                "time_remaining",
                "priority",
                "subtype",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of priority_adjustment
        if _include_in_dict('priority_adjustment', include_readonly, excluded_fields, none_fields):
            _dict['priority_adjustment'] = self.priority_adjustment.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of qos
        if _include_in_dict('qos', include_readonly, excluded_fields, none_fields):
            _dict['qos'] = self.qos.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of space
        if _include_in_dict('space', include_readonly, excluded_fields, none_fields):
            _dict['space'] = self.space.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of pod
        if _include_in_dict('pod', include_readonly, excluded_fields, none_fields):
            _dict['pod'] = self.pod.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of protocol_endpoint
        if _include_in_dict('protocol_endpoint', include_readonly, excluded_fields, none_fields):
            _dict['protocol_endpoint'] = self.protocol_endpoint.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of source
        if _include_in_dict('source', include_readonly, excluded_fields, none_fields):
            _dict['source'] = self.source.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of volume_group
        if _include_in_dict('volume_group', include_readonly, excluded_fields, none_fields):
            _dict['volume_group'] = self.volume_group.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of workload
        if _include_in_dict('workload', include_readonly, excluded_fields, none_fields):
            _dict['workload'] = self.workload.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Volume:
        """Create an instance of Volume from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Volume:
        """Create an instance of Volume from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Volume.parse_obj(obj)

        _obj = Volume.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "connection_count": obj.get("connection_count"),
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "host_encryption_key_status": obj.get("host_encryption_key_status"),
            "priority_adjustment": PriorityAdjustment.from_dict(obj.get("priority_adjustment")) if obj.get("priority_adjustment") is not None else None,
            "provisioned": obj.get("provisioned"),
            "qos": Qos.from_dict(obj.get("qos")) if obj.get("qos") is not None else None,
            "serial": obj.get("serial"),
            "space": VolumeSpaceCommon.from_dict(obj.get("space")) if obj.get("space") is not None else None,
            "time_remaining": obj.get("time_remaining"),
            "context": FixedReference.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "pod": Reference.from_dict(obj.get("pod")) if obj.get("pod") is not None else None,
            "priority": obj.get("priority"),
            "promotion_status": obj.get("promotion_status"),
            "protocol_endpoint": ProtocolEndpoint.from_dict(obj.get("protocol_endpoint")) if obj.get("protocol_endpoint") is not None else None,
            "requested_promotion_state": obj.get("requested_promotion_state"),
            "source": FixedReference.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "subtype": obj.get("subtype"),
            "volume_group": Reference.from_dict(obj.get("volume_group")) if obj.get("volume_group") is not None else None,
            "workload": WorkloadConfigurationReference.from_dict(obj.get("workload")) if obj.get("workload") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

