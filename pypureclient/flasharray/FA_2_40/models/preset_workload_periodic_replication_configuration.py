# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_40.models.preset_workload_snapshot_rule import PresetWorkloadSnapshotRule
from pypureclient.flasharray.FA_2_40.models.reference_with_type import ReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class PresetWorkloadPeriodicReplicationConfiguration(BaseModel):
    """
    PresetWorkloadPeriodicReplicationConfiguration
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the periodic replication configuration, by which other configuration objects in the preset can reference it. Name must be unique across all configuration objects in the preset.")
    remote_targets: Annotated[List[ReferenceWithType], Field(min_length=1, max_length=1)] = Field(description="The remote targets to which snapshots may be replicated.")
    rules: Annotated[List[PresetWorkloadSnapshotRule], Field(min_length=1, max_length=2)] = Field(description="Rules describe the frequency and retention of snapshots taken by the configuration.")
    __properties: ClassVar[List[str]] = ["name", "remote_targets", "rules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in remote_targets (list)
        if self.remote_targets and (include_readonly or "remote_targets" not in excluded_fields):
            _items = []
            for _item_remote_targets in self.remote_targets:
                if _item_remote_targets:
                    _items.append(_item_remote_targets.to_dict())
            _dict['remote_targets'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        if self.rules and (include_readonly or "rules" not in excluded_fields):
            _items = []
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresetWorkloadPeriodicReplicationConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresetWorkloadPeriodicReplicationConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "remote_targets": [ReferenceWithType.from_dict(_item) for _item in obj["remote_targets"]] if obj.get("remote_targets") is not None else None,
            "rules": [PresetWorkloadSnapshotRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None
        })
        return _obj


