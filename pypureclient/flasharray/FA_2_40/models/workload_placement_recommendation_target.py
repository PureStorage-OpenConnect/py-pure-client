# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_40.models.workload_placement_recommendation_target_capacity_used_projections import WorkloadPlacementRecommendationTargetCapacityUsedProjections
from pypureclient.flasharray.FA_2_40.models.workload_placement_recommendation_target_load_projections import WorkloadPlacementRecommendationTargetLoadProjections
from pypureclient.flasharray.FA_2_40.models.workload_placement_recommendation_warning import WorkloadPlacementRecommendationWarning
from typing import Optional, Set
from typing_extensions import Self

class WorkloadPlacementRecommendationTarget(BaseModel):
    """
    Data for a target in a workload placement recommendation. Target is a FlashArray, which may be used for workload placement.
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name, such as volume name, pod name, snapshot name, and so on.")
    resource_type: Optional[StrictStr] = Field(default=None, description="Type of the object (full name of the endpoint). Valid values are `hosts`, `host-groups`, `network-interfaces`, `pods`, `ports`, `pod-replica-links`, `subnets`, `volumes`, `volume-snapshots`, `volume-groups`, `directories`, `policies/nfs`, `policies/smb`, and `policies/snapshot`, etc.")
    model: Optional[StrictStr] = Field(default=None, description="The model of the target. For example, `FA-X20R2`.")
    capacity: Optional[StrictInt] = Field(default=None, description="The usable capacity of the target, measured in bytes.")
    capacity_used_projections: Optional[WorkloadPlacementRecommendationTargetCapacityUsedProjections] = None
    load_projections: Optional[WorkloadPlacementRecommendationTargetLoadProjections] = None
    warnings: Optional[List[WorkloadPlacementRecommendationWarning]] = Field(default=None, description="The warnings for the target.")
    __properties: ClassVar[List[str]] = ["id", "name", "resource_type", "model", "capacity", "capacity_used_projections", "load_projections", "warnings"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of capacity_used_projections
        if self.capacity_used_projections and (include_readonly or "capacity_used_projections" not in excluded_fields):
            _dict['capacity_used_projections'] = self.capacity_used_projections.to_dict()
        # override the default output from pydantic by calling `to_dict()` of load_projections
        if self.load_projections and (include_readonly or "load_projections" not in excluded_fields):
            _dict['load_projections'] = self.load_projections.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        if self.warnings and (include_readonly or "warnings" not in excluded_fields):
            _items = []
            for _item_warnings in self.warnings:
                if _item_warnings:
                    _items.append(_item_warnings.to_dict())
            _dict['warnings'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadPlacementRecommendationTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadPlacementRecommendationTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "resource_type": obj.get("resource_type"),
            "model": obj.get("model"),
            "capacity": obj.get("capacity"),
            "capacity_used_projections": WorkloadPlacementRecommendationTargetCapacityUsedProjections.from_dict(obj["capacity_used_projections"]) if obj.get("capacity_used_projections") is not None else None,
            "load_projections": WorkloadPlacementRecommendationTargetLoadProjections.from_dict(obj["load_projections"]) if obj.get("load_projections") is not None else None,
            "warnings": [WorkloadPlacementRecommendationWarning.from_dict(_item) for _item in obj["warnings"]] if obj.get("warnings") is not None else None
        })
        return _obj


