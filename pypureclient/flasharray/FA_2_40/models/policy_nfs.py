# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_40.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_40.models.policy_nfs_policy_mapping import PolicyNfsPolicyMapping
from pypureclient.flasharray.FA_2_40.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class PolicyNfs(BaseModel):
    """
    PolicyNfs
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed policy is permanently eradicated. Once the `time_remaining` period has elapsed, the policy is permanently eradicated and can no longer be recovered.")
    enabled: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy is enabled.")
    pod: Optional[Reference] = Field(default=None, description="A reference to the pod.")
    policy_type: Optional[StrictStr] = Field(default=None, description="The type of policy. Valid values include `autodir`, `nfs`, `smb`, `snapshot`, and `quota`.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left, measured in milliseconds, until the destroyed policy is permanently eradicated.")
    user_mapping_enabled: Optional[StrictBool] = Field(default=None, description="Returns `true` if user mapping is enabled on the policy. If `true`, FlashArray queries the joined AD/OpenLDAP server to find the user corresponding to the incoming UID. If `false`, users are defined by UID/GID pair.")
    nfs_version: Optional[List[StrictStr]] = Field(default=None, description="NFS protocol version allowed for the export. If NFS version is allowed for all rules of the policy it is cascaded exactly as: `nfsv3`, `nfsv4`. If the NFS version is supported partially by the rules of the policy it will be cascaded as: `nfsv3-partial`, `nfsv4-partial`. If the NFS version is not supported by any rules or there are no rules of the policy then it will not be in the result array. If there are no rules in the policy the array will be empty. If there are two rules, one supporting `nfsv3` and the other supporting `nfsv3` and `nfsv4` then the array would contain `nfsv3` and `nfsv4-partial`.")
    security: Optional[List[StrictStr]] = Field(default=None, description="The security flavors to use for accessing files on this mount point. Values include `auth_sys`, `auth_sys-partial`, `krb5`, `krb5-partial`, `krb5i`, and `krb5p`. If the server does not support the requested flavor, the mount operation fails. If `auth_sys`, the client is trusted to specify the identity of the user. If `krb5`, cryptographic proof of the identity of the user is provided in each RPC request. Note that additional configuration besides adding this mount option is required in order to enable Kerberos security. If `krb5i`, integrity checking is added to krb5, to ensure the data has not been tampered with. If `krb5p`, integrity checking and encryption are added to `krb5`. This is the most secure setting, but it also involves the most performance overhead. If security option is allowed for all rules of the policy, it is cascaded exactly. Examples: `auth_sys`, `krb5`. If the security option is supported partially by the rules of the policy, it will be cascaded with the `-partial` suffix. Examples include: `auth_sys-partial`, `krb5-partial`. If the security option is not supported by any rules or there are no rules of the policy, then it will not be in the result array. If there are no rules in the policy the array of values will be empty. If there are two rules, one supporting auth_sys and the other supporting auth_sys and krb5 the array of values would contain `auth_sys` and `krb5-partial`.")
    policy_mapping: Optional[PolicyNfsPolicyMapping] = Field(default=None, description="Specifies the mapping of this policy across a pod replica link. If this policy is not inside a pod of a pod replica link, mapping is `null`.")
    __properties: ClassVar[List[str]] = ["id", "name", "context", "destroyed", "enabled", "pod", "policy_type", "time_remaining", "user_mapping_enabled", "nfs_version", "security", "policy_mapping"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "policy_type",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pod
        if self.pod and (include_readonly or "pod" not in excluded_fields):
            _dict['pod'] = self.pod.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy_mapping
        if self.policy_mapping and (include_readonly or "policy_mapping" not in excluded_fields):
            _dict['policy_mapping'] = self.policy_mapping.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyNfs from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyNfs from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "destroyed": obj.get("destroyed"),
            "enabled": obj.get("enabled"),
            "pod": Reference.from_dict(obj["pod"]) if obj.get("pod") is not None else None,
            "policy_type": obj.get("policy_type"),
            "time_remaining": obj.get("time_remaining"),
            "user_mapping_enabled": obj.get("user_mapping_enabled"),
            "nfs_version": obj.get("nfs_version"),
            "security": obj.get("security"),
            "policy_mapping": PolicyNfsPolicyMapping.from_dict(obj["policy_mapping"]) if obj.get("policy_mapping") is not None else None
        })
        return _obj


