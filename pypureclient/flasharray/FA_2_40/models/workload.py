# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.40
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_40.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_40.models.workload_preset import WorkloadPreset
from typing import Optional, Set
from typing_extensions import Self

class Workload(BaseModel):
    """
    Workload
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    created: Optional[StrictInt] = Field(default=None, description="The workload creation time, measured in milliseconds since the UNIX epoch.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the workload has been destroyed and is pending eradication. The `time_remaining` displays the amount of time left until the destroyed workload is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed workload can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the workload is permanently eradicated and can no longer be recovered.")
    preset: Optional[WorkloadPreset] = Field(default=None, description="A reference to the preset the workload was deployed from. If the preset has since been destroyed, `name` will be `null`.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the workload. Supported values are `creating`, `ready`, `destroying`, `destroyed`, `eradicating` and `recovering`.")
    status_details: Optional[List[StrictStr]] = Field(default=None, description="Additional information about the workload status. For example, if the workload status is `creating`, status details might describe what resources are currently being created.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed workload is permanently eradicated, measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed workload can be recovered by setting `destroyed=false`.")
    __properties: ClassVar[List[str]] = ["id", "name", "context", "created", "destroyed", "preset", "status", "status_details", "time_remaining"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created",
            "destroyed",
            "status",
            "status_details",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preset
        if self.preset and (include_readonly or "preset" not in excluded_fields):
            _dict['preset'] = self.preset.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Workload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Workload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "preset": WorkloadPreset.from_dict(obj["preset"]) if obj.get("preset") is not None else None,
            "status": obj.get("status"),
            "status_details": obj.get("status_details"),
            "time_remaining": obj.get("time_remaining")
        })
        return _obj


