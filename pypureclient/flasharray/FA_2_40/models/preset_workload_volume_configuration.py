# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.40
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_40 import models

class PresetWorkloadVolumeConfiguration(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'periodic_replication_configurations': 'list[str]',
        'count': 'str',
        'name': 'str',
        'placement_configurations': 'list[str]',
        'provisioned_size': 'str',
        'snapshot_configurations': 'list[str]'
    }

    attribute_map = {
        'periodic_replication_configurations': 'periodic_replication_configurations',
        'count': 'count',
        'name': 'name',
        'placement_configurations': 'placement_configurations',
        'provisioned_size': 'provisioned_size',
        'snapshot_configurations': 'snapshot_configurations'
    }

    required_args = {
        'count',
        'name',
        'placement_configurations',
        'provisioned_size',
    }

    def __init__(
        self,
        count,  # type: str
        name,  # type: str
        placement_configurations,  # type: List[str]
        provisioned_size,  # type: str
        periodic_replication_configurations=None,  # type: List[str]
        snapshot_configurations=None,  # type: List[str]
    ):
        """
        Keyword args:
            periodic_replication_configurations (list[str]): The names of the periodic replication configurations to apply to the volumes. 
            count (str, required): The number of volumes to provision. Supports parameterization.
            name (str, required): The name of the volume configuration, by which other configuration objects in the preset can reference it. Name must be unique across all configuration objects in the preset. 
            placement_configurations (list[str], required): The names of the placement configurations with which to associate the volumes. 
            provisioned_size (str, required): The virtual size of each volume. Measured in bytes and must be a multiple of 512. The maximum size is 4503599627370496 (4PB). Supports parameterization. 
            snapshot_configurations (list[str]): The names of the snapshot configurations to apply to the volumes. 
        """
        if periodic_replication_configurations is not None:
            self.periodic_replication_configurations = periodic_replication_configurations
        self.count = count
        self.name = name
        self.placement_configurations = placement_configurations
        self.provisioned_size = provisioned_size
        if snapshot_configurations is not None:
            self.snapshot_configurations = snapshot_configurations

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadVolumeConfiguration`".format(key))
        if key == "count" and value is None:
            raise ValueError("Invalid value for `count`, must not be `None`")
        if key == "name" and value is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if key == "placement_configurations" and value is None:
            raise ValueError("Invalid value for `placement_configurations`, must not be `None`")
        if key == "provisioned_size" and value is None:
            raise ValueError("Invalid value for `provisioned_size`, must not be `None`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadVolumeConfiguration`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadVolumeConfiguration`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadVolumeConfiguration`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(PresetWorkloadVolumeConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresetWorkloadVolumeConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
