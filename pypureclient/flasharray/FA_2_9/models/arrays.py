# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_9.models.array_encryption import ArrayEncryption
from pypureclient.flasharray.FA_2_9.models.eradication_config import EradicationConfig
from pypureclient.flasharray.FA_2_9.models.space import Space


class Arrays(BaseModel):
    """
    Arrays
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    banner: Optional[StrictStr] = None
    capacity: Optional[StrictInt] = Field(default=None, description="The usable capacity in bytes. If the user does not have sufficient access, this field will return `null`.")
    console_lock_enabled: Optional[StrictBool] = Field(default=None, description="If `true`, console lock is enabled for the array. If the user does not have sufficient access, this field will return `null`.")
    encryption: Optional[ArrayEncryption] = None
    eradication_config: Optional[EradicationConfig] = None
    idle_timeout: Optional[StrictInt] = Field(default=None, description="The idle timeout in milliseconds. Valid values include `0` and any multiple of `60000` in the range of `300000` and `10800000`. Any other values are rounded down to the nearest multiple of `60000`.")
    ntp_servers: Optional[conlist(StrictStr)] = Field(default=None, description="NTP Servers. If the user does not have sufficient access, this field will return `null`.")
    os: Optional[StrictStr] = Field(default=None, description="Specifies the operating system. Valid values are `Purity`, `Purity//FA`, and `Purity//FB`.")
    parity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A representation of data redundancy on the array. Data redundancy is rebuilt automatically by the system whenever parity is less than `1.0`. If the user does not have sufficient access, this field will return `null`.")
    scsi_timeout: Optional[StrictInt] = Field(default=None, description="The SCSI timeout. If not specified, defaults to `60s`. If the user does not have sufficient access, this field will return `null`.")
    space: Optional[Space] = None
    version: Optional[StrictStr] = None
    __properties = ["id", "name", "banner", "capacity", "console_lock_enabled", "encryption", "eradication_config", "idle_timeout", "ntp_servers", "os", "parity", "scsi_timeout", "space", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "capacity",
                "os",
                "parity",
                "version",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of encryption
        if _include_in_dict('encryption', include_readonly, excluded_fields, none_fields):
            _dict['encryption'] = self.encryption.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of eradication_config
        if _include_in_dict('eradication_config', include_readonly, excluded_fields, none_fields):
            _dict['eradication_config'] = self.eradication_config.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of space
        if _include_in_dict('space', include_readonly, excluded_fields, none_fields):
            _dict['space'] = self.space.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Arrays:
        """Create an instance of Arrays from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Arrays:
        """Create an instance of Arrays from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Arrays.parse_obj(obj)

        _obj = Arrays.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "banner": obj.get("banner"),
            "capacity": obj.get("capacity"),
            "console_lock_enabled": obj.get("console_lock_enabled"),
            "encryption": ArrayEncryption.from_dict(obj.get("encryption")) if obj.get("encryption") is not None else None,
            "eradication_config": EradicationConfig.from_dict(obj.get("eradication_config")) if obj.get("eradication_config") is not None else None,
            "idle_timeout": obj.get("idle_timeout"),
            "ntp_servers": obj.get("ntp_servers"),
            "os": obj.get("os"),
            "parity": obj.get("parity"),
            "scsi_timeout": obj.get("scsi_timeout"),
            "space": Space.from_dict(obj.get("space")) if obj.get("space") is not None else None,
            "version": obj.get("version")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

