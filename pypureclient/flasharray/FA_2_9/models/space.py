# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, confloat, conint


class Space(BaseModel):
    """
    Space
    """
    data_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ratio of mapped sectors within a volume versus the amount of physical space the data occupies after data compression and deduplication. The data reduction ratio does not include thin provisioning savings. For example, a data reduction ratio of 5&#58;1 means that for every 5 MB the host writes to the array, 1 MB is stored on the array's flash modules.")
    shared: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The physical space occupied by deduplicated data, meaning that the space is shared with other volumes and snapshots as a result of data deduplication. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by data that is not unique to a specific volume, managed directory, or snapshot, measured in bytes.")
    snapshots: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The physical space occupied by data unique to one or more snapshots. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by data unique to one or more snapshots, measured in bytes.")
    system: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The physical space occupied by internal array metadata. Measured in bytes.")
    thin_provisioning: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(default=None, description="The percentage of volume sectors that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.")
    total_physical: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The total physical space occupied by system, shared space, volume, and snapshot data. Measured in bytes.")
    total_provisioned: Optional[conint(strict=True, ge=0)] = Field(default=None, description="For a single volume, the provisioned size of the volume. For all other resources, the total provisioned size of all volumes that are connected to or are inside the resource. Represents storage capacity reported to hosts. Measured in bytes.")
    total_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ratio of provisioned sectors within a volume versus the amount of physical space the data occupies after reduction via data compression and deduplication and with thin provisioning savings. Total reduction is data reduction with thin provisioning savings. For example, a total reduction ratio of 10&#58;1 means that for every 10 MB of provisioned space, 1 MB is stored on the array's flash modules.")
    unique: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The unique physical space occupied by customer data. Unique physical space does not include shared space, snapshots, and internal array metadata. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by unique customer data, measured in bytes. Unique data does not include shared space, snapshots, and internal array metadata.")
    virtual: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The amount of logically written data that a volume or a snapshot references. Measured in bytes.")
    __properties = ["data_reduction", "shared", "snapshots", "system", "thin_provisioning", "total_physical", "total_provisioned", "total_reduction", "unique", "virtual"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "data_reduction",
                "shared",
                "snapshots",
                "system",
                "thin_provisioning",
                "total_physical",
                "total_provisioned",
                "total_reduction",
                "unique",
                "virtual",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Space:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Space:
        """Create an instance of Space from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Space.parse_obj(obj)

        _obj = Space.construct(_fields_set=None, **{
            "data_reduction": obj.get("data_reduction"),
            "shared": obj.get("shared"),
            "snapshots": obj.get("snapshots"),
            "system": obj.get("system"),
            "thin_provisioning": obj.get("thin_provisioning"),
            "total_physical": obj.get("total_physical"),
            "total_provisioned": obj.get("total_provisioned"),
            "total_reduction": obj.get("total_reduction"),
            "unique": obj.get("unique"),
            "virtual": obj.get("virtual")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

