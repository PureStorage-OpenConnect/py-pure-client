# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_4.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_4.models.replication_performance_with_total import ReplicationPerformanceWithTotal
from pypureclient.flasharray.FA_2_4.models.resource import Resource
from typing import Optional, Set
from typing_extensions import Self

class PodPerformanceReplicationByArray(BaseModel):
    """
    PodPerformanceReplicationByArray
    """ # noqa: E501
    continuous_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second for continuous replication. The continuous replication feature is used for disaster recovery on FlashArray and provides a recovery point objective (RPO) of significantly less than 30s.")
    resync_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second during resync replication. Resync replication is the mechanism to bring two arrays into sync. This may occur during an initial pod stretch, or, in case of outage, when two arrays reestablish connection. After the connection is restored, the array that was online starts replicating pod data to its peer array until the pod is once again in sync.")
    sync_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second for synchronous replication.")
    periodic_bytes_per_sec: Optional[ReplicationPerformanceWithTotal] = Field(default=None, description="Total bytes transmitted or received per second for periodic replication.")
    total_bytes_per_sec: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Total bytes transmitted and received per second for all types of replication.")
    pod: Optional[FixedReference] = Field(default=None, description="Reference to the pod that the performance data is associated with.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since the UNIX epoch.")
    array: Optional[Resource] = Field(default=None, description="Array that shares this pod.")
    __properties: ClassVar[List[str]] = ["continuous_bytes_per_sec", "resync_bytes_per_sec", "sync_bytes_per_sec", "periodic_bytes_per_sec", "total_bytes_per_sec", "pod", "time", "array"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "total_bytes_per_sec",
            "time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of continuous_bytes_per_sec
        if self.continuous_bytes_per_sec and (include_readonly or "continuous_bytes_per_sec" not in excluded_fields):
            _dict['continuous_bytes_per_sec'] = self.continuous_bytes_per_sec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of resync_bytes_per_sec
        if self.resync_bytes_per_sec and (include_readonly or "resync_bytes_per_sec" not in excluded_fields):
            _dict['resync_bytes_per_sec'] = self.resync_bytes_per_sec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sync_bytes_per_sec
        if self.sync_bytes_per_sec and (include_readonly or "sync_bytes_per_sec" not in excluded_fields):
            _dict['sync_bytes_per_sec'] = self.sync_bytes_per_sec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of periodic_bytes_per_sec
        if self.periodic_bytes_per_sec and (include_readonly or "periodic_bytes_per_sec" not in excluded_fields):
            _dict['periodic_bytes_per_sec'] = self.periodic_bytes_per_sec.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pod
        if self.pod and (include_readonly or "pod" not in excluded_fields):
            _dict['pod'] = self.pod.to_dict()
        # override the default output from pydantic by calling `to_dict()` of array
        if self.array and (include_readonly or "array" not in excluded_fields):
            _dict['array'] = self.array.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodPerformanceReplicationByArray from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodPerformanceReplicationByArray from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "continuous_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj["continuous_bytes_per_sec"]) if obj.get("continuous_bytes_per_sec") is not None else None,
            "resync_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj["resync_bytes_per_sec"]) if obj.get("resync_bytes_per_sec") is not None else None,
            "sync_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj["sync_bytes_per_sec"]) if obj.get("sync_bytes_per_sec") is not None else None,
            "periodic_bytes_per_sec": ReplicationPerformanceWithTotal.from_dict(obj["periodic_bytes_per_sec"]) if obj.get("periodic_bytes_per_sec") is not None else None,
            "total_bytes_per_sec": obj.get("total_bytes_per_sec"),
            "pod": FixedReference.from_dict(obj["pod"]) if obj.get("pod") is not None else None,
            "time": obj.get("time"),
            "array": Resource.from_dict(obj["array"]) if obj.get("array") is not None else None
        })
        return _obj


