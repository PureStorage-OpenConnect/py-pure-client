# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conint


class DirectoryPerformance(BaseModel):
    """
    DirectoryPerformance
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    bytes_per_op: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The average I/O size for both read and write (all) operations.")
    bytes_per_read: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The average I/O size per read, measured in bytes.")
    bytes_per_write: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The average I/O size per write, measured in bytes.")
    others_per_sec: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The number of other requests processed per second.")
    read_bytes_per_sec: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The number of bytes read per second.")
    reads_per_sec: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The number of read requests processed per second.")
    time: Optional[StrictInt] = Field(default=None, description="The time when the sample performance data was taken. Measured in milliseconds since the UNIX epoch.")
    usec_per_other_op: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The average time it takes the array to process an I/O other request, measured in microseconds.")
    usec_per_read_op: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The average time it takes the array to process an I/O read request, measured in microseconds.")
    usec_per_write_op: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The average time it takes the array to process an I/O write request, measured in microseconds.")
    write_bytes_per_sec: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The number of bytes written per second.")
    writes_per_sec: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The number of write requests processed per second.")
    __properties = ["id", "name", "bytes_per_op", "bytes_per_read", "bytes_per_write", "others_per_sec", "read_bytes_per_sec", "reads_per_sec", "time", "usec_per_other_op", "usec_per_read_op", "usec_per_write_op", "write_bytes_per_sec", "writes_per_sec"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "bytes_per_op",
                "bytes_per_read",
                "bytes_per_write",
                "others_per_sec",
                "read_bytes_per_sec",
                "reads_per_sec",
                "time",
                "usec_per_other_op",
                "usec_per_read_op",
                "usec_per_write_op",
                "write_bytes_per_sec",
                "writes_per_sec",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> DirectoryPerformance:
        """Create an instance of DirectoryPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> DirectoryPerformance:
        """Create an instance of DirectoryPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DirectoryPerformance.parse_obj(obj)

        _obj = DirectoryPerformance.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "bytes_per_op": obj.get("bytes_per_op"),
            "bytes_per_read": obj.get("bytes_per_read"),
            "bytes_per_write": obj.get("bytes_per_write"),
            "others_per_sec": obj.get("others_per_sec"),
            "read_bytes_per_sec": obj.get("read_bytes_per_sec"),
            "reads_per_sec": obj.get("reads_per_sec"),
            "time": obj.get("time"),
            "usec_per_other_op": obj.get("usec_per_other_op"),
            "usec_per_read_op": obj.get("usec_per_read_op"),
            "usec_per_write_op": obj.get("usec_per_write_op"),
            "write_bytes_per_sec": obj.get("write_bytes_per_sec"),
            "writes_per_sec": obj.get("writes_per_sec")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

