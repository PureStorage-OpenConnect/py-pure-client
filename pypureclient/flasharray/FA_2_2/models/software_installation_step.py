# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_2.models.reference import Reference
from pypureclient.flasharray.FA_2_2.models.software_installation_steps_checks import SoftwareInstallationStepsChecks
from typing import Optional, Set
from typing_extensions import Self

class SoftwareInstallationStep(BaseModel):
    """
    SoftwareInstallationStep
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the resource. The name cannot be modified.")
    start_time: Optional[StrictInt] = Field(default=None, description="Start time in milliseconds since the UNIX epoch.")
    end_time: Optional[StrictInt] = Field(default=None, description="End time in milliseconds since the UNIX epoch.")
    checks: Optional[List[SoftwareInstallationStepsChecks]] = Field(default=None, description="A list of checks in this upgrade step.")
    description: Optional[StrictStr] = Field(default=None, description="Detailed description of the step.")
    hop_version: Optional[StrictStr] = Field(default=None, description="The version to which the current hop is upgrading.")
    installation: Optional[Reference] = Field(default=None, description="Referenced `software-installation` to which the step belongs.")
    details: Optional[StrictStr] = Field(default=None, description="Detailed result of the step used to diagnose step failures.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the step. Valid values are `running` and `finished`. A status of `running` indicates that the step has not finished. A status of `finished` indicates that the check has finished.")
    __properties: ClassVar[List[str]] = ["id", "name", "start_time", "end_time", "checks", "description", "hop_version", "installation", "details", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in checks (list)
        if self.checks and (include_readonly or "checks" not in excluded_fields):
            _items = []
            for _item_checks in self.checks:
                if _item_checks:
                    _items.append(_item_checks.to_dict())
            _dict['checks'] = _items
        # override the default output from pydantic by calling `to_dict()` of installation
        if self.installation and (include_readonly or "installation" not in excluded_fields):
            _dict['installation'] = self.installation.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SoftwareInstallationStep from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SoftwareInstallationStep from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "checks": [SoftwareInstallationStepsChecks.from_dict(_item) for _item in obj["checks"]] if obj.get("checks") is not None else None,
            "description": obj.get("description"),
            "hop_version": obj.get("hop_version"),
            "installation": Reference.from_dict(obj["installation"]) if obj.get("installation") is not None else None,
            "details": obj.get("details"),
            "status": obj.get("status")
        })
        return _obj


