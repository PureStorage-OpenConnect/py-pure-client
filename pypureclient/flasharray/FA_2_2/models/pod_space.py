# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class PodSpace(BaseModel):
    """
    PodSpace
    """ # noqa: E501
    data_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ratio of mapped sectors within a volume versus the amount of physical space the data occupies after data compression and deduplication. The data reduction ratio does not include thin provisioning savings. For example, a data reduction ratio of 5&#58;1 means that for every 5 MB the host writes to the array, 1 MB is stored on the array's flash modules.")
    shared: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The physical space occupied by deduplicated data, meaning that the space is shared with other volumes and snapshots as a result of data deduplication. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by data that is not unique to a specific volume, managed directory, or snapshot, measured in bytes.")
    snapshots: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The physical space occupied by data unique to one or more snapshots. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by data unique to one or more snapshots, measured in bytes.")
    system: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The physical space occupied by internal array metadata. Measured in bytes.")
    thin_provisioning: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The percentage of volume sectors that do not contain host-written data because the hosts have not written data to them or the sectors have been explicitly trimmed.")
    total_physical: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The total physical space occupied by system, shared space, volume, and snapshot data. Measured in bytes.")
    total_provisioned: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="For a single volume, the provisioned size of the volume. For all other resources, the total provisioned size of all volumes that are connected to or are inside the resource. Represents storage capacity reported to hosts. Measured in bytes.")
    total_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The ratio of provisioned sectors within a volume versus the amount of physical space the data occupies after reduction via data compression and deduplication and with thin provisioning savings. Total reduction is data reduction with thin provisioning savings. For example, a total reduction ratio of 10&#58;1 means that for every 10 MB of provisioned space, 1 MB is stored on the array's flash modules.")
    unique: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The unique physical space occupied by customer data. Unique physical space does not include shared space, snapshots, and internal array metadata. Measured in bytes. On Evergreen//One arrays, this is the effective space contributed by unique customer data, measured in bytes. Unique data does not include shared space, snapshots, and internal array metadata.")
    virtual: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The amount of logically written data that a volume or a snapshot references. Measured in bytes.")
    replication: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="On source pods, the space consumed by unique data that has not been replicated to the target pod. On target pods, the space consumed by unique data that has been replicated to the target but not yet incorporated into the target pod. On Evergreen//One arrays, this is the effective space consumed by unique data that has not been replicated to the target pod, on source pods. The effective space consumed by unique data that has been replicated to the target but not yet incorporated into the target pod, on target pods.")
    __properties: ClassVar[List[str]] = ["data_reduction", "shared", "snapshots", "system", "thin_provisioning", "total_physical", "total_provisioned", "total_reduction", "unique", "virtual", "replication"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "data_reduction",
            "shared",
            "snapshots",
            "system",
            "thin_provisioning",
            "total_physical",
            "total_provisioned",
            "total_reduction",
            "unique",
            "virtual",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PodSpace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PodSpace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "data_reduction": obj.get("data_reduction"),
            "shared": obj.get("shared"),
            "snapshots": obj.get("snapshots"),
            "system": obj.get("system"),
            "thin_provisioning": obj.get("thin_provisioning"),
            "total_physical": obj.get("total_physical"),
            "total_provisioned": obj.get("total_provisioned"),
            "total_reduction": obj.get("total_reduction"),
            "unique": obj.get("unique"),
            "virtual": obj.get("virtual"),
            "replication": obj.get("replication")
        })
        return _obj


