# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from pypureclient.flasharray.FA_2_41.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_41.models.workload_parameter import WorkloadParameter
from pypureclient.flasharray.FA_2_41.models.workload_placement_recommendation_additional_constraints import WorkloadPlacementRecommendationAdditionalConstraints
from pypureclient.flasharray.FA_2_41.models.workload_placement_recommendation_result import WorkloadPlacementRecommendationResult
from typing import Optional, Set
from typing_extensions import Self

class WorkloadPlacementRecommendation(BaseModel):
    """
    WorkloadPlacementRecommendation
    """ # noqa: E501
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated name. The name cannot be modified and cannot refer to another resource.")
    created: Optional[StrictInt] = Field(default=None, description="The time the recommendation was made, measured in milliseconds since the UNIX epoch.")
    expires: Optional[StrictInt] = Field(default=None, description="The time when recommendation expires, measured in milliseconds since the UNIX epoch.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the recommendation. Possible values are `processing`, `completed`, and `failed`.")
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="The percentage progress of the recommendation computation. The percentage is displayed as a decimal value, starting at 0.00 and ending at 1.00.")
    preset: Optional[FixedReference] = None
    placement_names: Optional[List[StrictStr]] = None
    projection_months: Optional[StrictInt] = Field(default=None, description="The number of months to compute the projections. If not specified, defaults to 1 month.")
    parameters: Optional[List[WorkloadParameter]] = Field(default=None, description="The parameter values to pass to the preset. Value must be supplied for all parameters that do not have a default defined in the preset.")
    additional_constraints: Optional[WorkloadPlacementRecommendationAdditionalConstraints] = None
    results_limit: Optional[StrictInt] = Field(default=None, description="The maximum number of results to return. If not specified, defaults to 10 results.")
    more_results_available: Optional[StrictBool] = None
    results: Optional[List[WorkloadPlacementRecommendationResult]] = Field(default=None, description="The results of the recommendation.")
    __properties: ClassVar[List[str]] = ["context", "id", "name", "created", "expires", "status", "progress", "preset", "placement_names", "projection_months", "parameters", "additional_constraints", "results_limit", "more_results_available", "results"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
            "created",
            "expires",
            "status",
            "progress",
            "placement_names",
            "more_results_available",
            "results",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of preset
        if self.preset and (include_readonly or "preset" not in excluded_fields):
            _dict['preset'] = self.preset.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        if self.parameters and (include_readonly or "parameters" not in excluded_fields):
            _items = []
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of additional_constraints
        if self.additional_constraints and (include_readonly or "additional_constraints" not in excluded_fields):
            _dict['additional_constraints'] = self.additional_constraints.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in results (list)
        if self.results and (include_readonly or "results" not in excluded_fields):
            _items = []
            for _item_results in self.results:
                if _item_results:
                    _items.append(_item_results.to_dict())
            _dict['results'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadPlacementRecommendation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadPlacementRecommendation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "expires": obj.get("expires"),
            "status": obj.get("status"),
            "progress": obj.get("progress"),
            "preset": FixedReference.from_dict(obj["preset"]) if obj.get("preset") is not None else None,
            "placement_names": obj.get("placement_names"),
            "projection_months": obj.get("projection_months"),
            "parameters": [WorkloadParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "additional_constraints": WorkloadPlacementRecommendationAdditionalConstraints.from_dict(obj["additional_constraints"]) if obj.get("additional_constraints") is not None else None,
            "results_limit": obj.get("results_limit"),
            "more_results_available": obj.get("more_results_available"),
            "results": [WorkloadPlacementRecommendationResult.from_dict(_item) for _item in obj["results"]] if obj.get("results") is not None else None
        })
        return _obj


