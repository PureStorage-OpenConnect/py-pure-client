# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_41.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_41.models.reference import Reference
from pypureclient.flasharray.FA_2_41.models.reference_no_id_with_type import ReferenceNoIdWithType
from typing import Optional, Set
from typing_extensions import Self

class PolicyAuditFile(BaseModel):
    """
    PolicyAuditFile
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed policy is permanently eradicated. Once the `time_remaining` period has elapsed, the policy is permanently eradicated and can no longer be recovered.")
    enabled: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy is enabled.")
    pod: Optional[Reference] = Field(default=None, description="A reference to the pod.")
    policy_type: Optional[StrictStr] = Field(default=None, description="The type of policy. Valid values include `autodir`, `nfs`, `smb`, `snapshot`, and `quota`.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left, measured in milliseconds, until the destroyed policy is permanently eradicated.")
    log_targets: Optional[List[ReferenceNoIdWithType]] = Field(default=None, description="A list of targets to which audit logs will be sent.")
    __properties: ClassVar[List[str]] = ["id", "name", "context", "destroyed", "enabled", "pod", "policy_type", "time_remaining", "log_targets"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "policy_type",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pod
        if self.pod and (include_readonly or "pod" not in excluded_fields):
            _dict['pod'] = self.pod.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in log_targets (list)
        if self.log_targets and (include_readonly or "log_targets" not in excluded_fields):
            _items = []
            for _item_log_targets in self.log_targets:
                if _item_log_targets:
                    _items.append(_item_log_targets.to_dict())
            _dict['log_targets'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyAuditFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyAuditFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "destroyed": obj.get("destroyed"),
            "enabled": obj.get("enabled"),
            "pod": Reference.from_dict(obj["pod"]) if obj.get("pod") is not None else None,
            "policy_type": obj.get("policy_type"),
            "time_remaining": obj.get("time_remaining"),
            "log_targets": [ReferenceNoIdWithType.from_dict(_item) for _item in obj["log_targets"]] if obj.get("log_targets") is not None else None
        })
        return _obj


