# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.41
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_41 import models

class PresetWorkloadPeriodicReplicationConfiguration(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'remote_targets': 'list[ReferenceWithType]',
        'rules': 'list[PresetWorkloadSnapshotRule]'
    }

    attribute_map = {
        'name': 'name',
        'remote_targets': 'remote_targets',
        'rules': 'rules'
    }

    required_args = {
        'name',
        'remote_targets',
        'rules',
    }

    def __init__(
        self,
        name,  # type: str
        remote_targets,  # type: List[models.ReferenceWithType]
        rules,  # type: List[models.PresetWorkloadSnapshotRule]
    ):
        """
        Keyword args:
            name (str, required): The name of the periodic replication configuration, by which other configuration objects in the preset can reference it. Name must be unique across all configuration objects in the preset.
            remote_targets (list[ReferenceWithType], required): The remote targets to which snapshots may be replicated.
            rules (list[PresetWorkloadSnapshotRule], required): Rules describe the frequency and retention of snapshots taken by the configuration.
        """
        self.name = name
        self.remote_targets = remote_targets
        self.rules = rules

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadPeriodicReplicationConfiguration`".format(key))
        if key == "name" and value is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if key == "remote_targets" and value is None:
            raise ValueError("Invalid value for `remote_targets`, must not be `None`")
        if key == "rules" and value is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadPeriodicReplicationConfiguration`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadPeriodicReplicationConfiguration`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadPeriodicReplicationConfiguration`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(PresetWorkloadPeriodicReplicationConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresetWorkloadPeriodicReplicationConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
