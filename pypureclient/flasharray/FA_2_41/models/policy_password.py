# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint
from pypureclient.flasharray.FA_2_41.models.fixed_reference import FixedReference


class PolicyPassword(BaseModel):
    """
    PolicyPassword
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    enabled: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy is enabled.")
    enforce_dictionary_check: Optional[StrictBool] = Field(default=None, description="If `true`, test password against dictionary of known leaked passwords. Only applies to passwords longer than 6 characters.")
    enforce_username_check: Optional[StrictBool] = Field(default=None, description="If `true`, the username cannot be a substring of the password. It only applies to usernames of 3 characters and longer.")
    lockout_duration: Optional[conint(strict=True, le=7776000000, ge=1000)] = Field(default=None, description="The lockout duration, in milliseconds, if a user is locked out after reaching the maximum number of login attempts. Ranges from 1 second to 90 days.")
    max_login_attempts: Optional[conint(strict=True, le=100, ge=1)] = Field(default=None, description="Maximum number of failed login attempts allowed before the user is locked out.")
    max_password_age: Optional[conint(strict=True, le=8639913600000, ge=0)] = Field(default=None, description="The maximum age of password before password change is required. Ranges from 1 day to 99999 days, with 0 meaning password expiration is disabled.")
    min_character_groups: Optional[conint(strict=True, le=4, ge=0)] = Field(default=None, description="The minimum number of character groups ([a-z], [A-Z], [0-9], other) required to be present in a password.")
    min_characters_per_group: Optional[conint(strict=True, ge=1)] = Field(default=None, description="The minimum number of characters per group to count the group as present. Maximum is limited by the minimum password length divided by the number of character groups (e.g. min_password_length = 9, min_character_groups = 4, then maximum is 2).")
    min_password_age: Optional[conint(strict=True, le=604800000, ge=0)] = Field(default=None, description="The minimum age, in milliseconds, of password before password change is allowed. Ranges from 0 ms to 7 days")
    min_password_length: Optional[conint(strict=True, le=100, ge=1)] = Field(default=None, description="Minimum password length. If not specified, defaults to 1.")
    password_history: Optional[conint(strict=True, le=64, ge=0)] = Field(default=None, description="The number of passwords tracked to prevent reuse of passwords.")
    policy_type: Optional[StrictStr] = Field(default=None, description="The type of policy. Valid values include `autodir`, `nfs`, `password`, `smb`, `snapshot`, and `quota`.")
    __properties = ["id", "name", "context", "enabled", "enforce_dictionary_check", "enforce_username_check", "lockout_duration", "max_login_attempts", "max_password_age", "min_character_groups", "min_characters_per_group", "min_password_age", "min_password_length", "password_history", "policy_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "policy_type",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PolicyPassword:
        """Create an instance of PolicyPassword from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyPassword:
        """Create an instance of PolicyPassword from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyPassword.parse_obj(obj)

        _obj = PolicyPassword.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "enabled": obj.get("enabled"),
            "enforce_dictionary_check": obj.get("enforce_dictionary_check"),
            "enforce_username_check": obj.get("enforce_username_check"),
            "lockout_duration": obj.get("lockout_duration"),
            "max_login_attempts": obj.get("max_login_attempts"),
            "max_password_age": obj.get("max_password_age"),
            "min_character_groups": obj.get("min_character_groups"),
            "min_characters_per_group": obj.get("min_characters_per_group"),
            "min_password_age": obj.get("min_password_age"),
            "min_password_length": obj.get("min_password_length"),
            "password_history": obj.get("password_history"),
            "policy_type": obj.get("policy_type")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

