# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_41.models.support_remote_assist_sessions_paths import SupportRemoteAssistSessionsPaths
from typing import Optional, Set
from typing_extensions import Self

class SupportRemoteAssistSessions(BaseModel):
    """
    Remote assist session settings.
    """ # noqa: E501
    active: Optional[StrictBool] = Field(default=None, description="The status of a remote assist session. If set to `true`, enables the remote assist session. If set to `false`, disables the remote assist session.")
    duration: Optional[StrictInt] = Field(default=None, description="Specifies the duration of the remote assist session in milliseconds. This parameter should only be provided when establishing a new session. This parameter determines the length of time the session will remain active after initiation. Defaults to 86400000 (24h) with a min of 14400000 (4h) and a max of 172800000 (48h).")
    access_level: Optional[StrictStr] = Field(default=None, description="The access level for this remote assist session. This is set to default_access_level unless access_level_override is provided. Values include `restricted` and `elevated`.")
    opened: Optional[StrictInt] = Field(default=None, description="The timestamp when the session opened, measured in milliseconds since the UNIX epoch.")
    expires: Optional[StrictInt] = Field(default=None, description="The timestamp when the session expires, measured in milliseconds since the UNIX epoch.")
    status: Optional[StrictStr] = Field(default=None, description="The status of the remote assist session. Values include `connected`, `connecting`, `disconnected`, and `session-active`.")
    paths: Optional[List[SupportRemoteAssistSessionsPaths]] = None
    __properties: ClassVar[List[str]] = ["active", "duration", "access_level", "opened", "expires", "status", "paths"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "opened",
            "expires",
            "status",
            "paths",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in paths (list)
        if self.paths and (include_readonly or "paths" not in excluded_fields):
            _items = []
            for _item_paths in self.paths:
                if _item_paths:
                    _items.append(_item_paths.to_dict())
            _dict['paths'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupportRemoteAssistSessions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupportRemoteAssistSessions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "active": obj.get("active"),
            "duration": obj.get("duration"),
            "access_level": obj.get("access_level"),
            "opened": obj.get("opened"),
            "expires": obj.get("expires"),
            "status": obj.get("status"),
            "paths": [SupportRemoteAssistSessionsPaths.from_dict(_item) for _item in obj["paths"]] if obj.get("paths") is not None else None
        })
        return _obj


