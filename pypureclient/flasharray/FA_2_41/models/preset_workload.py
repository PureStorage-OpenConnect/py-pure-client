# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_41.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_41.models.preset_workload_parameter import PresetWorkloadParameter
from pypureclient.flasharray.FA_2_41.models.preset_workload_periodic_replication_configuration import PresetWorkloadPeriodicReplicationConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_placement_configuration import PresetWorkloadPlacementConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_qos_configuration import PresetWorkloadQosConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_snapshot_configuration import PresetWorkloadSnapshotConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_volume_configuration import PresetWorkloadVolumeConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_workload_tag import PresetWorkloadWorkloadTag
from typing import Optional, Set
from typing_extensions import Self

class PresetWorkload(BaseModel):
    """
    PresetWorkload
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of the workload the preset will configure. Supports up to 1KB of unicode characters.")
    revision: Optional[StrictInt] = Field(default=None, description="A counter that is automatically incremented by the server when the preset is updated.")
    workload_type: StrictStr = Field(description="The type of workload the preset will configure. Valid values include `VDI`, `File`, `MySQL` etc.")
    parameters: Optional[List[PresetWorkloadParameter]] = Field(default=None, description="The parameters to prompt the user when they deploy workloads from the preset.")
    workload_tags: Optional[List[PresetWorkloadWorkloadTag]] = Field(default=None, description="The tags that will be associated with workloads provisioned by the preset.")
    placement_configurations: Annotated[List[PresetWorkloadPlacementConfiguration], Field(min_length=1, max_length=1)] = Field(description="The placement configurations that can be applied to storage resources (such as volumes) within the preset. All storage resources associated with the same placement will be colocated on the same array.")
    qos_configurations: Optional[Annotated[List[PresetWorkloadQosConfiguration], Field(max_length=5)]] = Field(default=None, description="The QoS configurations that can be applied to storage resources (such as volumes) within the preset.")
    snapshot_configurations: Optional[Annotated[List[PresetWorkloadSnapshotConfiguration], Field(max_length=2)]] = Field(default=None, description="The snapshot configurations that can be applied to storage resources (such as volumes) within the preset.")
    periodic_replication_configurations: Optional[Annotated[List[PresetWorkloadPeriodicReplicationConfiguration], Field(max_length=2)]] = Field(default=None, description="The periodic replication configurations that can be applied to storage resources (such as volumes) within the preset.")
    volume_configurations: Annotated[List[PresetWorkloadVolumeConfiguration], Field(min_length=1, max_length=5)] = Field(description="The volumes that will be provisioned by the preset.")
    __properties: ClassVar[List[str]] = ["id", "name", "context", "description", "revision", "workload_type", "parameters", "workload_tags", "placement_configurations", "qos_configurations", "snapshot_configurations", "periodic_replication_configurations", "volume_configurations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "revision",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of context
        if self.context and (include_readonly or "context" not in excluded_fields):
            _dict['context'] = self.context.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        if self.parameters and (include_readonly or "parameters" not in excluded_fields):
            _items = []
            for _item_parameters in self.parameters:
                if _item_parameters:
                    _items.append(_item_parameters.to_dict())
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workload_tags (list)
        if self.workload_tags and (include_readonly or "workload_tags" not in excluded_fields):
            _items = []
            for _item_workload_tags in self.workload_tags:
                if _item_workload_tags:
                    _items.append(_item_workload_tags.to_dict())
            _dict['workload_tags'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in placement_configurations (list)
        if self.placement_configurations and (include_readonly or "placement_configurations" not in excluded_fields):
            _items = []
            for _item_placement_configurations in self.placement_configurations:
                if _item_placement_configurations:
                    _items.append(_item_placement_configurations.to_dict())
            _dict['placement_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in qos_configurations (list)
        if self.qos_configurations and (include_readonly or "qos_configurations" not in excluded_fields):
            _items = []
            for _item_qos_configurations in self.qos_configurations:
                if _item_qos_configurations:
                    _items.append(_item_qos_configurations.to_dict())
            _dict['qos_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in snapshot_configurations (list)
        if self.snapshot_configurations and (include_readonly or "snapshot_configurations" not in excluded_fields):
            _items = []
            for _item_snapshot_configurations in self.snapshot_configurations:
                if _item_snapshot_configurations:
                    _items.append(_item_snapshot_configurations.to_dict())
            _dict['snapshot_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in periodic_replication_configurations (list)
        if self.periodic_replication_configurations and (include_readonly or "periodic_replication_configurations" not in excluded_fields):
            _items = []
            for _item_periodic_replication_configurations in self.periodic_replication_configurations:
                if _item_periodic_replication_configurations:
                    _items.append(_item_periodic_replication_configurations.to_dict())
            _dict['periodic_replication_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volume_configurations (list)
        if self.volume_configurations and (include_readonly or "volume_configurations" not in excluded_fields):
            _items = []
            for _item_volume_configurations in self.volume_configurations:
                if _item_volume_configurations:
                    _items.append(_item_volume_configurations.to_dict())
            _dict['volume_configurations'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresetWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresetWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj["context"]) if obj.get("context") is not None else None,
            "description": obj.get("description"),
            "revision": obj.get("revision"),
            "workload_type": obj.get("workload_type"),
            "parameters": [PresetWorkloadParameter.from_dict(_item) for _item in obj["parameters"]] if obj.get("parameters") is not None else None,
            "workload_tags": [PresetWorkloadWorkloadTag.from_dict(_item) for _item in obj["workload_tags"]] if obj.get("workload_tags") is not None else None,
            "placement_configurations": [PresetWorkloadPlacementConfiguration.from_dict(_item) for _item in obj["placement_configurations"]] if obj.get("placement_configurations") is not None else None,
            "qos_configurations": [PresetWorkloadQosConfiguration.from_dict(_item) for _item in obj["qos_configurations"]] if obj.get("qos_configurations") is not None else None,
            "snapshot_configurations": [PresetWorkloadSnapshotConfiguration.from_dict(_item) for _item in obj["snapshot_configurations"]] if obj.get("snapshot_configurations") is not None else None,
            "periodic_replication_configurations": [PresetWorkloadPeriodicReplicationConfiguration.from_dict(_item) for _item in obj["periodic_replication_configurations"]] if obj.get("periodic_replication_configurations") is not None else None,
            "volume_configurations": [PresetWorkloadVolumeConfiguration.from_dict(_item) for _item in obj["volume_configurations"]] if obj.get("volume_configurations") is not None else None
        })
        return _obj


