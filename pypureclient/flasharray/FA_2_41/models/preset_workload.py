# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_41.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_41.models.preset_workload_parameter import PresetWorkloadParameter
from pypureclient.flasharray.FA_2_41.models.preset_workload_periodic_replication_configuration import PresetWorkloadPeriodicReplicationConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_placement_configuration import PresetWorkloadPlacementConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_qos_configuration import PresetWorkloadQosConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_snapshot_configuration import PresetWorkloadSnapshotConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_volume_configuration import PresetWorkloadVolumeConfiguration
from pypureclient.flasharray.FA_2_41.models.preset_workload_workload_tag import PresetWorkloadWorkloadTag


class PresetWorkload(BaseModel):
    """
    PresetWorkload
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    context: Optional[FixedReference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    description: Optional[StrictStr] = Field(default=None, description="A brief description of the workload the preset will configure. Supports up to 1KB of unicode characters.")
    parameters: Optional[conlist(PresetWorkloadParameter)] = Field(default=None, description="The parameters to prompt the user when they deploy workloads from the preset.")
    periodic_replication_configurations: Optional[conlist(PresetWorkloadPeriodicReplicationConfiguration, max_items=2)] = Field(default=None, description="The periodic replication configurations that can be applied to storage resources (such as volumes) within the preset.")
    placement_configurations: conlist(PresetWorkloadPlacementConfiguration, max_items=1, min_items=1) = Field(default=..., description="The placement configurations that can be applied to storage resources (such as volumes) within the preset. All storage resources associated with the same placement will be colocated on the same array.")
    qos_configurations: Optional[conlist(PresetWorkloadQosConfiguration, max_items=5)] = Field(default=None, description="The QoS configurations that can be applied to storage resources (such as volumes) within the preset.")
    revision: Optional[StrictInt] = Field(default=None, description="A counter that is automatically incremented by the server when the preset is updated.")
    snapshot_configurations: Optional[conlist(PresetWorkloadSnapshotConfiguration, max_items=2)] = Field(default=None, description="The snapshot configurations that can be applied to storage resources (such as volumes) within the preset.")
    volume_configurations: conlist(PresetWorkloadVolumeConfiguration, max_items=5, min_items=1) = Field(default=..., description="The volumes that will be provisioned by the preset.")
    workload_tags: Optional[conlist(PresetWorkloadWorkloadTag)] = Field(default=None, description="The tags that will be associated with workloads provisioned by the preset.")
    workload_type: StrictStr = Field(default=..., description="The type of workload the preset will configure. Valid values include `VDI`, `File`, `MySQL` etc.")
    __properties = ["id", "name", "context", "description", "parameters", "periodic_replication_configurations", "placement_configurations", "qos_configurations", "revision", "snapshot_configurations", "volume_configurations", "workload_tags", "workload_type"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "revision",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in parameters (list)
        if _include_in_dict('parameters', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.parameters:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['parameters'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in periodic_replication_configurations (list)
        if _include_in_dict('periodic_replication_configurations', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.periodic_replication_configurations:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['periodic_replication_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in placement_configurations (list)
        if _include_in_dict('placement_configurations', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.placement_configurations:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['placement_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in qos_configurations (list)
        if _include_in_dict('qos_configurations', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.qos_configurations:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['qos_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in snapshot_configurations (list)
        if _include_in_dict('snapshot_configurations', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.snapshot_configurations:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['snapshot_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in volume_configurations (list)
        if _include_in_dict('volume_configurations', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.volume_configurations:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['volume_configurations'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in workload_tags (list)
        if _include_in_dict('workload_tags', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.workload_tags:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['workload_tags'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PresetWorkload:
        """Create an instance of PresetWorkload from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PresetWorkload:
        """Create an instance of PresetWorkload from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PresetWorkload.parse_obj(obj)

        _obj = PresetWorkload.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": FixedReference.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "description": obj.get("description"),
            "parameters": [PresetWorkloadParameter.from_dict(_item) for _item in obj.get("parameters")] if obj.get("parameters") is not None else None,
            "periodic_replication_configurations": [PresetWorkloadPeriodicReplicationConfiguration.from_dict(_item) for _item in obj.get("periodic_replication_configurations")] if obj.get("periodic_replication_configurations") is not None else None,
            "placement_configurations": [PresetWorkloadPlacementConfiguration.from_dict(_item) for _item in obj.get("placement_configurations")] if obj.get("placement_configurations") is not None else None,
            "qos_configurations": [PresetWorkloadQosConfiguration.from_dict(_item) for _item in obj.get("qos_configurations")] if obj.get("qos_configurations") is not None else None,
            "revision": obj.get("revision"),
            "snapshot_configurations": [PresetWorkloadSnapshotConfiguration.from_dict(_item) for _item in obj.get("snapshot_configurations")] if obj.get("snapshot_configurations") is not None else None,
            "volume_configurations": [PresetWorkloadVolumeConfiguration.from_dict(_item) for _item in obj.get("volume_configurations")] if obj.get("volume_configurations") is not None else None,
            "workload_tags": [PresetWorkloadWorkloadTag.from_dict(_item) for _item in obj.get("workload_tags")] if obj.get("workload_tags") is not None else None,
            "workload_type": obj.get("workload_type")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

