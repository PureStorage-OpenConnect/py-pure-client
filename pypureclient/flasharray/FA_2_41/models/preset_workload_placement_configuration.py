# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_41.models.reference_with_type import ReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class PresetWorkloadPlacementConfiguration(BaseModel):
    """
    PresetWorkloadPlacementConfiguration
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the placement configuration, by which other configuration objects in the preset can reference it. Name must be unique across all configuration objects in the preset.")
    storage_class: ReferenceWithType = Field(description="The storage class to which the placement and its associated storage resources may be deployed. Supports parameterization.")
    qos_configurations: Optional[Annotated[List[StrictStr], Field(max_length=1)]] = Field(default=None, description="The names of the QoS configurations to apply to the storage resources (such as volumes) in the placement. The limits defined in the QoS configurations will be shared across all storage resources in the placement.")
    __properties: ClassVar[List[str]] = ["name", "storage_class", "qos_configurations"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of storage_class
        if self.storage_class and (include_readonly or "storage_class" not in excluded_fields):
            _dict['storage_class'] = self.storage_class.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresetWorkloadPlacementConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresetWorkloadPlacementConfiguration from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "storage_class": ReferenceWithType.from_dict(obj["storage_class"]) if obj.get("storage_class") is not None else None,
            "qos_configurations": obj.get("qos_configurations")
        })
        return _obj


