# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.41
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_41 import models

class Workload(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'context': 'FixedReference',
        'created': 'int',
        'destroyed': 'bool',
        'preset': 'WorkloadPreset',
        'status': 'str',
        'status_details': 'list[str]',
        'time_remaining': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'context': 'context',
        'created': 'created',
        'destroyed': 'destroyed',
        'preset': 'preset',
        'status': 'status',
        'status_details': 'status_details',
        'time_remaining': 'time_remaining'
    }

    required_args = {
    }

    def __init__(
        self,
        id=None,  # type: str
        name=None,  # type: str
        context=None,  # type: models.FixedReference
        created=None,  # type: int
        destroyed=None,  # type: bool
        preset=None,  # type: models.WorkloadPreset
        status=None,  # type: str
        status_details=None,  # type: List[str]
        time_remaining=None,  # type: int
    ):
        """
        Keyword args:
            id (str): A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.
            name (str): A user-specified name. The name must be locally unique and can be changed.
            context (FixedReference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.
            created (int): The workload creation time, measured in milliseconds since the UNIX epoch.
            destroyed (bool): Returns a value of `true` if the workload has been destroyed and is pending eradication. The `time_remaining` displays the amount of time left until the destroyed workload is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed workload can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the workload is permanently eradicated and can no longer be recovered.
            preset (WorkloadPreset): A reference to the preset the workload was deployed from. If the preset has since been destroyed, `name` will be `null`.
            status (str): The status of the workload. Supported values are `creating`, `ready`, `destroying`, `destroyed`, `eradicating` and `recovering`.
            status_details (list[str]): Additional information about the workload status. For example, if the workload status is `creating`, status details might describe what resources are currently being created.
            time_remaining (int): The amount of time left until the destroyed workload is permanently eradicated, measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed workload can be recovered by setting `destroyed=false`.
        """
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if context is not None:
            self.context = context
        if created is not None:
            self.created = created
        if destroyed is not None:
            self.destroyed = destroyed
        if preset is not None:
            self.preset = preset
        if status is not None:
            self.status = status
        if status_details is not None:
            self.status_details = status_details
        if time_remaining is not None:
            self.time_remaining = time_remaining

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Workload`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Workload`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Workload`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Workload`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(Workload, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workload):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
