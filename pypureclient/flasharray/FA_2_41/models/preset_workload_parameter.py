# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_41.models.preset_workload_constraints import PresetWorkloadConstraints
from pypureclient.flasharray.FA_2_41.models.preset_workload_metadata import PresetWorkloadMetadata
from typing import Optional, Set
from typing_extensions import Self

class PresetWorkloadParameter(BaseModel):
    """
    PresetWorkloadParameter
    """ # noqa: E501
    name: StrictStr = Field(description="The name of the parameter, by which other fields in the preset can reference it. Name must be unique across all parameters in the preset.")
    type: StrictStr = Field(description="The type of the parameter. Valid values include `string`, `integer`, `boolean` and `resource_reference`. String parameters can be used to collect metadata about workloads deployed from the preset, such as the environment to which they are deployed (e.g., production, development, etc.) or the billing account to which they belong for charge back and show back purposes. Integer and boolean parameters can be used to configure specific fields in the preset, such as the number or size of volumes to provision. Resource reference parameters can be used to collect references to other objects, such as storage classes or remote arrays.")
    metadata: Optional[PresetWorkloadMetadata] = None
    constraints: Optional[PresetWorkloadConstraints] = None
    __properties: ClassVar[List[str]] = ["name", "type", "metadata", "constraints"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata and (include_readonly or "metadata" not in excluded_fields):
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of constraints
        if self.constraints and (include_readonly or "constraints" not in excluded_fields):
            _dict['constraints'] = self.constraints.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PresetWorkloadParameter from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PresetWorkloadParameter from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "type": obj.get("type"),
            "metadata": PresetWorkloadMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "constraints": PresetWorkloadConstraints.from_dict(obj["constraints"]) if obj.get("constraints") is not None else None
        })
        return _obj


