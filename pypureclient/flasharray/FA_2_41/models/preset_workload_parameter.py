# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.41
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_41 import models

class PresetWorkloadParameter(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'type': 'str',
        'metadata': 'PresetWorkloadMetadata',
        'constraints': 'PresetWorkloadConstraints'
    }

    attribute_map = {
        'name': 'name',
        'type': 'type',
        'metadata': 'metadata',
        'constraints': 'constraints'
    }

    required_args = {
        'name',
        'type',
    }

    def __init__(
        self,
        name,  # type: str
        type,  # type: str
        metadata=None,  # type: models.PresetWorkloadMetadata
        constraints=None,  # type: models.PresetWorkloadConstraints
    ):
        """
        Keyword args:
            name (str, required): The name of the parameter, by which other fields in the preset can reference it. Name must be unique across all parameters in the preset.
            type (str, required): The type of the parameter. Valid values include `string`, `integer`, `boolean` and `resource_reference`. String parameters can be used to collect metadata about workloads deployed from the preset, such as the environment to which they are deployed (e.g., production, development, etc.) or the billing account to which they belong for charge back and show back purposes. Integer and boolean parameters can be used to configure specific fields in the preset, such as the number or size of volumes to provision. Resource reference parameters can be used to collect references to other objects, such as storage classes or remote arrays.
            metadata (PresetWorkloadMetadata)
            constraints (PresetWorkloadConstraints)
        """
        self.name = name
        self.type = type
        if metadata is not None:
            self.metadata = metadata
        if constraints is not None:
            self.constraints = constraints

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadParameter`".format(key))
        if key == "name" and value is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if key == "type" and value is None:
            raise ValueError("Invalid value for `type`, must not be `None`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadParameter`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadParameter`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PresetWorkloadParameter`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(PresetWorkloadParameter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PresetWorkloadParameter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
