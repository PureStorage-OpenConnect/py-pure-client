# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_41.models.network_interface_neighbor_capability import NetworkInterfaceNeighborCapability
from pypureclient.flasharray.FA_2_41.models.network_interface_neighbor_neighbor_chassis_id import NetworkInterfaceNeighborNeighborChassisId
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfaceNeighborNeighborChassis(BaseModel):
    """
    The neighboring physical component incorporating one or more IEEE 802 LAN stations and their associated application functionality.
    """ # noqa: E501
    id: Optional[NetworkInterfaceNeighborNeighborChassisId] = None
    name: Optional[StrictStr] = Field(default=None, description="Administratively assigned name of the neighbour.")
    addresses: Optional[List[StrictStr]] = Field(default=None, description="Management IP addresses of the neighbor.")
    description: Optional[StrictStr] = Field(default=None, description="The textual description of the neighbor. The description may include the full name and version identification of the system hardware type, software operating system, and networking software.")
    repeater: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Neighbor system's repeater capability.")
    bridge: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Bridge capability of the neighbor system.")
    wlan_access_point: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="WLAN access point capability of the neighbor system.")
    router: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="IP router capability of the neighbor system.")
    telephone: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Telephone capability of the neighbor system.")
    docsis_cable_device: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="DOCSIS cable device capability of the neighbor system.")
    station_only: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Station only status of the neighbor system.")
    __properties: ClassVar[List[str]] = ["id", "name", "addresses", "description", "repeater", "bridge", "wlan_access_point", "router", "telephone", "docsis_cable_device", "station_only"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id and (include_readonly or "id" not in excluded_fields):
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of repeater
        if self.repeater and (include_readonly or "repeater" not in excluded_fields):
            _dict['repeater'] = self.repeater.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bridge
        if self.bridge and (include_readonly or "bridge" not in excluded_fields):
            _dict['bridge'] = self.bridge.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wlan_access_point
        if self.wlan_access_point and (include_readonly or "wlan_access_point" not in excluded_fields):
            _dict['wlan_access_point'] = self.wlan_access_point.to_dict()
        # override the default output from pydantic by calling `to_dict()` of router
        if self.router and (include_readonly or "router" not in excluded_fields):
            _dict['router'] = self.router.to_dict()
        # override the default output from pydantic by calling `to_dict()` of telephone
        if self.telephone and (include_readonly or "telephone" not in excluded_fields):
            _dict['telephone'] = self.telephone.to_dict()
        # override the default output from pydantic by calling `to_dict()` of docsis_cable_device
        if self.docsis_cable_device and (include_readonly or "docsis_cable_device" not in excluded_fields):
            _dict['docsis_cable_device'] = self.docsis_cable_device.to_dict()
        # override the default output from pydantic by calling `to_dict()` of station_only
        if self.station_only and (include_readonly or "station_only" not in excluded_fields):
            _dict['station_only'] = self.station_only.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfaceNeighborNeighborChassis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfaceNeighborNeighborChassis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": NetworkInterfaceNeighborNeighborChassisId.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "name": obj.get("name"),
            "addresses": obj.get("addresses"),
            "description": obj.get("description"),
            "repeater": NetworkInterfaceNeighborCapability.from_dict(obj["repeater"]) if obj.get("repeater") is not None else None,
            "bridge": NetworkInterfaceNeighborCapability.from_dict(obj["bridge"]) if obj.get("bridge") is not None else None,
            "wlan_access_point": NetworkInterfaceNeighborCapability.from_dict(obj["wlan_access_point"]) if obj.get("wlan_access_point") is not None else None,
            "router": NetworkInterfaceNeighborCapability.from_dict(obj["router"]) if obj.get("router") is not None else None,
            "telephone": NetworkInterfaceNeighborCapability.from_dict(obj["telephone"]) if obj.get("telephone") is not None else None,
            "docsis_cable_device": NetworkInterfaceNeighborCapability.from_dict(obj["docsis_cable_device"]) if obj.get("docsis_cable_device") is not None else None,
            "station_only": NetworkInterfaceNeighborCapability.from_dict(obj["station_only"]) if obj.get("station_only") is not None else None
        })
        return _obj


