# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_41.models.workload_placement_recommendation_target_capacity_used_projections import WorkloadPlacementRecommendationTargetCapacityUsedProjections
from pypureclient.flasharray.FA_2_41.models.workload_placement_recommendation_target_load_projections import WorkloadPlacementRecommendationTargetLoadProjections
from pypureclient.flasharray.FA_2_41.models.workload_placement_recommendation_warning import WorkloadPlacementRecommendationWarning


class WorkloadPlacementRecommendationTarget(BaseModel):
    """
    Data for a target in a workload placement recommendation. Target is a FlashArray, which may be used for workload placement.
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified.")
    name: Optional[StrictStr] = Field(default=None, description="The resource name, such as volume name, pod name, snapshot name, and so on.")
    resource_type: Optional[StrictStr] = Field(default=None, description="Type of the object (full name of the endpoint). Valid values are `hosts`, `host-groups`, `network-interfaces`, `pods`, `ports`, `pod-replica-links`, `subnets`, `volumes`, `volume-snapshots`, `volume-groups`, `directories`, `policies/nfs`, `policies/smb`, and `policies/snapshot`, etc.")
    capacity: Optional[StrictInt] = Field(default=None, description="The usable capacity of the target, measured in bytes.")
    capacity_used_projections: Optional[WorkloadPlacementRecommendationTargetCapacityUsedProjections] = None
    load_projections: Optional[WorkloadPlacementRecommendationTargetLoadProjections] = None
    model: Optional[StrictStr] = Field(default=None, description="The model of the target. For example, `FA-X20R2`.")
    warnings: Optional[conlist(WorkloadPlacementRecommendationWarning)] = Field(default=None, description="The warnings for the target.")
    __properties = ["id", "name", "resource_type", "capacity", "capacity_used_projections", "load_projections", "model", "warnings"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of capacity_used_projections
        if _include_in_dict('capacity_used_projections', include_readonly, excluded_fields, none_fields):
            _dict['capacity_used_projections'] = self.capacity_used_projections.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of load_projections
        if _include_in_dict('load_projections', include_readonly, excluded_fields, none_fields):
            _dict['load_projections'] = self.load_projections.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in warnings (list)
        if _include_in_dict('warnings', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.warnings:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['warnings'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> WorkloadPlacementRecommendationTarget:
        """Create an instance of WorkloadPlacementRecommendationTarget from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> WorkloadPlacementRecommendationTarget:
        """Create an instance of WorkloadPlacementRecommendationTarget from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkloadPlacementRecommendationTarget.parse_obj(obj)

        _obj = WorkloadPlacementRecommendationTarget.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "resource_type": obj.get("resource_type"),
            "capacity": obj.get("capacity"),
            "capacity_used_projections": WorkloadPlacementRecommendationTargetCapacityUsedProjections.from_dict(obj.get("capacity_used_projections")) if obj.get("capacity_used_projections") is not None else None,
            "load_projections": WorkloadPlacementRecommendationTargetLoadProjections.from_dict(obj.get("load_projections")) if obj.get("load_projections") is not None else None,
            "model": obj.get("model"),
            "warnings": [WorkloadPlacementRecommendationWarning.from_dict(_item) for _item in obj.get("warnings")] if obj.get("warnings") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

