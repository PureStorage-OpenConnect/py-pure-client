# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.41
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_41 import models

class WorkloadPlacementRecommendationTarget(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'resource_type': 'str',
        'model': 'str',
        'capacity': 'int',
        'capacity_used_projections': 'WorkloadPlacementRecommendationTargetCapacityUsedProjections',
        'load_projections': 'WorkloadPlacementRecommendationTargetLoadProjections',
        'warnings': 'list[WorkloadPlacementRecommendationWarning]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'resource_type': 'resource_type',
        'model': 'model',
        'capacity': 'capacity',
        'capacity_used_projections': 'capacity_used_projections',
        'load_projections': 'load_projections',
        'warnings': 'warnings'
    }

    required_args = {
    }

    def __init__(
        self,
        id=None,  # type: str
        name=None,  # type: str
        resource_type=None,  # type: str
        model=None,  # type: str
        capacity=None,  # type: int
        capacity_used_projections=None,  # type: models.WorkloadPlacementRecommendationTargetCapacityUsedProjections
        load_projections=None,  # type: models.WorkloadPlacementRecommendationTargetLoadProjections
        warnings=None,  # type: List[models.WorkloadPlacementRecommendationWarning]
    ):
        """
        Keyword args:
            id (str): A globally unique, system-generated ID. The ID cannot be modified.
            name (str): The resource name, such as volume name, pod name, snapshot name, and so on.
            resource_type (str): Type of the object (full name of the endpoint). Valid values are `hosts`, `host-groups`, `network-interfaces`, `pods`, `ports`, `pod-replica-links`, `subnets`, `volumes`, `volume-snapshots`, `volume-groups`, `directories`, `policies/nfs`, `policies/smb`, and `policies/snapshot`, etc.
            model (str): The model of the target. For example, `FA-X20R2`.
            capacity (int): The usable capacity of the target, measured in bytes.
            capacity_used_projections (WorkloadPlacementRecommendationTargetCapacityUsedProjections)
            load_projections (WorkloadPlacementRecommendationTargetLoadProjections)
            warnings (list[WorkloadPlacementRecommendationWarning]): The warnings for the target.
        """
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if resource_type is not None:
            self.resource_type = resource_type
        if model is not None:
            self.model = model
        if capacity is not None:
            self.capacity = capacity
        if capacity_used_projections is not None:
            self.capacity_used_projections = capacity_used_projections
        if load_projections is not None:
            self.load_projections = load_projections
        if warnings is not None:
            self.warnings = warnings

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendationTarget`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendationTarget`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendationTarget`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WorkloadPlacementRecommendationTarget`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(WorkloadPlacementRecommendationTarget, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkloadPlacementRecommendationTarget):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
