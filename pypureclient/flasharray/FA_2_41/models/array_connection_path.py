# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_41.models.reference_with_type import ReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class ArrayConnectionPath(BaseModel):
    """
    ArrayConnectionPath
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    local_port: Optional[StrictStr] = Field(default=None, description="The local port of the path.")
    local_address: Optional[StrictStr] = Field(default=None, description="IP address or WWN of the local port.")
    remote_port: Optional[StrictStr] = Field(default=None, description="The remote port of the path.")
    remote_address: Optional[StrictStr] = Field(default=None, description="IP address or WWN of the remote port.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the connection. Valid values are `connected`, `connecting`, and `quarantined`. A status of `connected` indicates that the arrays are communicating. A status of `connecting` indicates that the array is trying to establish a connection. A status of `quarantined` indicates that the path is unstable and has been temporarily embargoed for synchronous replication connections.")
    replication_transport: Optional[StrictStr] = Field(default=None, description="The protocol used to transport data between the local array and the remote array. Valid values are `ip` and `fc`.")
    encryption: Optional[StrictStr] = Field(default=None, description="If `encrypted`, all traffic over this array connection will be encrypted. If `unencrypted`, all traffic over this array connection will be unencrypted.")
    encryption_mode: Optional[StrictStr] = Field(default=None, description="Cryptographic protocol, trust model, and encryption algorithm information. Will be `null` if `encrypted` is `false`.")
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID of an array connection.")
    remote: Optional[ReferenceWithType] = Field(default=None, description="The remote array.")
    status_details: Optional[StrictStr] = Field(default=None, description="Additional information describing any issues encountered when connecting, or `null` if the `status` is `connected`.")
    type: Optional[StrictStr] = Field(default=None, description="The type of path. Valid values include `async-replication`, `sync-replication`, and `fleet-management`.")
    __properties: ClassVar[List[str]] = ["name", "local_port", "local_address", "remote_port", "remote_address", "status", "replication_transport", "encryption", "encryption_mode", "id", "remote", "status_details", "type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "status",
            "id",
            "status_details",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote and (include_readonly or "remote" not in excluded_fields):
            _dict['remote'] = self.remote.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayConnectionPath from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayConnectionPath from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "local_port": obj.get("local_port"),
            "local_address": obj.get("local_address"),
            "remote_port": obj.get("remote_port"),
            "remote_address": obj.get("remote_address"),
            "status": obj.get("status"),
            "replication_transport": obj.get("replication_transport"),
            "encryption": obj.get("encryption"),
            "encryption_mode": obj.get("encryption_mode"),
            "id": obj.get("id"),
            "remote": ReferenceWithType.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "status_details": obj.get("status_details"),
            "type": obj.get("type")
        })
        return _obj


