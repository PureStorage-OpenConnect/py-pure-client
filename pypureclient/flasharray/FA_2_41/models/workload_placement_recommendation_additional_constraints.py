# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.41
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from pypureclient.flasharray.FA_2_41.models.reference_with_type import ReferenceWithType
from pypureclient.flasharray.FA_2_41.models.workload_placement_recommendation_resource_reference import WorkloadPlacementRecommendationResourceReference


class WorkloadPlacementRecommendationAdditionalConstraints(BaseModel):
    """
    The list of targets considered for workload placement must satisfy the requirements imposed by the preset. It is also possible to specify additional constraints to further restrict the list of targets for consideration.  # noqa: E501
    """
    required_resource_references: Optional[conlist(WorkloadPlacementRecommendationResourceReference)] = Field(default=None, description="Defines a group of resources. At least one resource from each item should be present on this target for the target to be considered an acceptable candidate for workload placement")
    targets: Optional[conlist(ReferenceWithType)] = Field(default=None, description="If specified, only consider these targets when computing placement recommendations. If not specified, the whole fleet is used to compute the recommendation.")
    __properties = ["required_resource_references", "targets"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in required_resource_references (list)
        if _include_in_dict('required_resource_references', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.required_resource_references:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['required_resource_references'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in targets (list)
        if _include_in_dict('targets', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.targets:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['targets'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> WorkloadPlacementRecommendationAdditionalConstraints:
        """Create an instance of WorkloadPlacementRecommendationAdditionalConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> WorkloadPlacementRecommendationAdditionalConstraints:
        """Create an instance of WorkloadPlacementRecommendationAdditionalConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return WorkloadPlacementRecommendationAdditionalConstraints.parse_obj(obj)

        _obj = WorkloadPlacementRecommendationAdditionalConstraints.construct(_fields_set=None, **{
            "required_resource_references": [WorkloadPlacementRecommendationResourceReference.from_dict(_item) for _item in obj.get("required_resource_references")] if obj.get("required_resource_references") is not None else None,
            "targets": [ReferenceWithType.from_dict(_item) for _item in obj.get("targets")] if obj.get("targets") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

