# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 2.34
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flasharray.FA_2_34 import models

class ArrayConnectionPatch(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'window': 'TimeWindow',
        'default_limit': 'int',
        'window_limit': 'int',
        'replication_addresses': 'list[str]',
        'throttle': 'Throttle',
        'connection_key': 'str',
        'encryption': 'str',
        'management_address': 'str',
        'type': 'str'
    }

    attribute_map = {
        'window': 'window',
        'default_limit': 'default_limit',
        'window_limit': 'window_limit',
        'replication_addresses': 'replication_addresses',
        'throttle': 'throttle',
        'connection_key': 'connection_key',
        'encryption': 'encryption',
        'management_address': 'management_address',
        'type': 'type'
    }

    required_args = {
    }

    def __init__(
        self,
        window=None,  # type: models.TimeWindow
        default_limit=None,  # type: int
        window_limit=None,  # type: int
        replication_addresses=None,  # type: List[str]
        throttle=None,  # type: models.Throttle
        connection_key=None,  # type: str
        encryption=None,  # type: str
        management_address=None,  # type: str
        type=None,  # type: str
    ):
        """
        Keyword args:
            window (TimeWindow): Deprecated. The time during which the `window_limit` threshold is in effect.
            default_limit (int): Deprecated. Default maximum bandwidth threshold for outbound traffic in bytes. Once exceeded, bandwidth throttling occurs. 
            window_limit (int): Deprecated. Maximum bandwidth threshold for outbound traffic during the specified `window_limit` time range in bytes. Once exceeded, bandwidth throttling occurs. 
            replication_addresses (list[str]): IP addresses and FQDNs of the target arrays. Configurable only when `replication_transport` is set to `ip`. 
            throttle (Throttle)
            connection_key (str): The connection key of the target array. It is only required when `encryption` is changed from `unencrypted` to `encrypted`, or when `type` is changed from `async-replication` to `sync-replication`. 
            encryption (str): If `encrypted`, encryption will be enabled for all traffic over this array connection. `connection_key` must be specified when encrypted is set to `true`.  If `unencrypted`, encryption will be disabled for all traffic over this array connection. If not specified, the current encryption option for the array connection will remain unchanged. 
            management_address (str): Management IP address of the target array. 
            type (str): The type of replication. Valid values are `async-replication` and `sync-replication`. 
        """
        if window is not None:
            self.window = window
        if default_limit is not None:
            self.default_limit = default_limit
        if window_limit is not None:
            self.window_limit = window_limit
        if replication_addresses is not None:
            self.replication_addresses = replication_addresses
        if throttle is not None:
            self.throttle = throttle
        if connection_key is not None:
            self.connection_key = connection_key
        if encryption is not None:
            self.encryption = encryption
        if management_address is not None:
            self.management_address = management_address
        if type is not None:
            self.type = type

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `ArrayConnectionPatch`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            raise AttributeError
        else:
            return value

    def __getitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `ArrayConnectionPatch`".format(key))
        return object.__getattribute__(self, key)

    def __setitem__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `ArrayConnectionPatch`".format(key))
        object.__setattr__(self, key, value)

    def __delitem__(self, key):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `ArrayConnectionPatch`".format(key))
        object.__delattr__(self, key)

    def keys(self):
        return self.attribute_map.keys()

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(ArrayConnectionPatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArrayConnectionPatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
