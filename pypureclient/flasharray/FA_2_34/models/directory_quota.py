# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.34
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictStr, confloat, conint
from pypureclient.flasharray.FA_2_34.models.fixed_reference_with_type import FixedReferenceWithType


class DirectoryQuota(BaseModel):
    """
    DirectoryQuota
    """
    directory: Optional[FixedReferenceWithType] = Field(default=None, description="The directory to which the quota applies.")
    enabled: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy is enabled.")
    enforced: Optional[StrictBool] = Field(default=None, description="Defines whether the quota rule is enforced or unenforced. If the quota rule is enforced and logical space usage exceeds the quota limit, any modification operations that result in a need for more space are blocked. If the quota rule is unenforced and logical space usage exceeds the quota limit, notification emails are sent to targets that are specified using the `notification` parameter. No client operations are blocked when an unenforced limit is exceeded. If set to `true`, the limit is enforced. If set to `false`, notification targets are informed when the usage exceeds 80 percent of the limit.")
    path: Optional[StrictStr] = Field(default=None, description="Absolute path of the directory in the file system.")
    percentage_used: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="The percentage of the space used in the directory with respect to the quota limit.")
    policy: Optional[FixedReferenceWithType] = Field(default=None, description="The effective quota policy that imposes the limit. This is the policy with the lowest limit.")
    quota_limit: Optional[conint(strict=True, ge=0)] = Field(default=None, description="Effective quota limit imposed by the quota policy rule attached to the directory, measured in bytes.")
    rule_name: Optional[StrictStr] = Field(default=None, description="Name of the rule that results in this quota and behavior being applied to this directory.")
    usage: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The amount of logically written data for the directory, measured in bytes.")
    __properties = ["directory", "enabled", "enforced", "path", "percentage_used", "policy", "quota_limit", "rule_name", "usage"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "enabled",
                "path",
                "percentage_used",
                "quota_limit",
                "rule_name",
                "usage",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of directory
        if _include_in_dict('directory', include_readonly, excluded_fields, none_fields):
            _dict['directory'] = self.directory.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of policy
        if _include_in_dict('policy', include_readonly, excluded_fields, none_fields):
            _dict['policy'] = self.policy.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> DirectoryQuota:
        """Create an instance of DirectoryQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> DirectoryQuota:
        """Create an instance of DirectoryQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DirectoryQuota.parse_obj(obj)

        _obj = DirectoryQuota.construct(_fields_set=None, **{
            "directory": FixedReferenceWithType.from_dict(obj.get("directory")) if obj.get("directory") is not None else None,
            "enabled": obj.get("enabled"),
            "enforced": obj.get("enforced"),
            "path": obj.get("path"),
            "percentage_used": obj.get("percentage_used"),
            "policy": FixedReferenceWithType.from_dict(obj.get("policy")) if obj.get("policy") is not None else None,
            "quota_limit": obj.get("quota_limit"),
            "rule_name": obj.get("rule_name"),
            "usage": obj.get("usage")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

