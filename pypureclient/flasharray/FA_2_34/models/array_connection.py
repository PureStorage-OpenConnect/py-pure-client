# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.34
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_34.models.throttle import Throttle
from typing import Optional, Set
from typing_extensions import Self

class ArrayConnection(BaseModel):
    """
    ArrayConnection
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A locally unique, system-generated name. The name cannot be modified.")
    management_address: Optional[StrictStr] = Field(default=None, description="Management IP address or FQDN of the target array.")
    replication_addresses: Optional[List[StrictStr]] = Field(default=None, description="IP addresses of the target arrays when `replication_transport` is `ip`. WWNs of the target arrays when `replication_transport` is `fc`.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the connection. Valid values are `connected`, `connecting`, `partially_connected`, `unbalanced`, and `inactive`. A status of `connected` indicates that arrays are communicating. A status of `connecting` indicates that the array is trying to establish a connection. A status of `partially_connected` indicates that some replication addresses are communicating but others are not. A status of `unbalanced` indicates that the arrays are communicating, but the set of paths is either not redundant or not symmetric. A status of `inactive` indicates that the array does not have an established connection with the other array, but will attempt to connect when required.")
    type: Optional[StrictStr] = Field(default=None, description="The type of replication. Valid values are `async-replication`, `sync-replication` and `fleet-mgmt`.")
    replication_transport: Optional[StrictStr] = Field(default=None, description="The protocol used to transport data between the local array and the remote array. Valid values are `ip` and `fc`. The default value is `ip`.")
    version: Optional[StrictStr] = Field(default=None, description="The Purity version on the target array.")
    throttle: Optional[Throttle] = None
    encryption: Optional[StrictStr] = Field(default=None, description="If `encrypted`, all traffic over this array connection will be encrypted. If `unencrypted`, all traffic over this array connection will be unencrypted.")
    encryption_mode: Optional[StrictStr] = Field(default=None, description="Cryptographic protocol, trust model, and encryption algorithm information. Will be `null` if `encrypted` is `false`.")
    __properties: ClassVar[List[str]] = ["id", "name", "management_address", "replication_addresses", "status", "type", "replication_transport", "version", "throttle", "encryption", "encryption_mode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of throttle
        if self.throttle and (include_readonly or "throttle" not in excluded_fields):
            _dict['throttle'] = self.throttle.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "management_address": obj.get("management_address"),
            "replication_addresses": obj.get("replication_addresses"),
            "status": obj.get("status"),
            "type": obj.get("type"),
            "replication_transport": obj.get("replication_transport"),
            "version": obj.get("version"),
            "throttle": Throttle.from_dict(obj["throttle"]) if obj.get("throttle") is not None else None,
            "encryption": obj.get("encryption"),
            "encryption_mode": obj.get("encryption_mode")
        })
        return _obj


