# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.34
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr


class EradicationConfig(BaseModel):
    """
    The configuration of eradication feature.  # noqa: E501
    """
    disabled_delay: Optional[StrictInt] = Field(default=None, description="The eradication delay in milliseconds for destroyed objects that cannot be manually eradicated. Destroyed objects that cannot be manually eradicated will be automatically eradicated after the configured delay time passes. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.")
    enabled_delay: Optional[StrictInt] = Field(default=None, description="The eradication delay in milliseconds for destroyed objects that can be manually eradicated. Destroyed objects that can be manually eradicated will be automatically eradicated after the configured delay time passes. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.")
    eradication_delay: Optional[StrictInt] = Field(default=None, description="Eradication delay in milliseconds for all destroyed objects. Automatically eradicate destroyed objects after the configured delay time passes. Updating this field will update both `eradication_disabled_delay` and `eradication_enabled_delay` if both `eradication_disabled_delay` and `eradication_enabled_delay` have the same value. If `eradication_disabled_delay` and `eradication_enabled_delay` have different values, trying to configure `eradication_delay` will result in an error. This field has been deprecated and will be removed in a future REST version. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.")
    manual_eradication: Optional[StrictStr] = Field(default=None, description="Manual eradication status applied on the array level. If status is `all-disabled`, you cannot eradicate objects, files, and directories. If at least one local object has `manual_eradication` disabled, then the status will be `partially-disabled`. Values include `all-disabled`, `partially-disabled`, and `all-enabled`. If the user does not have sufficient access, this field will return `null`.")
    __properties = ["disabled_delay", "enabled_delay", "eradication_delay", "manual_eradication"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "manual_eradication",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> EradicationConfig:
        """Create an instance of EradicationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> EradicationConfig:
        """Create an instance of EradicationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EradicationConfig.parse_obj(obj)

        _obj = EradicationConfig.construct(_fields_set=None, **{
            "disabled_delay": obj.get("disabled_delay"),
            "enabled_delay": obj.get("enabled_delay"),
            "eradication_delay": obj.get("eradication_delay"),
            "manual_eradication": obj.get("manual_eradication")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

