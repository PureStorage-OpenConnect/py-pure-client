# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.10
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flasharray.FA_2_10.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_10.models.snapshot_space import SnapshotSpace


class VolumeSnapshot(BaseModel):
    """
    VolumeSnapshot
    """
    id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified and cannot refer to another resource.")
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    created: Optional[StrictInt] = Field(default=None, description="The snapshot creation time. Measured in milliseconds since the UNIX epoch.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the snapshot has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed volume snapshot is permanently eradicated. Before the `time_remaining` period has elapsed, the destroyed volume snapshot can be recovered by setting `destroyed=false`. Once the `time_remaining` period has elapsed, the volume snapshot is permanently eradicated and can no longer be recovered.")
    pod: Optional[FixedReference] = Field(default=None, description="A reference to the pod.")
    provisioned: Optional[StrictInt] = Field(default=None, description="The provisioned space of the snapshot. Measured in bytes. The minimum size is 1048576 (1MB), the maximum size is 4503599627370496 (4PB)")
    source: Optional[FixedReference] = Field(default=None, description="The volume from which this snapshot was taken. For a replicated snapshot being viewed on the target side, the `source` is the replica volume.")
    suffix: Optional[StrictStr] = Field(default=None, description="The suffix that is appended to the `source_name` value to generate the full volume snapshot name in the form `VOL.SUFFIX`. If the suffix is not specified, the system constructs the snapshot name in the form `VOL.NNN`, where `VOL` is the volume name, and `NNN` is a monotonically increasing number.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed snapshot is permanently eradicated. Measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed snapshot can be recovered by setting `destroyed=false`.")
    serial: Optional[StrictStr] = Field(default=None, description="A serial number generated by the system when the snapshot is created. The serial number is unique across all arrays.")
    space: Optional[SnapshotSpace] = Field(default=None, description="Displays size and space consumption information.")
    volume_group: Optional[FixedReference] = Field(default=None, description="The volume group to which the volume that is the source of this volume snapshot belongs.")
    __properties = ["id", "name", "created", "destroyed", "pod", "provisioned", "source", "suffix", "time_remaining", "serial", "space", "volume_group"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "created",
                "provisioned",
                "time_remaining",
                "serial",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pod
        if _include_in_dict('pod', include_readonly, excluded_fields, none_fields):
            _dict['pod'] = self.pod.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of source
        if _include_in_dict('source', include_readonly, excluded_fields, none_fields):
            _dict['source'] = self.source.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of space
        if _include_in_dict('space', include_readonly, excluded_fields, none_fields):
            _dict['space'] = self.space.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of volume_group
        if _include_in_dict('volume_group', include_readonly, excluded_fields, none_fields):
            _dict['volume_group'] = self.volume_group.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> VolumeSnapshot:
        """Create an instance of VolumeSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> VolumeSnapshot:
        """Create an instance of VolumeSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VolumeSnapshot.parse_obj(obj)

        _obj = VolumeSnapshot.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "pod": FixedReference.from_dict(obj.get("pod")) if obj.get("pod") is not None else None,
            "provisioned": obj.get("provisioned"),
            "source": FixedReference.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "suffix": obj.get("suffix"),
            "time_remaining": obj.get("time_remaining"),
            "serial": obj.get("serial"),
            "space": SnapshotSpace.from_dict(obj.get("space")) if obj.get("space") is not None else None,
            "volume_group": FixedReference.from_dict(obj.get("volume_group")) if obj.get("volume_group") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

