# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.25
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.flasharray.FA_2_25.models.fixed_reference_no_id import FixedReferenceNoId
from pypureclient.flasharray.FA_2_25.models.reference_no_id import ReferenceNoId


class NetworkInterfaceEth(BaseModel):
    """
    Ethernet network interface properties.  # noqa: E501
    """
    address: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address to be associated with the specified network interface.")
    gateway: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address of the gateway through which the specified network interface is to communicate with the network.")
    mac_address: Optional[StrictStr] = Field(default=None, description="The media access control address associated with the specified network interface.")
    mtu: Optional[StrictInt] = Field(default=None, description="Maximum message transfer unit (packet) size for the network interface, in bytes. MTU setting cannot exceed the MTU of the corresponding physical interface.")
    netmask: Optional[StrictStr] = Field(default=None, description="Netmask of the specified network interface that, when combined with the address of the interface, determines the network address of the interface.")
    subinterfaces: Optional[conlist(FixedReferenceNoId)] = Field(default=None, description="List of network interfaces configured to be a subinterface of the specified network interface.")
    subnet: Optional[ReferenceNoId] = Field(default=None, description="Subnet that is associated with the specified network interface.")
    subtype: Optional[StrictStr] = Field(default=None, description="The subtype of the specified network interface. Only interfaces of subtype `virtual` can be created. Configurable on POST only. Valid values are `failover_bond`, `lacp_bond`, `physical`, and `virtual`.")
    vlan: Optional[StrictInt] = Field(default=None, description="VLAN ID")
    __properties = ["address", "gateway", "mac_address", "mtu", "netmask", "subinterfaces", "subnet", "subtype", "vlan"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "mac_address",
                "vlan",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in subinterfaces (list)
        if _include_in_dict('subinterfaces', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.subinterfaces:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['subinterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of subnet
        if _include_in_dict('subnet', include_readonly, excluded_fields, none_fields):
            _dict['subnet'] = self.subnet.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> NetworkInterfaceEth:
        """Create an instance of NetworkInterfaceEth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkInterfaceEth:
        """Create an instance of NetworkInterfaceEth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkInterfaceEth.parse_obj(obj)

        _obj = NetworkInterfaceEth.construct(_fields_set=None, **{
            "address": obj.get("address"),
            "gateway": obj.get("gateway"),
            "mac_address": obj.get("mac_address"),
            "mtu": obj.get("mtu"),
            "netmask": obj.get("netmask"),
            "subinterfaces": [FixedReferenceNoId.from_dict(_item) for _item in obj.get("subinterfaces")] if obj.get("subinterfaces") is not None else None,
            "subnet": ReferenceNoId.from_dict(obj.get("subnet")) if obj.get("subnet") is not None else None,
            "subtype": obj.get("subtype"),
            "vlan": obj.get("vlan")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

