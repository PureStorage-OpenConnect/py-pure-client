# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.31
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pypureclient.flasharray.FA_2_31.models.network_interface_neighbor_capability import NetworkInterfaceNeighborCapability
from pypureclient.flasharray.FA_2_31.models.network_interface_neighbor_neighbor_chassis_id import NetworkInterfaceNeighborNeighborChassisId


class NetworkInterfaceNeighborNeighborChassis(BaseModel):
    """
    The neighboring physical component incorporating one or more IEEE 802 LAN stations and their associated application functionality.  # noqa: E501
    """
    addresses: Optional[conlist(StrictStr)] = Field(default=None, description="Management IP addresses of the neighbor.")
    bridge: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Bridge capability of the neighbor system.")
    description: Optional[StrictStr] = Field(default=None, description="The textual description of the neighbor. The description may include the full name and version identification of the system hardware type, software operating system, and networking software.")
    docsis_cable_device: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="DOCSIS cable device capability of the neighbor system.")
    id: Optional[NetworkInterfaceNeighborNeighborChassisId] = None
    name: Optional[StrictStr] = Field(default=None, description="Administratively assigned name of the neighbour.")
    repeater: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Neighbor system's repeater capability.")
    router: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="IP router capability of the neighbor system.")
    station_only: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Station only status of the neighbor system.")
    telephone: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="Telephone capability of the neighbor system.")
    wlan_access_point: Optional[NetworkInterfaceNeighborCapability] = Field(default=None, description="WLAN access point capability of the neighbor system.")
    __properties = ["addresses", "bridge", "description", "docsis_cable_device", "id", "name", "repeater", "router", "station_only", "telephone", "wlan_access_point"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bridge
        if _include_in_dict('bridge', include_readonly, excluded_fields, none_fields):
            _dict['bridge'] = self.bridge.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of docsis_cable_device
        if _include_in_dict('docsis_cable_device', include_readonly, excluded_fields, none_fields):
            _dict['docsis_cable_device'] = self.docsis_cable_device.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of id
        if _include_in_dict('id', include_readonly, excluded_fields, none_fields):
            _dict['id'] = self.id.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of repeater
        if _include_in_dict('repeater', include_readonly, excluded_fields, none_fields):
            _dict['repeater'] = self.repeater.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of router
        if _include_in_dict('router', include_readonly, excluded_fields, none_fields):
            _dict['router'] = self.router.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of station_only
        if _include_in_dict('station_only', include_readonly, excluded_fields, none_fields):
            _dict['station_only'] = self.station_only.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of telephone
        if _include_in_dict('telephone', include_readonly, excluded_fields, none_fields):
            _dict['telephone'] = self.telephone.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of wlan_access_point
        if _include_in_dict('wlan_access_point', include_readonly, excluded_fields, none_fields):
            _dict['wlan_access_point'] = self.wlan_access_point.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> NetworkInterfaceNeighborNeighborChassis:
        """Create an instance of NetworkInterfaceNeighborNeighborChassis from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkInterfaceNeighborNeighborChassis:
        """Create an instance of NetworkInterfaceNeighborNeighborChassis from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkInterfaceNeighborNeighborChassis.parse_obj(obj)

        _obj = NetworkInterfaceNeighborNeighborChassis.construct(_fields_set=None, **{
            "addresses": obj.get("addresses"),
            "bridge": NetworkInterfaceNeighborCapability.from_dict(obj.get("bridge")) if obj.get("bridge") is not None else None,
            "description": obj.get("description"),
            "docsis_cable_device": NetworkInterfaceNeighborCapability.from_dict(obj.get("docsis_cable_device")) if obj.get("docsis_cable_device") is not None else None,
            "id": NetworkInterfaceNeighborNeighborChassisId.from_dict(obj.get("id")) if obj.get("id") is not None else None,
            "name": obj.get("name"),
            "repeater": NetworkInterfaceNeighborCapability.from_dict(obj.get("repeater")) if obj.get("repeater") is not None else None,
            "router": NetworkInterfaceNeighborCapability.from_dict(obj.get("router")) if obj.get("router") is not None else None,
            "station_only": NetworkInterfaceNeighborCapability.from_dict(obj.get("station_only")) if obj.get("station_only") is not None else None,
            "telephone": NetworkInterfaceNeighborCapability.from_dict(obj.get("telephone")) if obj.get("telephone") is not None else None,
            "wlan_access_point": NetworkInterfaceNeighborCapability.from_dict(obj.get("wlan_access_point")) if obj.get("wlan_access_point") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

