# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_5.models.snmp_v2c import SnmpV2c
from pypureclient.flasharray.FA_2_5.models.snmp_v3 import SnmpV3
from typing import Optional, Set
from typing_extensions import Self

class SnmpManager(BaseModel):
    """
    SnmpManager
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    host: Optional[StrictStr] = Field(default=None, description="DNS hostname or IP address of a computer that hosts an SNMP manager to which Purity//FA is to send trap messages when it generates alerts.")
    notification: Optional[StrictStr] = Field(default=None, description="The type of notification the agent will send. Valid values are `inform` and `trap`.")
    v2c: Optional[SnmpV2c] = None
    v3: Optional[SnmpV3] = None
    version: Optional[StrictStr] = Field(default=None, description="Version of the SNMP protocol to be used by Purity//FA to communicate with the specified manager. Valid values are `v2c` and `v3`.")
    __properties: ClassVar[List[str]] = ["name", "host", "notification", "v2c", "v3", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of v2c
        if self.v2c and (include_readonly or "v2c" not in excluded_fields):
            _dict['v2c'] = self.v2c.to_dict()
        # override the default output from pydantic by calling `to_dict()` of v3
        if self.v3 and (include_readonly or "v3" not in excluded_fields):
            _dict['v3'] = self.v3.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SnmpManager from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SnmpManager from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "host": obj.get("host"),
            "notification": obj.get("notification"),
            "v2c": SnmpV2c.from_dict(obj["v2c"]) if obj.get("v2c") is not None else None,
            "v3": SnmpV3.from_dict(obj["v3"]) if obj.get("v3") is not None else None,
            "version": obj.get("version")
        })
        return _obj


