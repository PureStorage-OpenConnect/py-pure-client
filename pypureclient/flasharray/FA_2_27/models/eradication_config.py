# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.27
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EradicationConfig(BaseModel):
    """
    The configuration of eradication feature.
    """ # noqa: E501
    disabled_delay: Optional[StrictInt] = Field(default=None, description="The eradication delay in milliseconds for destroyed objects that cannot be manually eradicated. Destroyed objects that cannot be manually eradicated will be automatically eradicated after the configured delay time passes. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.")
    eradication_delay: Optional[StrictInt] = Field(default=None, description="Eradication delay in milliseconds for all destroyed objects. Automatically eradicate destroyed objects after the configured delay time passes. Updating this field will update both `eradication_disabled_delay` and `eradication_enabled_delay` if both `eradication_disabled_delay` and `eradication_enabled_delay` have the same value. If `eradication_disabled_delay` and `eradication_enabled_delay` have different values, trying to configure `eradication_delay` will result in an error. This field has been deprecated and will be removed in a future REST version. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.")
    enabled_delay: Optional[StrictInt] = Field(default=None, description="The eradication delay in milliseconds for destroyed objects that can be manually eradicated. Destroyed objects that can be manually eradicated will be automatically eradicated after the configured delay time passes. Valid values are `86400000` and any multiple of `86400000` in the range of `86400000` and `2592000000`. Any other values are rounded down to the nearest multiple of `86400000`.")
    manual_eradication: Optional[StrictStr] = Field(default=None, description="Manual eradication status applied on the array level. If status is `all-disabled`, you cannot eradicate objects, files, and directories. If at least one local object has `manual_eradication` disabled, then the status will be `partially-disabled`. Values include `all-disabled`, `partially-disabled`, and `all-enabled`. If the user does not have sufficient access, this field will return `null`.")
    __properties: ClassVar[List[str]] = ["disabled_delay", "eradication_delay", "enabled_delay", "manual_eradication"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "manual_eradication",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EradicationConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EradicationConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "disabled_delay": obj.get("disabled_delay"),
            "eradication_delay": obj.get("eradication_delay"),
            "enabled_delay": obj.get("enabled_delay"),
            "manual_eradication": obj.get("manual_eradication")
        })
        return _obj


