# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.11
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_11.models.reference_no_id import ReferenceNoId
from typing import Optional, Set
from typing_extensions import Self

class NetworkinterfacepatchEth(BaseModel):
    """
    Ethernet network interface properties.
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address to be associated with the specified network interface.")
    gateway: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address of the gateway through which the specified network interface is to communicate with the network.")
    mtu: Optional[StrictInt] = Field(default=None, description="Maximum message transfer unit (packet) size for the network interface in bytes. MTU setting cannot exceed the MTU of the corresponding physical interface.")
    netmask: Optional[StrictStr] = Field(default=None, description="Netmask of the specified network interface that, when combined with the address of the interface, determines the network address of the interface.")
    add_subinterfaces: Optional[List[ReferenceNoId]] = Field(default=None, description="Child devices to be added to the specified bond interface.")
    remove_subinterfaces: Optional[List[ReferenceNoId]] = Field(default=None, description="Child devices to be removed from the specified bond interface.")
    subinterfaces: Optional[List[ReferenceNoId]] = Field(default=None, description="Child devices to be added to the specified bond interface.")
    subnet: Optional[ReferenceNoId] = Field(default=None, description="Subnet that is associated with the specified network interface.")
    __properties: ClassVar[List[str]] = ["address", "gateway", "mtu", "netmask", "add_subinterfaces", "remove_subinterfaces", "subinterfaces", "subnet"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in add_subinterfaces (list)
        if self.add_subinterfaces and (include_readonly or "add_subinterfaces" not in excluded_fields):
            _items = []
            for _item_add_subinterfaces in self.add_subinterfaces:
                if _item_add_subinterfaces:
                    _items.append(_item_add_subinterfaces.to_dict())
            _dict['add_subinterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remove_subinterfaces (list)
        if self.remove_subinterfaces and (include_readonly or "remove_subinterfaces" not in excluded_fields):
            _items = []
            for _item_remove_subinterfaces in self.remove_subinterfaces:
                if _item_remove_subinterfaces:
                    _items.append(_item_remove_subinterfaces.to_dict())
            _dict['remove_subinterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in subinterfaces (list)
        if self.subinterfaces and (include_readonly or "subinterfaces" not in excluded_fields):
            _items = []
            for _item_subinterfaces in self.subinterfaces:
                if _item_subinterfaces:
                    _items.append(_item_subinterfaces.to_dict())
            _dict['subinterfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of subnet
        if self.subnet and (include_readonly or "subnet" not in excluded_fields):
            _dict['subnet'] = self.subnet.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkinterfacepatchEth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkinterfacepatchEth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "address": obj.get("address"),
            "gateway": obj.get("gateway"),
            "mtu": obj.get("mtu"),
            "netmask": obj.get("netmask"),
            "add_subinterfaces": [ReferenceNoId.from_dict(_item) for _item in obj["add_subinterfaces"]] if obj.get("add_subinterfaces") is not None else None,
            "remove_subinterfaces": [ReferenceNoId.from_dict(_item) for _item in obj["remove_subinterfaces"]] if obj.get("remove_subinterfaces") is not None else None,
            "subinterfaces": [ReferenceNoId.from_dict(_item) for _item in obj["subinterfaces"]] if obj.get("subinterfaces") is not None else None,
            "subnet": ReferenceNoId.from_dict(obj["subnet"]) if obj.get("subnet") is not None else None
        })
        return _obj


