# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flasharray.FA_2_3.models.fixed_reference import FixedReference
from pypureclient.flasharray.FA_2_3.models.replication_schedule import ReplicationSchedule
from pypureclient.flasharray.FA_2_3.models.retention_policy import RetentionPolicy
from pypureclient.flasharray.FA_2_3.models.snapshot_schedule import SnapshotSchedule
from pypureclient.flasharray.FA_2_3.models.space import Space


class ProtectionGroup(BaseModel):
    """
    ProtectionGroup
    """
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Has this protection group been destroyed? To destroy a protection group, patch to `true`. To recover a destroyed protection group, patch to `false`. If not specified, defaults to `false`.")
    host_count: Optional[StrictInt] = Field(default=None, description="Number of hosts in this protection group.")
    host_group_count: Optional[StrictInt] = Field(default=None, description="Number of host groups in this protection group.")
    is_local: Optional[StrictBool] = Field(default=None, description="If set to `true`, the protection group belongs to the local array. If set to `false`, the protection group belongs to the remote array.")
    pod: Optional[FixedReference] = Field(default=None, description="The pod in which the protection group resides.")
    replication_schedule: Optional[ReplicationSchedule] = Field(default=None, description="The schedule settings for asynchronous replication.")
    snapshot_schedule: Optional[SnapshotSchedule] = Field(default=None, description="The schedule settings for protection group snapshots.")
    source: Optional[FixedReference] = Field(default=None, description="The array or pod on which the protection group was created.")
    source_retention: Optional[RetentionPolicy] = Field(default=None, description="The retention policy for the source array of the protection group.")
    space: Optional[Space] = Field(default=None, description="Returns provisioned size and physical storage consumption data for each protection group.")
    target_count: Optional[StrictInt] = Field(default=None, description="The number of targets to where this protection group replicates.")
    target_retention: Optional[RetentionPolicy] = Field(default=None, description="The retention policy for the target(s) of the protection group.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left until the destroyed protection group is permanently eradicated. Measured in milliseconds. Before the `time_remaining` period has elapsed, the destroyed protection group can be recovered by setting `destroyed=false`.")
    volume_count: Optional[StrictInt] = Field(default=None, description="The number of volumes in the protection group.")
    __properties = ["name", "destroyed", "host_count", "host_group_count", "is_local", "pod", "replication_schedule", "snapshot_schedule", "source", "source_retention", "space", "target_count", "target_retention", "time_remaining", "volume_count"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "host_count",
                "host_group_count",
                "is_local",
                "target_count",
                "time_remaining",
                "volume_count",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of pod
        if _include_in_dict('pod', include_readonly, excluded_fields, none_fields):
            _dict['pod'] = self.pod.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of replication_schedule
        if _include_in_dict('replication_schedule', include_readonly, excluded_fields, none_fields):
            _dict['replication_schedule'] = self.replication_schedule.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of snapshot_schedule
        if _include_in_dict('snapshot_schedule', include_readonly, excluded_fields, none_fields):
            _dict['snapshot_schedule'] = self.snapshot_schedule.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of source
        if _include_in_dict('source', include_readonly, excluded_fields, none_fields):
            _dict['source'] = self.source.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of source_retention
        if _include_in_dict('source_retention', include_readonly, excluded_fields, none_fields):
            _dict['source_retention'] = self.source_retention.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of space
        if _include_in_dict('space', include_readonly, excluded_fields, none_fields):
            _dict['space'] = self.space.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of target_retention
        if _include_in_dict('target_retention', include_readonly, excluded_fields, none_fields):
            _dict['target_retention'] = self.target_retention.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ProtectionGroup:
        """Create an instance of ProtectionGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ProtectionGroup:
        """Create an instance of ProtectionGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ProtectionGroup.parse_obj(obj)

        _obj = ProtectionGroup.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "destroyed": obj.get("destroyed"),
            "host_count": obj.get("host_count"),
            "host_group_count": obj.get("host_group_count"),
            "is_local": obj.get("is_local"),
            "pod": FixedReference.from_dict(obj.get("pod")) if obj.get("pod") is not None else None,
            "replication_schedule": ReplicationSchedule.from_dict(obj.get("replication_schedule")) if obj.get("replication_schedule") is not None else None,
            "snapshot_schedule": SnapshotSchedule.from_dict(obj.get("snapshot_schedule")) if obj.get("snapshot_schedule") is not None else None,
            "source": FixedReference.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "source_retention": RetentionPolicy.from_dict(obj.get("source_retention")) if obj.get("source_retention") is not None else None,
            "space": Space.from_dict(obj.get("space")) if obj.get("space") is not None else None,
            "target_count": obj.get("target_count"),
            "target_retention": RetentionPolicy.from_dict(obj.get("target_retention")) if obj.get("target_retention") is not None else None,
            "time_remaining": obj.get("time_remaining"),
            "volume_count": obj.get("volume_count")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

