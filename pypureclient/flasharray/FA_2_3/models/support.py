# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_3.models.support_remote_assist_paths import SupportRemoteAssistPaths
from typing import Optional, Set
from typing_extensions import Self

class Support(BaseModel):
    """
    Support
    """ # noqa: E501
    phonehome_enabled: Optional[StrictBool] = Field(default=None, description="The status of phonehome. If set to `true`, enables phonehome. If set to `false`, disables phonehome.")
    proxy: Optional[StrictStr] = Field(default=None, description="The value of the current proxy, which is used to connect to cloud services such as phonehome and remote assist. Specify the server name, including the scheme and proxy port number.")
    remote_assist_active: Optional[StrictBool] = Field(default=None, description="The status of the remote assist session. If set to `true`, enables the remote assist session. If set to `false`, disables the remote assist session.")
    remote_assist_opened: Optional[StrictInt] = Field(default=None, description="The timestamp when the session opened, measured in milliseconds since the UNIX epoch.")
    remote_assist_expires: Optional[StrictInt] = Field(default=None, description="The timestamp when the session expires, measured in milliseconds since the UNIX epoch.")
    remote_assist_status: Optional[StrictStr] = Field(default=None, description="The status of the remote assist session. Values include `connected`, `connecting`, `disconnected`, and `session-active`.")
    remote_assist_paths: Optional[List[SupportRemoteAssistPaths]] = None
    __properties: ClassVar[List[str]] = ["phonehome_enabled", "proxy", "remote_assist_active", "remote_assist_opened", "remote_assist_expires", "remote_assist_status", "remote_assist_paths"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "remote_assist_opened",
            "remote_assist_expires",
            "remote_assist_status",
            "remote_assist_paths",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in remote_assist_paths (list)
        if self.remote_assist_paths and (include_readonly or "remote_assist_paths" not in excluded_fields):
            _items = []
            for _item_remote_assist_paths in self.remote_assist_paths:
                if _item_remote_assist_paths:
                    _items.append(_item_remote_assist_paths.to_dict())
            _dict['remote_assist_paths'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Support from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Support from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "phonehome_enabled": obj.get("phonehome_enabled"),
            "proxy": obj.get("proxy"),
            "remote_assist_active": obj.get("remote_assist_active"),
            "remote_assist_opened": obj.get("remote_assist_opened"),
            "remote_assist_expires": obj.get("remote_assist_expires"),
            "remote_assist_status": obj.get("remote_assist_status"),
            "remote_assist_paths": [SupportRemoteAssistPaths.from_dict(_item) for _item in obj["remote_assist_paths"]] if obj.get("remote_assist_paths") is not None else None
        })
        return _obj


