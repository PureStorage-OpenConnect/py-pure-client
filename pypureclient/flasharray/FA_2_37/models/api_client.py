# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.37
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_37.models.fixed_reference_with_type import FixedReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class ApiClient(BaseModel):
    """
    ApiClient
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the associated API client. The ID represents the JWT `aud` (audience) claim in ID Tokens issued for this API client.")
    name: Optional[StrictStr] = Field(default=None, description="The API client name.")
    max_role: Optional[StrictStr] = Field(default=None, description="This field has been deprecated. The maximum Admin Access Policy (previously 'role') allowed for ID Tokens issued by this API client. The bearer of an access token will be authorized to perform actions within the intersection of this policy and that of the array user specified as the JWT `sub` (subject) claim. `max_role` is deprecated in favor of `access_policies`, but remains for backwards compatibility. If a client has exactly one access policy which corresponds to a valid legacy role of the same name, `max_role` will be the name of that policy. Otherwise, it will be null.")
    access_policies: Optional[List[FixedReferenceWithType]] = Field(default=None, description="The access policies allowed for ID Tokens issued by this API client. The bearer of an access token will be authorized to perform actions within the intersection of these policies and those of the array user specified as the JWT `sub` (subject) claim.")
    issuer: Optional[StrictStr] = Field(default=None, description="The name of the identity provider that will be issuing ID Tokens for this API client. This string represents the JWT `iss` (issuer) claim in ID Tokens issued for this API client.")
    public_key: Optional[StrictStr] = Field(default=None, description="The API client's PEM formatted (Base64 encoded) RSA public key.")
    key_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the associated public key of this API client. This string must match the JWT `kid` (key ID) claim in ID Tokens issued for this API client.")
    enabled: Optional[StrictBool] = Field(default=None, description="If `true`, the API client is permitted to exchange ID Tokens for access tokens. API clients are disabled by default.")
    access_token_ttl_in_ms: Optional[StrictInt] = Field(default=None, description="The requested TTL (Time To Live) length of time for the exchanged access token, measured in milliseconds.")
    __properties: ClassVar[List[str]] = ["id", "name", "max_role", "access_policies", "issuer", "public_key", "key_id", "enabled", "access_token_ttl_in_ms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "name",
            "max_role",
            "access_policies",
            "issuer",
            "public_key",
            "key_id",
            "enabled",
            "access_token_ttl_in_ms",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in access_policies (list)
        if self.access_policies and (include_readonly or "access_policies" not in excluded_fields):
            _items = []
            for _item_access_policies in self.access_policies:
                if _item_access_policies:
                    _items.append(_item_access_policies.to_dict())
            _dict['access_policies'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "max_role": obj.get("max_role"),
            "access_policies": [FixedReferenceWithType.from_dict(_item) for _item in obj["access_policies"]] if obj.get("access_policies") is not None else None,
            "issuer": obj.get("issuer"),
            "public_key": obj.get("public_key"),
            "key_id": obj.get("key_id"),
            "enabled": obj.get("enabled"),
            "access_token_ttl_in_ms": obj.get("access_token_ttl_in_ms")
        })
        return _obj


