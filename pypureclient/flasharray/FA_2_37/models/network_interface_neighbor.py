# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.37
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt
from pypureclient.flasharray.FA_2_37.models.fixed_reference_no_id import FixedReferenceNoId
from pypureclient.flasharray.FA_2_37.models.network_interface_neighbor_neighbor_chassis import NetworkInterfaceNeighborNeighborChassis
from pypureclient.flasharray.FA_2_37.models.network_interface_neighbor_neighbor_port import NetworkInterfaceNeighborNeighborPort


class NetworkInterfaceNeighbor(BaseModel):
    """
    NetworkInterfaceNeighbor
    """
    initial_ttl_in_sec: Optional[StrictInt] = Field(default=None, description="The initial time to live in seconds from when the local port received notice that the neighbor information is regarded as valid. The time is not measured from when this endpoint was queried.")
    local_port: Optional[FixedReferenceNoId] = Field(default=None, description="A reference to the local network interface the neighbor is connected to.")
    neighbor_chassis: Optional[NetworkInterfaceNeighborNeighborChassis] = None
    neighbor_port: Optional[NetworkInterfaceNeighborNeighborPort] = None
    __properties = ["initial_ttl_in_sec", "local_port", "neighbor_chassis", "neighbor_port"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "initial_ttl_in_sec",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of local_port
        if _include_in_dict('local_port', include_readonly, excluded_fields, none_fields):
            _dict['local_port'] = self.local_port.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of neighbor_chassis
        if _include_in_dict('neighbor_chassis', include_readonly, excluded_fields, none_fields):
            _dict['neighbor_chassis'] = self.neighbor_chassis.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of neighbor_port
        if _include_in_dict('neighbor_port', include_readonly, excluded_fields, none_fields):
            _dict['neighbor_port'] = self.neighbor_port.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> NetworkInterfaceNeighbor:
        """Create an instance of NetworkInterfaceNeighbor from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkInterfaceNeighbor:
        """Create an instance of NetworkInterfaceNeighbor from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkInterfaceNeighbor.parse_obj(obj)

        _obj = NetworkInterfaceNeighbor.construct(_fields_set=None, **{
            "initial_ttl_in_sec": obj.get("initial_ttl_in_sec"),
            "local_port": FixedReferenceNoId.from_dict(obj.get("local_port")) if obj.get("local_port") is not None else None,
            "neighbor_chassis": NetworkInterfaceNeighborNeighborChassis.from_dict(obj.get("neighbor_chassis")) if obj.get("neighbor_chassis") is not None else None,
            "neighbor_port": NetworkInterfaceNeighborNeighborPort.from_dict(obj.get("neighbor_port")) if obj.get("neighbor_port") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

