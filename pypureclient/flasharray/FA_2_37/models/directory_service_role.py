# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.37
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_37.models.fixed_reference_with_type import FixedReferenceWithType
from pypureclient.flasharray.FA_2_37.models.reference_no_id import ReferenceNoId
from typing import Optional, Set
from typing_extensions import Self

class DirectoryServiceRole(BaseModel):
    """
    DirectoryServiceRole
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and cannot be changed.")
    role: Optional[ReferenceNoId] = Field(default=None, description="This field has been deprecated. Predecessor to management access policies.")
    management_access_policies: Optional[List[FixedReferenceWithType]] = Field(default=None, description="List of management access policies associated with the group.")
    group: Optional[StrictStr] = Field(default=None, description="Group name that contains users with the abilities granted by the associated policies.")
    group_base: Optional[StrictStr] = Field(default=None, description="Specifies where the configured group is located in the directory tree.")
    __properties: ClassVar[List[str]] = ["name", "role", "management_access_policies", "group", "group_base"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "management_access_policies",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role and (include_readonly or "role" not in excluded_fields):
            _dict['role'] = self.role.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in management_access_policies (list)
        if self.management_access_policies and (include_readonly or "management_access_policies" not in excluded_fields):
            _items = []
            for _item_management_access_policies in self.management_access_policies:
                if _item_management_access_policies:
                    _items.append(_item_management_access_policies.to_dict())
            _dict['management_access_policies'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectoryServiceRole from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectoryServiceRole from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "role": ReferenceNoId.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "management_access_policies": [FixedReferenceWithType.from_dict(_item) for _item in obj["management_access_policies"]] if obj.get("management_access_policies") is not None else None,
            "group": obj.get("group"),
            "group_base": obj.get("group_base")
        })
        return _obj


