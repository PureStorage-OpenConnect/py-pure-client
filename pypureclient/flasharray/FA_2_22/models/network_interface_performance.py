# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.22
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_22.models.network_interface_performance_eth import NetworkInterfacePerformanceEth
from pypureclient.flasharray.FA_2_22.models.network_interface_performance_fc import NetworkInterfacePerformanceFc
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterfacePerformance(BaseModel):
    """
    NetworkInterfacePerformance
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A user-specified name. The name must be locally unique and can be changed.")
    interface_type: Optional[StrictStr] = Field(default=None, description="The interface type. Valid values are `eth` and `fc`.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since UNIX epoch.")
    eth: Optional[NetworkInterfacePerformanceEth] = None
    fc: Optional[NetworkInterfacePerformanceFc] = None
    __properties: ClassVar[List[str]] = ["name", "interface_type", "time", "eth", "fc"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "interface_type",
            "time",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eth
        if self.eth and (include_readonly or "eth" not in excluded_fields):
            _dict['eth'] = self.eth.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fc
        if self.fc and (include_readonly or "fc" not in excluded_fields):
            _dict['fc'] = self.fc.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterfacePerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterfacePerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "interface_type": obj.get("interface_type"),
            "time": obj.get("time"),
            "eth": NetworkInterfacePerformanceEth.from_dict(obj["eth"]) if obj.get("eth") is not None else None,
            "fc": NetworkInterfacePerformanceFc.from_dict(obj["fc"]) if obj.get("fc") is not None else None
        })
        return _obj


