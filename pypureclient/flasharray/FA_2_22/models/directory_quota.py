# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.22
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pypureclient.flasharray.FA_2_22.models.fixed_reference_with_type import FixedReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class DirectoryQuota(BaseModel):
    """
    DirectoryQuota
    """ # noqa: E501
    directory: Optional[FixedReferenceWithType] = Field(default=None, description="The directory to which the quota applies.")
    enabled: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the policy is enabled.")
    enforced: Optional[StrictBool] = Field(default=None, description="Defines whether the quota rule is enforced or unenforced. If the quota rule is enforced and logical space usage exceeds the quota limit, any modification operations that result in a need for more space are blocked. If the quota rule is unenforced and logical space usage exceeds the quota limit, notification emails are sent to targets that are specified using the `notification` parameter. No client operations are blocked when an unenforced limit is exceeded. If set to `true`, the limit is enforced. If set to `false`, notification targets are informed when the usage exceeds 80 percent of the limit.")
    quota_limit: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Effective quota limit imposed by the quota policy rule attached to the directory, measured in bytes.")
    path: Optional[StrictStr] = Field(default=None, description="Absolute path of the directory in the file system.")
    percentage_used: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="The percentage of the space used in the directory with respect to the quota limit.")
    policy: Optional[FixedReferenceWithType] = Field(default=None, description="The effective quota policy that imposes the limit. This is the policy with the lowest limit.")
    rule_name: Optional[StrictStr] = Field(default=None, description="Name of the rule that results in this quota and behavior being applied to this directory.")
    usage: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The amount of logically written data for the directory, measured in bytes.")
    __properties: ClassVar[List[str]] = ["directory", "enabled", "enforced", "quota_limit", "path", "percentage_used", "policy", "rule_name", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "enabled",
            "quota_limit",
            "path",
            "percentage_used",
            "rule_name",
            "usage",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of directory
        if self.directory and (include_readonly or "directory" not in excluded_fields):
            _dict['directory'] = self.directory.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy and (include_readonly or "policy" not in excluded_fields):
            _dict['policy'] = self.policy.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DirectoryQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DirectoryQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "directory": FixedReferenceWithType.from_dict(obj["directory"]) if obj.get("directory") is not None else None,
            "enabled": obj.get("enabled"),
            "enforced": obj.get("enforced"),
            "quota_limit": obj.get("quota_limit"),
            "path": obj.get("path"),
            "percentage_used": obj.get("percentage_used"),
            "policy": FixedReferenceWithType.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "rule_name": obj.get("rule_name"),
            "usage": obj.get("usage")
        })
        return _obj


