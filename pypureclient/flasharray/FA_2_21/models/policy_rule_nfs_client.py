# coding: utf-8

"""
    FlashArray REST API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 2.21
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flasharray.FA_2_21.models.fixed_reference_with_type import FixedReferenceWithType
from typing import Optional, Set
from typing_extensions import Self

class PolicyRuleNfsClient(BaseModel):
    """
    PolicyRuleNfsClient
    """ # noqa: E501
    access: Optional[StrictStr] = Field(default=None, description="Specifies access control for the export. Valid values are `root-squash`, `all-squash`, and `no-root-squash`. `root-squash` prevents client users and groups with root privilege from mapping their root privilege to a file system. All users with UID 0 will have their UID mapped to anonuid. All users with GID 0 will have their GID mapped to anongid. `all-squash` maps all UIDs (including root) to anonuid and all GIDs (including root) to anongid. `no-root-squash` allows users and groups to access the file system with their UIDs and GIDs. The default is `root-squash` if not specified.")
    client: Optional[StrictStr] = Field(default=None, description="Specifies the clients that will be permitted to access the export. Accepted notation includes IP, IP mask, or hostname. The default is `*` if not specified.")
    name: Optional[StrictStr] = Field(default=None, description="Name of this rule. The name is automatically generated by the system.")
    policy: Optional[FixedReferenceWithType] = Field(default=None, description="The policy to which this rule belongs.")
    permission: Optional[StrictStr] = Field(default=None, description="Specifies which read-write client access permissions are allowed for the export. Valid values are `rw` and `ro`. The default is `rw` if not specified.")
    anongid: Optional[StrictStr] = Field(default=None, description="Any user whose GID is affected by an `access` of `root_squash` or `all_squash` will have their GID mapped to `anongid`. The default `anongid` is null, which means 65534. Use \"\" to clear. This value is ignored when user mapping is enabled - see User Guide for more details.")
    anonuid: Optional[StrictStr] = Field(default=None, description="Any user whose UID is affected by an `access` of `root_squash` or `all_squash` will have their UID mapped to `anonuid`. The default `anonuid` is null, which means 65534. Use \"\" to clear.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the pod containing the NFS policy rule has been destroyed and is pending eradication. The `time_remaining` value displays the amount of time left until the destroyed policy is permanently eradicated. Once the `time_remaining` period has elapsed, the NFS policy rule is permanently eradicated and can no longer be recovered.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="The amount of time left, in milliseconds, until the destroyed NFS policy rule is permanently eradicated.")
    __properties: ClassVar[List[str]] = ["access", "client", "name", "policy", "permission", "anongid", "anonuid", "destroyed", "time_remaining"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "access",
            "client",
            "name",
            "permission",
            "anongid",
            "anonuid",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy and (include_readonly or "policy" not in excluded_fields):
            _dict['policy'] = self.policy.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyRuleNfsClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyRuleNfsClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "access": obj.get("access"),
            "client": obj.get("client"),
            "name": obj.get("name"),
            "policy": FixedReferenceWithType.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "permission": obj.get("permission"),
            "anongid": obj.get("anongid"),
            "anonuid": obj.get("anonuid"),
            "destroyed": obj.get("destroyed"),
            "time_remaining": obj.get("time_remaining")
        })
        return _obj


