# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class Saml2SsoPost(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idp': 'Saml2SsoIdp',
        'binding': 'str',
        'services': 'list[str]',
        'prn': 'str',
        'sp': 'Saml2SsoSp',
        'enabled': 'bool',
        'array_url': 'str'
    }

    attribute_map = {
        'idp': 'idp',
        'binding': 'binding',
        'services': 'services',
        'prn': 'prn',
        'sp': 'sp',
        'enabled': 'enabled',
        'array_url': 'array_url'
    }

    required_args = {
    }

    def __init__(
        self,
        idp=None,  # type: models.Saml2SsoIdp
        binding=None,  # type: str
        services=None,  # type: List[str]
        prn=None,  # type: str
        sp=None,  # type: models.Saml2SsoSp
        enabled=None,  # type: bool
        array_url=None,  # type: str
    ):
        """
        Keyword args:
            idp (Saml2SsoIdp)
            binding (str): SAML2 binding to use for the request from Flashblade to the Identity Provider. Valid values: `http-redirect`, `none`. Defaults to `http-redirect`. 
            services (list[str]): Services that the SAML2 SSO authentication is used for. Valid values: `management`, `object`. Defaults to `management`. 
            prn (str): Pure Resource Name of the identity provider
            sp (Saml2SsoSp)
            enabled (bool): If set to `true`, the SAML2 SSO configuration is enabled.
            array_url (str): The URL of the array.
        """
        if idp is not None:
            self.idp = idp
        if binding is not None:
            self.binding = binding
        if services is not None:
            self.services = services
        if prn is not None:
            self.prn = prn
        if sp is not None:
            self.sp = sp
        if enabled is not None:
            self.enabled = enabled
        if array_url is not None:
            self.array_url = array_url

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Saml2SsoPost`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(Saml2SsoPost, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Saml2SsoPost):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
