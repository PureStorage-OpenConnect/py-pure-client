# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from pypureclient.flashblade.FB_2_17.models.bucket_defaults import BucketDefaults
from pypureclient.flashblade.FB_2_17.models.public_access_config import PublicAccessConfig


class ObjectStoreAccountPatch(BaseModel):
    """
    ObjectStoreAccountPatch
    """
    bucket_defaults: Optional[BucketDefaults] = Field(default=None, description="Default settings to be applied to newly created buckets associated with this account. Values here will be used in bucket creation requests which do not specify their own values for corresponding fields.")
    hard_limit_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, the account's size, as defined by `quota_limit`, is used as a hard limit quota. If set to `false`, a hard limit quota will not be applied to the account, but soft quota alerts will still be sent if the account has a value set for `quota_limit`.")
    public_access_config: Optional[PublicAccessConfig] = None
    quota_limit: Optional[StrictStr] = Field(default=None, description="The effective quota limit to be applied against the size of the account, displayed in bytes. If set to an empty string (`\"\"`), the account is unlimited in size.")
    __properties = ["bucket_defaults", "hard_limit_enabled", "public_access_config", "quota_limit"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bucket_defaults
        if _include_in_dict('bucket_defaults', include_readonly, excluded_fields, none_fields):
            _dict['bucket_defaults'] = self.bucket_defaults.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of public_access_config
        if _include_in_dict('public_access_config', include_readonly, excluded_fields, none_fields):
            _dict['public_access_config'] = self.public_access_config.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ObjectStoreAccountPatch:
        """Create an instance of ObjectStoreAccountPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ObjectStoreAccountPatch:
        """Create an instance of ObjectStoreAccountPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ObjectStoreAccountPatch.parse_obj(obj)

        _obj = ObjectStoreAccountPatch.construct(_fields_set=None, **{
            "bucket_defaults": BucketDefaults.from_dict(obj.get("bucket_defaults")) if obj.get("bucket_defaults") is not None else None,
            "hard_limit_enabled": obj.get("hard_limit_enabled"),
            "public_access_config": PublicAccessConfig.from_dict(obj.get("public_access_config")) if obj.get("public_access_config") is not None else None,
            "quota_limit": obj.get("quota_limit")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

