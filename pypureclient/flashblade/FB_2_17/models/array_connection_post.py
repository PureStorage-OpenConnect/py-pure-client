# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from pypureclient.flashblade.FB_2_17.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_17.models.reference import Reference
from pypureclient.flashblade.FB_2_17.models.throttle import Throttle


class ArrayConnectionPost(BaseModel):
    """
    ArrayConnectionPost
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    context: Optional[Reference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    ca_certificate_group: Optional[FixedReference] = Field(default=None, description="The group of CA certificates that can be used, in addition to well-known Certificate Authority certificates, in order to establish a secure connection to the target array. Defaults to a reference to the `_default_replication_certs` group if `secure_connection` is `true`, or `null` otherwise.")
    encrypted: Optional[StrictBool] = Field(default=None, description="If this is set to `true`, then all customer data replicated over the connection will be sent over an encrypted connection using TLS, or will not be sent if a secure connection cannot be established. If this is set to `false`, then all customer data replicated over the connection will be sent over an unencrypted connection. Defaults to `false`.")
    management_address: Optional[StrictStr] = Field(default=None, description="Management address of the target array. Settable on POST only.")
    os: Optional[StrictStr] = Field(default=None, description="The operating system of the connected array.")
    remote: Optional[FixedReference] = Field(default=None, description="The remote array.")
    replication_addresses: Optional[conlist(StrictStr)] = Field(default=None, description="IP addresses and/or FQDNs of the target arrays. Settable on POST only. If not set on POST, will be set to all the replication addresses available on the target array at the time of the POST.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the connection. Valid values include `connected`, `partially_connected`, `connecting`, and `incompatible`. `connected` - The connection is OK. `partially_connected` - Some replication addresses are working, but others are not. `connecting` - No connection exists and the array is trying to reconnect. `incompatible` - The target array is not compatible.")
    throttle: Optional[Throttle] = None
    type: Optional[StrictStr] = Field(default=None, description="The type of connection. Valid values include `async-replication` and `fleet-management`.")
    version: Optional[StrictStr] = Field(default=None, description="The version of the target array.")
    connection_key: Optional[StrictStr] = Field(default=None, description="The connection key of the target array. Settable on POST only.")
    __properties = ["id", "context", "ca_certificate_group", "encrypted", "management_address", "os", "remote", "replication_addresses", "status", "throttle", "type", "version", "connection_key"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "context",
                "os",
                "status",
                "type",
                "version",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of ca_certificate_group
        if _include_in_dict('ca_certificate_group', include_readonly, excluded_fields, none_fields):
            _dict['ca_certificate_group'] = self.ca_certificate_group.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote
        if _include_in_dict('remote', include_readonly, excluded_fields, none_fields):
            _dict['remote'] = self.remote.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of throttle
        if _include_in_dict('throttle', include_readonly, excluded_fields, none_fields):
            _dict['throttle'] = self.throttle.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ArrayConnectionPost:
        """Create an instance of ArrayConnectionPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ArrayConnectionPost:
        """Create an instance of ArrayConnectionPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArrayConnectionPost.parse_obj(obj)

        _obj = ArrayConnectionPost.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "context": Reference.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "ca_certificate_group": FixedReference.from_dict(obj.get("ca_certificate_group")) if obj.get("ca_certificate_group") is not None else None,
            "encrypted": obj.get("encrypted"),
            "management_address": obj.get("management_address"),
            "os": obj.get("os"),
            "remote": FixedReference.from_dict(obj.get("remote")) if obj.get("remote") is not None else None,
            "replication_addresses": obj.get("replication_addresses"),
            "status": obj.get("status"),
            "throttle": Throttle.from_dict(obj.get("throttle")) if obj.get("throttle") is not None else None,
            "type": obj.get("type"),
            "version": obj.get("version"),
            "connection_key": obj.get("connection_key")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

