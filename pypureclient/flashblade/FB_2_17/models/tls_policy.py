# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class TlsPolicy(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'policy_type': 'str',
        'location': 'FixedReference',
        'is_local': 'bool',
        'enabled': 'bool',
        'enabled_tls_ciphers': 'list[str]',
        'appliance_certificate': 'ReferenceWritable',
        'min_tls_version': 'str',
        'disabled_tls_ciphers': 'list[str]'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'policy_type': 'policy_type',
        'location': 'location',
        'is_local': 'is_local',
        'enabled': 'enabled',
        'enabled_tls_ciphers': 'enabled_tls_ciphers',
        'appliance_certificate': 'appliance_certificate',
        'min_tls_version': 'min_tls_version',
        'disabled_tls_ciphers': 'disabled_tls_ciphers'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        policy_type=None,  # type: str
        location=None,  # type: models.FixedReference
        is_local=None,  # type: bool
        enabled=None,  # type: bool
        enabled_tls_ciphers=None,  # type: List[str]
        appliance_certificate=None,  # type: models.ReferenceWritable
        min_tls_version=None,  # type: str
        disabled_tls_ciphers=None,  # type: List[str]
    ):
        """
        Keyword args:
            name (str): A name chosen by the user. Can be changed. Must be locally unique. 
            id (str): A non-modifiable, globally unique ID chosen by the system. 
            policy_type (str): Type of the policy. Valid values include `alert`, `audit`, `bucket-access`, `cross-origin-resource-sharing`, `network-access`, `nfs`, `object-access`, `smb-client`, `smb-share`, `snapshot`, `ssh-certificate-authority`, and `worm-data`. 
            location (FixedReference): Reference to the array where the policy is defined.
            is_local (bool): Whether the policy is defined on the local array.
            enabled (bool): If `true`, the policy is enabled. If not specified, defaults to `true`. 
            enabled_tls_ciphers (list[str]): If specified, enables only the specified TLS ciphers. If all TLS ciphers that are available for a specific TLS version on the system are disabled, then client  access over that TLS version is not possible. As such, the enabled ciphers must always contain at least one cipher for each enabled TLS version. Changes to this setting can disrupt traffic for any clients relying on ciphers that are removed. If set to `default`, then the enabled ciphers may be automatically adjusted upon upgrade to newer software in order to align with the best known practices at the time of software release. 
            appliance_certificate (ReferenceWritable): A reference to a certificate that will be presented as the server certificate in TLS negotiations with any clients that connect to appliance network addresses  to which this policy applies. 
            min_tls_version (str): The minimum TLS version that will be allowed for inbound connections on IPs to which this policy applies. Changing this setting can disrupt connections for  any clients relying on older TLS versions that are disabled. If set to `default`, then the lowest TLS version permitted may be automatically raised upon upgrade to newer software in order to align with the best known practices at the time of software release. Configuring an explicit, low value can prevent upgrades to newer software versions that no longer support older TLS versions. Valid values include `default`, `TLSv1.1`, `TLSv1.0`, `TLSv1.2`, and `TLSv1.3`. 
            disabled_tls_ciphers (list[str]): If specified, disables the specific TLS ciphers. If all TLS ciphers that are available for a specific TLS version on the system are disabled, then client access over that TLS version is not possible. As such, disabled ciphers must still result in at least one cipher being available for each enabled TLS version. Changes to this setting can disrupt traffic for any clients relying on disabled ciphers. 
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if policy_type is not None:
            self.policy_type = policy_type
        if location is not None:
            self.location = location
        if is_local is not None:
            self.is_local = is_local
        if enabled is not None:
            self.enabled = enabled
        if enabled_tls_ciphers is not None:
            self.enabled_tls_ciphers = enabled_tls_ciphers
        if appliance_certificate is not None:
            self.appliance_certificate = appliance_certificate
        if min_tls_version is not None:
            self.min_tls_version = min_tls_version
        if disabled_tls_ciphers is not None:
            self.disabled_tls_ciphers = disabled_tls_ciphers

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `TlsPolicy`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(TlsPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TlsPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
