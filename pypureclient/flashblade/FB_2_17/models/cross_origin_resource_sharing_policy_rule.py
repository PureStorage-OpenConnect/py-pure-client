# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class CrossOriginResourceSharingPolicyRule(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'allowed_methods': 'list[str]',
        'allowed_headers': 'list[str]',
        'allowed_origins': 'list[str]',
        'context': 'Reference',
        'policy': 'FixedReference'
    }

    attribute_map = {
        'name': 'name',
        'allowed_methods': 'allowed_methods',
        'allowed_headers': 'allowed_headers',
        'allowed_origins': 'allowed_origins',
        'context': 'context',
        'policy': 'policy'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        allowed_methods=None,  # type: List[str]
        allowed_headers=None,  # type: List[str]
        allowed_origins=None,  # type: List[str]
        context=None,  # type: models.Reference
        policy=None,  # type: models.FixedReference
    ):
        """
        Keyword args:
            name (str): Name of the object (e.g., a file system or snapshot).
            allowed_methods (list[str]): A list of HTTP methods that are permitted for cross-origin requests to access a bucket. The only currently supported combination of allowed methods is all methods `[\"GET\", \"PUT\", \"HEAD\", \"POST\", \"DELETE\"]`. 
            allowed_headers (list[str]): A list of headers that are permitted to be included in cross-origin requests to access a bucket. The only currently supported allowed header is `*`. 
            allowed_origins (list[str]): A list of origins (domains) that are permitted to make cross-origin requests to access a bucket. The only currently supported allowed origin is `*`. 
            context (Reference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
            policy (FixedReference): The policy to which this rule belongs.
        """
        if name is not None:
            self.name = name
        if allowed_methods is not None:
            self.allowed_methods = allowed_methods
        if allowed_headers is not None:
            self.allowed_headers = allowed_headers
        if allowed_origins is not None:
            self.allowed_origins = allowed_origins
        if context is not None:
            self.context = context
        if policy is not None:
            self.policy = policy

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `CrossOriginResourceSharingPolicyRule`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(CrossOriginResourceSharingPolicyRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CrossOriginResourceSharingPolicyRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
