# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from pypureclient.flashblade.FB_2_17.models.reference_writable import ReferenceWritable


class Saml2SsoIdp(BaseModel):
    """
    Properties specific to the identity provider.
    """
    encrypt_assertion_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, SAML assertions will be encrypted by the identity provider.")
    entity_id: Optional[StrictStr] = Field(default=None, description="A globally unique name for the identity provider.")
    metadata_url: Optional[StrictStr] = Field(default=None, description="The URL of the identity provider metadata.")
    metadata_url_ca_certificate: Optional[ReferenceWritable] = Field(default=None, description="CA certificate used to validate the authenticity of the configured Identity Provider server.")
    metadata_url_ca_certificate_group: Optional[ReferenceWritable] = Field(default=None, description="A certificate group containing CA certificates that can be used to validate the authenticity of the configured Identity Provider server.")
    sign_request_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, SAML requests will be signed by the service provider.")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the identity provider.")
    verification_certificate: Optional[ReferenceWritable] = Field(default=None, description="The certificate used by the service provider to verify the SAML response signature from the identity provider. The credential is managed by the `certificates` endpoint and `purecert` CLI commands.")
    __properties = ["encrypt_assertion_enabled", "entity_id", "metadata_url", "metadata_url_ca_certificate", "metadata_url_ca_certificate_group", "sign_request_enabled", "url", "verification_certificate"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of metadata_url_ca_certificate
        if _include_in_dict('metadata_url_ca_certificate', include_readonly, excluded_fields, none_fields):
            _dict['metadata_url_ca_certificate'] = self.metadata_url_ca_certificate.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of metadata_url_ca_certificate_group
        if _include_in_dict('metadata_url_ca_certificate_group', include_readonly, excluded_fields, none_fields):
            _dict['metadata_url_ca_certificate_group'] = self.metadata_url_ca_certificate_group.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of verification_certificate
        if _include_in_dict('verification_certificate', include_readonly, excluded_fields, none_fields):
            _dict['verification_certificate'] = self.verification_certificate.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Saml2SsoIdp:
        """Create an instance of Saml2SsoIdp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Saml2SsoIdp:
        """Create an instance of Saml2SsoIdp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Saml2SsoIdp.parse_obj(obj)

        _obj = Saml2SsoIdp.construct(_fields_set=None, **{
            "encrypt_assertion_enabled": obj.get("encrypt_assertion_enabled"),
            "entity_id": obj.get("entity_id"),
            "metadata_url": obj.get("metadata_url"),
            "metadata_url_ca_certificate": ReferenceWritable.from_dict(obj.get("metadata_url_ca_certificate")) if obj.get("metadata_url_ca_certificate") is not None else None,
            "metadata_url_ca_certificate_group": ReferenceWritable.from_dict(obj.get("metadata_url_ca_certificate_group")) if obj.get("metadata_url_ca_certificate_group") is not None else None,
            "sign_request_enabled": obj.get("sign_request_enabled"),
            "url": obj.get("url"),
            "verification_certificate": ReferenceWritable.from_dict(obj.get("verification_certificate")) if obj.get("verification_certificate") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

