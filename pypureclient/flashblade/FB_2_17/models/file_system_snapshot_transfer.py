# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class FileSystemSnapshotTransfer(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'context': 'Reference',
        'data_transferred': 'int',
        'progress': 'float',
        'started': 'int',
        'completed': 'int',
        'remote': 'FixedReferenceNoResourceType',
        'remote_snapshot': 'FixedReferenceNoResourceType',
        'direction': 'Direction',
        'local_snapshot': 'FixedReferenceNoResourceType',
        'status': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'context': 'context',
        'data_transferred': 'data_transferred',
        'progress': 'progress',
        'started': 'started',
        'completed': 'completed',
        'remote': 'remote',
        'remote_snapshot': 'remote_snapshot',
        'direction': 'direction',
        'local_snapshot': 'local_snapshot',
        'status': 'status'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        context=None,  # type: models.Reference
        data_transferred=None,  # type: int
        progress=None,  # type: float
        started=None,  # type: int
        completed=None,  # type: int
        remote=None,  # type: models.FixedReferenceNoResourceType
        remote_snapshot=None,  # type: models.FixedReferenceNoResourceType
        direction=None,  # type: models.Direction
        local_snapshot=None,  # type: models.FixedReferenceNoResourceType
        status=None,  # type: str
    ):
        """
        Keyword args:
            name (str): Name of the object (e.g., a file system or snapshot).
            id (str): A non-modifiable, globally unique ID chosen by the system. 
            context (Reference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
            data_transferred (int): The amount of data transferred to the target, in bytes.
            progress (float): A percentage that indicates how much progress has been made on the transfer. 
            started (int): A timestamp at which the replication of the snapshot started. 
            completed (int): A timestamp at which the replication of the snapshot completed. 
            remote (FixedReferenceNoResourceType): The array where the remote file system snapshot is located. 
            remote_snapshot (FixedReferenceNoResourceType): A reference to the associated remote file system snapshot. 
            direction (Direction)
            local_snapshot (FixedReferenceNoResourceType): A reference to the associated local file system snapshot. 
            status (str): The status of current replication. Valid values are `completed`, `in-progress`, and `queued`. 
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if context is not None:
            self.context = context
        if data_transferred is not None:
            self.data_transferred = data_transferred
        if progress is not None:
            self.progress = progress
        if started is not None:
            self.started = started
        if completed is not None:
            self.completed = completed
        if remote is not None:
            self.remote = remote
        if remote_snapshot is not None:
            self.remote_snapshot = remote_snapshot
        if direction is not None:
            self.direction = direction
        if local_snapshot is not None:
            self.local_snapshot = local_snapshot
        if status is not None:
            self.status = status

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `FileSystemSnapshotTransfer`".format(key))
        if key == "progress" and value is not None:
            if value > 1:
                raise ValueError("Invalid value for `progress`, value must be less than or equal to `1`")
            if value < 0:
                raise ValueError("Invalid value for `progress`, must be a value greater than or equal to `0`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(FileSystemSnapshotTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemSnapshotTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
