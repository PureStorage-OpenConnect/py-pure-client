# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist


class TrustPolicyRuleCondition(BaseModel):
    """
    Identity-provider-specific condition that specifies who can assume the role.
    """
    key: Optional[StrictStr] = Field(default=None, description="Key from the context of the role assuming request that will have its value compared based on the operator specified in this condition to the values provided in this condition.")
    operator: Optional[StrictStr] = Field(default=None, description="Operator specifying the comparison to be done between the values from the request context and the values provided in this condition. Valid values: `StringEquals`.")
    values: Optional[conlist(StrictStr)] = Field(default=None, description="Values to be compared with the values in the role assuming request context identified by the key. If multiple values are specified, it's sufficient if just one matches.")
    __properties = ["key", "operator", "values"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> TrustPolicyRuleCondition:
        """Create an instance of TrustPolicyRuleCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> TrustPolicyRuleCondition:
        """Create an instance of TrustPolicyRuleCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TrustPolicyRuleCondition.parse_obj(obj)

        _obj = TrustPolicyRuleCondition.construct(_fields_set=None, **{
            "key": obj.get("key"),
            "operator": obj.get("operator"),
            "values": obj.get("values")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

