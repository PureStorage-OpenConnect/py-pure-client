# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint
from pypureclient.flashblade.FB_2_17.models.fixed_reference import FixedReference


class PasswordPolicy(BaseModel):
    """
    PasswordPolicy
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A name chosen by the user. Can be changed. Must be locally unique.")
    enabled: Optional[StrictBool] = Field(default=None, description="If `true`, the policy is enabled. If not specified, defaults to `true`.")
    is_local: Optional[StrictBool] = Field(default=None, description="Whether the policy is defined on the local array.")
    location: Optional[FixedReference] = Field(default=None, description="Reference to the array where the policy is defined.")
    policy_type: Optional[StrictStr] = Field(default=None, description="Type of the policy. Valid values include `alert`, `audit`, `bucket-access`, `cross-origin-resource-sharing`, `network-access`, `nfs`, `object-access`, `smb-client`, `smb-share`, `snapshot`, `ssh-certificate-authority`, and `worm-data`.")
    enforce_dictionary_check: Optional[StrictBool] = Field(default=None, description="If `true`, test password against dictionary of known leaked passwords. Requires passwords longer than 6 characters.")
    enforce_username_check: Optional[StrictBool] = Field(default=None, description="If `true`, the username cannot be a substring of the password. Only applies to usernames of 4 characters and longer.")
    lockout_duration: Optional[conint(strict=True, le=7776000000, ge=0)] = Field(default=None, description="The lockout duration, in milliseconds, if a user is locked out after reaching the maximum number of login attempts. Ranges from 1 second to 90 days.")
    max_login_attempts: Optional[conint(strict=True, le=100, ge=0)] = Field(default=None, description="Maximum number of failed login attempts allowed before the user is locked out.")
    min_character_groups: Optional[conint(strict=True, le=4, ge=0)] = Field(default=None, description="The minimum number of character groups ([a-z], [A-Z], [0-9], other) required to be present in a password.")
    min_characters_per_group: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The minimum number of characters per group to count the group as present.")
    min_password_age: Optional[conint(strict=True, le=604800000, ge=0)] = Field(default=None, description="The minimum age, in milliseconds, of password before password change is allowed. Ranges from 0 ms to 7 days with precision to 1 hour.")
    min_password_length: Optional[conint(strict=True, le=100, ge=0)] = Field(default=None, description="Minimum password length. If not specified, defaults to 1.")
    password_history: Optional[conint(strict=True, le=64, ge=0)] = Field(default=None, description="The number of passwords tracked to prevent reuse of passwords.")
    __properties = ["id", "name", "enabled", "is_local", "location", "policy_type", "enforce_dictionary_check", "enforce_username_check", "lockout_duration", "max_login_attempts", "min_character_groups", "min_characters_per_group", "min_password_age", "min_password_length", "password_history"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "is_local",
                "policy_type",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of location
        if _include_in_dict('location', include_readonly, excluded_fields, none_fields):
            _dict['location'] = self.location.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PasswordPolicy:
        """Create an instance of PasswordPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PasswordPolicy:
        """Create an instance of PasswordPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PasswordPolicy.parse_obj(obj)

        _obj = PasswordPolicy.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "enabled": obj.get("enabled"),
            "is_local": obj.get("is_local"),
            "location": FixedReference.from_dict(obj.get("location")) if obj.get("location") is not None else None,
            "policy_type": obj.get("policy_type"),
            "enforce_dictionary_check": obj.get("enforce_dictionary_check"),
            "enforce_username_check": obj.get("enforce_username_check"),
            "lockout_duration": obj.get("lockout_duration"),
            "max_login_attempts": obj.get("max_login_attempts"),
            "min_character_groups": obj.get("min_character_groups"),
            "min_characters_per_group": obj.get("min_characters_per_group"),
            "min_password_age": obj.get("min_password_age"),
            "min_password_length": obj.get("min_password_length"),
            "password_history": obj.get("password_history")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

