# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from pypureclient.flashblade.FB_2_17.models.file_lock_range import FileLockRange
from pypureclient.flashblade.FB_2_17.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_17.models.fixed_reference_no_id import FixedReferenceNoId


class FileLock(BaseModel):
    """
    FileLock
    """
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    access_type: Optional[StrictStr] = Field(default=None, description="Type of access the lock provides. Valid values are `shared`, `exclusive` and `no-access`.")
    client: Optional[FixedReferenceNoId] = Field(default=None, description="Reference to the file system client that holds the lock.")
    created_at: Optional[StrictInt] = Field(default=None, description="Creation timestamp of the lock. Measured in milliseconds since the UNIX epoch.")
    inode: Optional[StrictInt] = Field(default=None, description="The inode of the file where the lock is found relative to the specified `source`.")
    path: Optional[StrictStr] = Field(default=None, description="Path to the file where the lock is found relative to `source`. If it is longer than 1023 characters, it will be truncated and only the last 1023 characters will be returned. If multiple hard links exist to the file on which the lock is held, only one is returned. This field will be `null` if the path cannot be resolved.")
    protocol: Optional[StrictStr] = Field(default=None, description="The protocol utilized for obtaining and managing the lock. Valid values include `NLM`, `NFSv4.1` and `SMB`.")
    range: Optional[FileLockRange] = None
    source: Optional[FixedReference] = Field(default=None, description="Reference to location where the path/inode can be found.")
    __properties = ["name", "access_type", "client", "created_at", "inode", "path", "protocol", "range", "source"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "name",
                "access_type",
                "inode",
                "path",
                "protocol",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client
        if _include_in_dict('client', include_readonly, excluded_fields, none_fields):
            _dict['client'] = self.client.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of range
        if _include_in_dict('range', include_readonly, excluded_fields, none_fields):
            _dict['range'] = self.range.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of source
        if _include_in_dict('source', include_readonly, excluded_fields, none_fields):
            _dict['source'] = self.source.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> FileLock:
        """Create an instance of FileLock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> FileLock:
        """Create an instance of FileLock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileLock.parse_obj(obj)

        _obj = FileLock.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "access_type": obj.get("access_type"),
            "client": FixedReferenceNoId.from_dict(obj.get("client")) if obj.get("client") is not None else None,
            "created_at": obj.get("created_at"),
            "inode": obj.get("inode"),
            "path": obj.get("path"),
            "protocol": obj.get("protocol"),
            "range": FileLockRange.from_dict(obj.get("range")) if obj.get("range") is not None else None,
            "source": FixedReference.from_dict(obj.get("source")) if obj.get("source") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

