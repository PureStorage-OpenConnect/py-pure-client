# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class ObjectStoreRole(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'context': 'Reference',
        'trusted_entities': 'list[FixedReference]',
        'created': 'int',
        'prn': 'str',
        'account': 'FixedReference',
        'max_session_duration': 'int'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'context': 'context',
        'trusted_entities': 'trusted_entities',
        'created': 'created',
        'prn': 'prn',
        'account': 'account',
        'max_session_duration': 'max_session_duration'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        context=None,  # type: models.Reference
        trusted_entities=None,  # type: List[models.FixedReference]
        created=None,  # type: int
        prn=None,  # type: str
        account=None,  # type: models.FixedReference
        max_session_duration=None,  # type: int
    ):
        """
        Keyword args:
            name (str): Name of the object (e.g., a file system or snapshot).
            id (str): A non-modifiable, globally unique ID chosen by the system. 
            context (Reference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
            trusted_entities (list[FixedReference]): List of trusted entities
            created (int): Creation timestamp of the object.
            prn (str): Pure Resource Name of the role
            account (FixedReference): Reference of the associated account.
            max_session_duration (int): The maximum session duration for the role in milliseconds 
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if context is not None:
            self.context = context
        if trusted_entities is not None:
            self.trusted_entities = trusted_entities
        if created is not None:
            self.created = created
        if prn is not None:
            self.prn = prn
        if account is not None:
            self.account = account
        if max_session_duration is not None:
            self.max_session_duration = max_session_duration

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `ObjectStoreRole`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(ObjectStoreRole, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectStoreRole):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
