# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class NetworkInterfacesConnectorsPerformance(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'link_aggregation_group': 'FixedReference',
        'received_crc_errors_per_sec': 'int',
        'transmitted_dropped_errors_per_sec': 'int',
        'transmitted_packets_per_sec': 'int',
        'transmitted_carrier_errors_per_sec': 'int',
        'transmitted_bytes_per_sec': 'int',
        'received_bytes_per_sec': 'int',
        'received_frame_errors_per_sec': 'int',
        'other_errors_per_sec': 'int',
        'time': 'int',
        'total_errors_per_sec': 'int',
        'received_packets_per_sec': 'int',
        'flow_control_received_pause_frames_per_sec': 'int',
        'rdma_received_req_cqe_errors_per_sec': 'int',
        'flow_control_transmitted_lossless_bytes_per_sec': 'int',
        'rdma_received_sequence_errors_per_sec': 'int',
        'flow_control_transmitted_pause_frames_per_sec': 'int',
        'flow_control_received_congestion_packets_per_sec': 'int',
        'flow_control_transmitted_congestion_packets_per_sec': 'int',
        'rdma_transmitted_local_ack_timeout_errors_per_sec': 'int',
        'flow_control_received_discarded_packets_per_sec': 'int',
        'flow_control_transmitted_discarded_packets_per_sec': 'int',
        'flow_control_received_lossless_bytes_per_sec': 'int'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'link_aggregation_group': 'link_aggregation_group',
        'received_crc_errors_per_sec': 'received_crc_errors_per_sec',
        'transmitted_dropped_errors_per_sec': 'transmitted_dropped_errors_per_sec',
        'transmitted_packets_per_sec': 'transmitted_packets_per_sec',
        'transmitted_carrier_errors_per_sec': 'transmitted_carrier_errors_per_sec',
        'transmitted_bytes_per_sec': 'transmitted_bytes_per_sec',
        'received_bytes_per_sec': 'received_bytes_per_sec',
        'received_frame_errors_per_sec': 'received_frame_errors_per_sec',
        'other_errors_per_sec': 'other_errors_per_sec',
        'time': 'time',
        'total_errors_per_sec': 'total_errors_per_sec',
        'received_packets_per_sec': 'received_packets_per_sec',
        'flow_control_received_pause_frames_per_sec': 'flow_control_received_pause_frames_per_sec',
        'rdma_received_req_cqe_errors_per_sec': 'rdma_received_req_cqe_errors_per_sec',
        'flow_control_transmitted_lossless_bytes_per_sec': 'flow_control_transmitted_lossless_bytes_per_sec',
        'rdma_received_sequence_errors_per_sec': 'rdma_received_sequence_errors_per_sec',
        'flow_control_transmitted_pause_frames_per_sec': 'flow_control_transmitted_pause_frames_per_sec',
        'flow_control_received_congestion_packets_per_sec': 'flow_control_received_congestion_packets_per_sec',
        'flow_control_transmitted_congestion_packets_per_sec': 'flow_control_transmitted_congestion_packets_per_sec',
        'rdma_transmitted_local_ack_timeout_errors_per_sec': 'rdma_transmitted_local_ack_timeout_errors_per_sec',
        'flow_control_received_discarded_packets_per_sec': 'flow_control_received_discarded_packets_per_sec',
        'flow_control_transmitted_discarded_packets_per_sec': 'flow_control_transmitted_discarded_packets_per_sec',
        'flow_control_received_lossless_bytes_per_sec': 'flow_control_received_lossless_bytes_per_sec'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        link_aggregation_group=None,  # type: models.FixedReference
        received_crc_errors_per_sec=None,  # type: int
        transmitted_dropped_errors_per_sec=None,  # type: int
        transmitted_packets_per_sec=None,  # type: int
        transmitted_carrier_errors_per_sec=None,  # type: int
        transmitted_bytes_per_sec=None,  # type: int
        received_bytes_per_sec=None,  # type: int
        received_frame_errors_per_sec=None,  # type: int
        other_errors_per_sec=None,  # type: int
        time=None,  # type: int
        total_errors_per_sec=None,  # type: int
        received_packets_per_sec=None,  # type: int
        flow_control_received_pause_frames_per_sec=None,  # type: int
        rdma_received_req_cqe_errors_per_sec=None,  # type: int
        flow_control_transmitted_lossless_bytes_per_sec=None,  # type: int
        rdma_received_sequence_errors_per_sec=None,  # type: int
        flow_control_transmitted_pause_frames_per_sec=None,  # type: int
        flow_control_received_congestion_packets_per_sec=None,  # type: int
        flow_control_transmitted_congestion_packets_per_sec=None,  # type: int
        rdma_transmitted_local_ack_timeout_errors_per_sec=None,  # type: int
        flow_control_received_discarded_packets_per_sec=None,  # type: int
        flow_control_transmitted_discarded_packets_per_sec=None,  # type: int
        flow_control_received_lossless_bytes_per_sec=None,  # type: int
    ):
        """
        Keyword args:
            name (str): Name of the object (e.g., a file system or snapshot).
            id (str): A non-modifiable, globally unique ID chosen by the system. 
            link_aggregation_group (FixedReference): The link aggregation group which this entity belongs to.
            received_crc_errors_per_sec (int): Reception CRC errors per second. 
            transmitted_dropped_errors_per_sec (int): Transmitted packets dropped per second. 
            transmitted_packets_per_sec (int): Packets transmitted per second. 
            transmitted_carrier_errors_per_sec (int): Transmission carrier errors per second. 
            transmitted_bytes_per_sec (int): Bytes transmitted per second. 
            received_bytes_per_sec (int): Bytes received per second. 
            received_frame_errors_per_sec (int): Received packet frame errors per second. 
            other_errors_per_sec (int): The sum of unspecified reception and transmission errors per second. 
            time (int): Sample time in milliseconds since UNIX epoch. 
            total_errors_per_sec (int): The sum of all reception and transmission errors per second. 
            received_packets_per_sec (int): Packets received per second. 
            flow_control_received_pause_frames_per_sec (int): Received pause frames per second. 
            rdma_received_req_cqe_errors_per_sec (int): The number of times port detected RDMA CQEs with error per second. 
            flow_control_transmitted_lossless_bytes_per_sec (int): Bytes transmitted per second with lossless flow control settings. 
            rdma_received_sequence_errors_per_sec (int): The number of received RDMA packet sequence errors per second. 
            flow_control_transmitted_pause_frames_per_sec (int): Transmitted pause frames per second. 
            flow_control_received_congestion_packets_per_sec (int): Number of congestion control packets received per second. 
            flow_control_transmitted_congestion_packets_per_sec (int): Number of congestion control packets transmitted per second. 
            rdma_transmitted_local_ack_timeout_errors_per_sec (int): The number of times RDMA ack timer expired for QPs per second. 
            flow_control_received_discarded_packets_per_sec (int): Number of received packets that were physically discarded per second due to errors or other reasons. 
            flow_control_transmitted_discarded_packets_per_sec (int): Number of transmitted packets that were physically discarded by the NIC per second due to errors or other reasons. 
            flow_control_received_lossless_bytes_per_sec (int): Bytes received per second with lossless flow control settings. 
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if link_aggregation_group is not None:
            self.link_aggregation_group = link_aggregation_group
        if received_crc_errors_per_sec is not None:
            self.received_crc_errors_per_sec = received_crc_errors_per_sec
        if transmitted_dropped_errors_per_sec is not None:
            self.transmitted_dropped_errors_per_sec = transmitted_dropped_errors_per_sec
        if transmitted_packets_per_sec is not None:
            self.transmitted_packets_per_sec = transmitted_packets_per_sec
        if transmitted_carrier_errors_per_sec is not None:
            self.transmitted_carrier_errors_per_sec = transmitted_carrier_errors_per_sec
        if transmitted_bytes_per_sec is not None:
            self.transmitted_bytes_per_sec = transmitted_bytes_per_sec
        if received_bytes_per_sec is not None:
            self.received_bytes_per_sec = received_bytes_per_sec
        if received_frame_errors_per_sec is not None:
            self.received_frame_errors_per_sec = received_frame_errors_per_sec
        if other_errors_per_sec is not None:
            self.other_errors_per_sec = other_errors_per_sec
        if time is not None:
            self.time = time
        if total_errors_per_sec is not None:
            self.total_errors_per_sec = total_errors_per_sec
        if received_packets_per_sec is not None:
            self.received_packets_per_sec = received_packets_per_sec
        if flow_control_received_pause_frames_per_sec is not None:
            self.flow_control_received_pause_frames_per_sec = flow_control_received_pause_frames_per_sec
        if rdma_received_req_cqe_errors_per_sec is not None:
            self.rdma_received_req_cqe_errors_per_sec = rdma_received_req_cqe_errors_per_sec
        if flow_control_transmitted_lossless_bytes_per_sec is not None:
            self.flow_control_transmitted_lossless_bytes_per_sec = flow_control_transmitted_lossless_bytes_per_sec
        if rdma_received_sequence_errors_per_sec is not None:
            self.rdma_received_sequence_errors_per_sec = rdma_received_sequence_errors_per_sec
        if flow_control_transmitted_pause_frames_per_sec is not None:
            self.flow_control_transmitted_pause_frames_per_sec = flow_control_transmitted_pause_frames_per_sec
        if flow_control_received_congestion_packets_per_sec is not None:
            self.flow_control_received_congestion_packets_per_sec = flow_control_received_congestion_packets_per_sec
        if flow_control_transmitted_congestion_packets_per_sec is not None:
            self.flow_control_transmitted_congestion_packets_per_sec = flow_control_transmitted_congestion_packets_per_sec
        if rdma_transmitted_local_ack_timeout_errors_per_sec is not None:
            self.rdma_transmitted_local_ack_timeout_errors_per_sec = rdma_transmitted_local_ack_timeout_errors_per_sec
        if flow_control_received_discarded_packets_per_sec is not None:
            self.flow_control_received_discarded_packets_per_sec = flow_control_received_discarded_packets_per_sec
        if flow_control_transmitted_discarded_packets_per_sec is not None:
            self.flow_control_transmitted_discarded_packets_per_sec = flow_control_transmitted_discarded_packets_per_sec
        if flow_control_received_lossless_bytes_per_sec is not None:
            self.flow_control_received_lossless_bytes_per_sec = flow_control_received_lossless_bytes_per_sec

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `NetworkInterfacesConnectorsPerformance`".format(key))
        if key == "received_crc_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_crc_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "transmitted_dropped_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_dropped_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "transmitted_packets_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_packets_per_sec`, must be a value greater than or equal to `0`")
        if key == "transmitted_carrier_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_carrier_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "transmitted_bytes_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `transmitted_bytes_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_bytes_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_bytes_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_frame_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_frame_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "other_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `other_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "total_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `total_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "received_packets_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `received_packets_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_received_pause_frames_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_received_pause_frames_per_sec`, must be a value greater than or equal to `0`")
        if key == "rdma_received_req_cqe_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `rdma_received_req_cqe_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_transmitted_lossless_bytes_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_transmitted_lossless_bytes_per_sec`, must be a value greater than or equal to `0`")
        if key == "rdma_received_sequence_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `rdma_received_sequence_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_transmitted_pause_frames_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_transmitted_pause_frames_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_received_congestion_packets_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_received_congestion_packets_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_transmitted_congestion_packets_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_transmitted_congestion_packets_per_sec`, must be a value greater than or equal to `0`")
        if key == "rdma_transmitted_local_ack_timeout_errors_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `rdma_transmitted_local_ack_timeout_errors_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_received_discarded_packets_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_received_discarded_packets_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_transmitted_discarded_packets_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_transmitted_discarded_packets_per_sec`, must be a value greater than or equal to `0`")
        if key == "flow_control_received_lossless_bytes_per_sec" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `flow_control_received_lossless_bytes_per_sec`, must be a value greater than or equal to `0`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(NetworkInterfacesConnectorsPerformance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterfacesConnectorsPerformance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
