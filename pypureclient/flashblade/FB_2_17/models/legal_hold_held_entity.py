# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class LegalHoldHeldEntity(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'str',
        'file_system': 'FixedReference',
        'legal_hold': 'FixedReference',
        'status': 'str'
    }

    attribute_map = {
        'path': 'path',
        'file_system': 'file_system',
        'legal_hold': 'legal_hold',
        'status': 'status'
    }

    required_args = {
    }

    def __init__(
        self,
        path=None,  # type: str
        file_system=None,  # type: models.FixedReference
        legal_hold=None,  # type: models.FixedReference
        status=None,  # type: str
    ):
        """
        Keyword args:
            path (str): The path of the file or directory being held.
            file_system (FixedReference): Reference to the file system that the legal hold is applied to.
            legal_hold (FixedReference): Reference to the legal hold.
            status (str): The status of the legal hold with respect to the held entity. Valid values include: `applied` for holds that are actively applied, `applying` for holds that are being recursively applied but have not yet completed, `releasing` for holds that are being released recursively but have not yet completed. Entities that are releasing will no longer be held once this operation completes. 
        """
        if path is not None:
            self.path = path
        if file_system is not None:
            self.file_system = file_system
        if legal_hold is not None:
            self.legal_hold = legal_hold
        if status is not None:
            self.status = status

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `LegalHoldHeldEntity`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(LegalHoldHeldEntity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LegalHoldHeldEntity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
