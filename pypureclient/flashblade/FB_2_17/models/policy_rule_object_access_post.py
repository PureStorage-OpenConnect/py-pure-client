# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from pypureclient.flashblade.FB_2_17.models.policy_rule_object_access_condition import PolicyRuleObjectAccessCondition


class PolicyRuleObjectAccessPost(BaseModel):
    """
    PolicyRuleObjectAccessPost
    """
    actions: Optional[conlist(StrictStr)] = Field(default=None, description="The list of actions granted by this rule. Each included action may restrict other properties of the rule. Supported actions are returned by the `/object-store-access-policy-actions` endpoint.")
    conditions: Optional[PolicyRuleObjectAccessCondition] = Field(default=None, description="Conditions used to limit the scope which this rule applies to.")
    effect: Optional[StrictStr] = Field(default=None, description="Effect of this rule. When `allow`, the rule allows the given actions to be performed on the given resources, subject to the given conditions. When `deny`, the rule disallows performing the given actions on the given resources, subject to the given condition. This takes precedence over any matching `allow` rules. Valid values include `allow` and `deny`.")
    resources: Optional[conlist(StrictStr)] = Field(default=None, description="The list of resources which this rule applies to. Each resource can include a bucket component, optionally followed by an object component. The choice of which components a resource can include is dictated by which actions are included in the rule. For further details, see the Object Store Access Policy Actions section of the User Guide.")
    __properties = ["actions", "conditions", "effect", "resources"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of conditions
        if _include_in_dict('conditions', include_readonly, excluded_fields, none_fields):
            _dict['conditions'] = self.conditions.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> PolicyRuleObjectAccessPost:
        """Create an instance of PolicyRuleObjectAccessPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyRuleObjectAccessPost:
        """Create an instance of PolicyRuleObjectAccessPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyRuleObjectAccessPost.parse_obj(obj)

        _obj = PolicyRuleObjectAccessPost.construct(_fields_set=None, **{
            "actions": obj.get("actions"),
            "conditions": PolicyRuleObjectAccessCondition.from_dict(obj.get("conditions")) if obj.get("conditions") is not None else None,
            "effect": obj.get("effect"),
            "resources": obj.get("resources")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

