# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class WormDataPolicy(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'policy_type': 'str',
        'location': 'FixedReference',
        'is_local': 'bool',
        'enabled': 'bool',
        'mode': 'str',
        'default_retention': 'int',
        'max_retention': 'int',
        'min_retention': 'int',
        'retention_lock': 'str',
        'context': 'Reference'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'policy_type': 'policy_type',
        'location': 'location',
        'is_local': 'is_local',
        'enabled': 'enabled',
        'mode': 'mode',
        'default_retention': 'default_retention',
        'max_retention': 'max_retention',
        'min_retention': 'min_retention',
        'retention_lock': 'retention_lock',
        'context': 'context'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        policy_type=None,  # type: str
        location=None,  # type: models.FixedReference
        is_local=None,  # type: bool
        enabled=None,  # type: bool
        mode=None,  # type: str
        default_retention=None,  # type: int
        max_retention=None,  # type: int
        min_retention=None,  # type: int
        retention_lock=None,  # type: str
        context=None,  # type: models.Reference
    ):
        """
        Keyword args:
            name (str): Name of the object (e.g., a file system or snapshot).
            id (str): A non-modifiable, globally unique ID chosen by the system. 
            policy_type (str): Type of the policy. Valid values include `alert`, `audit`, `bucket-access`, `cross-origin-resource-sharing`, `network-access`, `nfs`, `object-access`, `smb-client`, `smb-share`, `snapshot`, `ssh-certificate-authority`, and `worm-data`. 
            location (FixedReference): Reference to the array where the policy is defined.
            is_local (bool): Whether the policy is defined on the local array.
            enabled (bool): If `true`, the policy is enabled. If not specified, defaults to `true`. 
            mode (str): The type of the retention lock. Valid values is `compliance`. 
            default_retention (int): Default retention period, in milliseconds. If the access time is not specified when committing a file, then the default retention period is applied. 
            max_retention (int): Maximum retention period, in milliseconds. 
            min_retention (int): Minimum retention period, in milliseconds. 
            retention_lock (str): If set to `locked`, then the value of retention attributes or policy attributes are not allowed to change. If set to `unlocked`, then the value of the retention attributes and policy attributes are allowed to change. Valid values are `unlocked` and `locked`. It is always allowed to change from `unlocked` to `locked`. Contact Pure Technical Services to change from `locked` to `unlocked`. 
            context (Reference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if policy_type is not None:
            self.policy_type = policy_type
        if location is not None:
            self.location = location
        if is_local is not None:
            self.is_local = is_local
        if enabled is not None:
            self.enabled = enabled
        if mode is not None:
            self.mode = mode
        if default_retention is not None:
            self.default_retention = default_retention
        if max_retention is not None:
            self.max_retention = max_retention
        if min_retention is not None:
            self.min_retention = min_retention
        if retention_lock is not None:
            self.retention_lock = retention_lock
        if context is not None:
            self.context = context

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `WormDataPolicy`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(WormDataPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WormDataPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
