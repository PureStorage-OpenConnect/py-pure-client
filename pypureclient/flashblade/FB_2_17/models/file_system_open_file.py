# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class FileSystemOpenFile(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mode': 'str',
        'lock_count': 'int',
        'path': 'str',
        'session': 'FixedReferenceNameOnly',
        'client': 'FixedReferenceNameOnly',
        'id': 'str',
        'source': 'FixedReference',
        'user': 'UserNoId'
    }

    attribute_map = {
        'mode': 'mode',
        'lock_count': 'lock_count',
        'path': 'path',
        'session': 'session',
        'client': 'client',
        'id': 'id',
        'source': 'source',
        'user': 'user'
    }

    required_args = {
    }

    def __init__(
        self,
        mode=None,  # type: str
        lock_count=None,  # type: int
        path=None,  # type: str
        session=None,  # type: models.FixedReferenceNameOnly
        client=None,  # type: models.FixedReferenceNameOnly
        id=None,  # type: str
        source=None,  # type: models.FixedReference
        user=None,  # type: models.UserNoId
    ):
        """
        Keyword args:
            mode (str): The mode in which the file is open: \"ro\" for Read-Only, \"wo\" for Write-Only, \"rw\" for Read-Write or \"no-access\" if no read or write access was granted. 
            lock_count (int): The number of locks on the file.
            path (str): The path to the open file.
            session (FixedReferenceNameOnly): The name of the session with the open file. 
            client (FixedReferenceNameOnly): Client that has the file open. 
            id (str): The unique identifier of the open file.
            source (FixedReference): Reference to the file system.
            user (UserNoId): The user who has the file open.
        """
        if mode is not None:
            self.mode = mode
        if lock_count is not None:
            self.lock_count = lock_count
        if path is not None:
            self.path = path
        if session is not None:
            self.session = session
        if client is not None:
            self.client = client
        if id is not None:
            self.id = id
        if source is not None:
            self.source = source
        if user is not None:
            self.user = user

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `FileSystemOpenFile`".format(key))
        if key == "lock_count" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `lock_count`, must be a value greater than or equal to `0`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(FileSystemOpenFile, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemOpenFile):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
