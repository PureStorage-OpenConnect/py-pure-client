# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.17
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional, Union
from pydantic import BaseModel, Field, StrictInt, StrictStr, confloat, conint
from pypureclient.flashblade.FB_2_17.models.reference import Reference


class ArrayNfsSpecificPerformance(BaseModel):
    """
    ArrayNfsSpecificPerformance
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    context: Optional[Reference] = Field(default=None, description="The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request. Other parameters provided with the request, such as names of volumes or snapshots, are resolved relative to the provided `context`.")
    accesses_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="ACCESS requests processed per second.")
    aggregate_file_metadata_creates_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Sum of file-level or directory-level create-like metadata requests per second. Includes CREATE, LINK, MKDIR, and SYMLINK.")
    aggregate_file_metadata_modifies_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Sum of file-level or directory-level modify-like and delete-like metadata requests per second. Includes REMOVE, RENAME, RMDIR, and SETATTR.")
    aggregate_file_metadata_reads_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Sum of file-level or directory-level read-like metadata requests per second. Includes GETATTR, LOOKUP, PATHCONF, READDIR, READDIRPLUS, and READLINK.")
    aggregate_other_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Sum of all other requests processed per second. This includes COMMIT, MKNOD, NULL, NLM operations, and operations which are supported for NFSv4.1 but not NFSv3.")
    aggregate_share_metadata_reads_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Sum of share-level read-like metadata requests per second. Includes ACCESS, FSINFO, and FSSTAT.")
    aggregate_usec_per_file_metadata_create_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a file-level or directory-level create-like metadata request. Includes CREATE, LINK, MKDIR, and SYMLINK.")
    aggregate_usec_per_file_metadata_modify_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a file-level or directory-level modify-like or delete-like metadata request. Includes REMOVE, RENAME, RMDIR, and SETATTR.")
    aggregate_usec_per_file_metadata_read_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a file-level or directory-level read-like metadata request. Includes GETATTR, LOOKUP, PATHCONF, READDIR, READDIRPLUS, and READLINK.")
    aggregate_usec_per_other_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process all other requests. This includes COMMIT, MKNOD, NULL, NLM operations, and operations which are supported for NFSv4.1 but not NFSv3.")
    aggregate_usec_per_share_metadata_read_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a share-level read-like metadata request. Includes ACCESS, FSINFO, and FSSTAT.")
    creates_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="CREATE requests processed per second.")
    fsinfos_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="FSINFO requests processed per second.")
    fsstats_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="FSSTAT requests processed per second.")
    getattrs_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="GETATTR requests processed per second.")
    links_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="LINK requests processed per second.")
    lookups_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="LOOKUP requests processed per second.")
    mkdirs_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="MKDIR requests processed per second.")
    pathconfs_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="PATHCONF requests processed per second.")
    readdirpluses_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="READDIRPLUS requests processed per second.")
    readdirs_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="READDIR requests processed per second.")
    readlinks_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="READLINK requests processed per second.")
    reads_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="READ requests processed per second.")
    removes_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="REMOVE requests processed per second.")
    renames_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="RENAME requests processed per second.")
    rmdirs_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="RMDIR requests processed per second.")
    setattrs_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="SETATTR requests processed per second.")
    symlinks_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="SYMLINK requests processed per second.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since UNIX epoch.")
    usec_per_access_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an ACCESS request.")
    usec_per_create_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a CREATE request.")
    usec_per_fsinfo_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an FSINFO request.")
    usec_per_fsstat_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an FSSTAT request.")
    usec_per_getattr_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a GETATTR request.")
    usec_per_link_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a LINK request.")
    usec_per_lookup_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a LOOKUP request.")
    usec_per_mkdir_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a MKDIR request.")
    usec_per_pathconf_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a PATHCONF request.")
    usec_per_read_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READ request.")
    usec_per_readdir_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READDIR request.")
    usec_per_readdirplus_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READDIRPLUS request.")
    usec_per_readlink_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READLINK request.")
    usec_per_remove_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a REMOVE request.")
    usec_per_rename_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a RENAME request.")
    usec_per_rmdir_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an RMDIR request.")
    usec_per_setattr_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a SETATTR request.")
    usec_per_symlink_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a SYMLINK request.")
    usec_per_write_op: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a WRITE request.")
    writes_per_sec: Optional[Union[confloat(ge=0, strict=True), conint(ge=0, strict=True)]] = Field(default=None, description="WRITE requests processed per second.")
    __properties = ["id", "name", "context", "accesses_per_sec", "aggregate_file_metadata_creates_per_sec", "aggregate_file_metadata_modifies_per_sec", "aggregate_file_metadata_reads_per_sec", "aggregate_other_per_sec", "aggregate_share_metadata_reads_per_sec", "aggregate_usec_per_file_metadata_create_op", "aggregate_usec_per_file_metadata_modify_op", "aggregate_usec_per_file_metadata_read_op", "aggregate_usec_per_other_op", "aggregate_usec_per_share_metadata_read_op", "creates_per_sec", "fsinfos_per_sec", "fsstats_per_sec", "getattrs_per_sec", "links_per_sec", "lookups_per_sec", "mkdirs_per_sec", "pathconfs_per_sec", "readdirpluses_per_sec", "readdirs_per_sec", "readlinks_per_sec", "reads_per_sec", "removes_per_sec", "renames_per_sec", "rmdirs_per_sec", "setattrs_per_sec", "symlinks_per_sec", "time", "usec_per_access_op", "usec_per_create_op", "usec_per_fsinfo_op", "usec_per_fsstat_op", "usec_per_getattr_op", "usec_per_link_op", "usec_per_lookup_op", "usec_per_mkdir_op", "usec_per_pathconf_op", "usec_per_read_op", "usec_per_readdir_op", "usec_per_readdirplus_op", "usec_per_readlink_op", "usec_per_remove_op", "usec_per_rename_op", "usec_per_rmdir_op", "usec_per_setattr_op", "usec_per_symlink_op", "usec_per_write_op", "writes_per_sec"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "context",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of context
        if _include_in_dict('context', include_readonly, excluded_fields, none_fields):
            _dict['context'] = self.context.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ArrayNfsSpecificPerformance:
        """Create an instance of ArrayNfsSpecificPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ArrayNfsSpecificPerformance:
        """Create an instance of ArrayNfsSpecificPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ArrayNfsSpecificPerformance.parse_obj(obj)

        _obj = ArrayNfsSpecificPerformance.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "context": Reference.from_dict(obj.get("context")) if obj.get("context") is not None else None,
            "accesses_per_sec": obj.get("accesses_per_sec"),
            "aggregate_file_metadata_creates_per_sec": obj.get("aggregate_file_metadata_creates_per_sec"),
            "aggregate_file_metadata_modifies_per_sec": obj.get("aggregate_file_metadata_modifies_per_sec"),
            "aggregate_file_metadata_reads_per_sec": obj.get("aggregate_file_metadata_reads_per_sec"),
            "aggregate_other_per_sec": obj.get("aggregate_other_per_sec"),
            "aggregate_share_metadata_reads_per_sec": obj.get("aggregate_share_metadata_reads_per_sec"),
            "aggregate_usec_per_file_metadata_create_op": obj.get("aggregate_usec_per_file_metadata_create_op"),
            "aggregate_usec_per_file_metadata_modify_op": obj.get("aggregate_usec_per_file_metadata_modify_op"),
            "aggregate_usec_per_file_metadata_read_op": obj.get("aggregate_usec_per_file_metadata_read_op"),
            "aggregate_usec_per_other_op": obj.get("aggregate_usec_per_other_op"),
            "aggregate_usec_per_share_metadata_read_op": obj.get("aggregate_usec_per_share_metadata_read_op"),
            "creates_per_sec": obj.get("creates_per_sec"),
            "fsinfos_per_sec": obj.get("fsinfos_per_sec"),
            "fsstats_per_sec": obj.get("fsstats_per_sec"),
            "getattrs_per_sec": obj.get("getattrs_per_sec"),
            "links_per_sec": obj.get("links_per_sec"),
            "lookups_per_sec": obj.get("lookups_per_sec"),
            "mkdirs_per_sec": obj.get("mkdirs_per_sec"),
            "pathconfs_per_sec": obj.get("pathconfs_per_sec"),
            "readdirpluses_per_sec": obj.get("readdirpluses_per_sec"),
            "readdirs_per_sec": obj.get("readdirs_per_sec"),
            "readlinks_per_sec": obj.get("readlinks_per_sec"),
            "reads_per_sec": obj.get("reads_per_sec"),
            "removes_per_sec": obj.get("removes_per_sec"),
            "renames_per_sec": obj.get("renames_per_sec"),
            "rmdirs_per_sec": obj.get("rmdirs_per_sec"),
            "setattrs_per_sec": obj.get("setattrs_per_sec"),
            "symlinks_per_sec": obj.get("symlinks_per_sec"),
            "time": obj.get("time"),
            "usec_per_access_op": obj.get("usec_per_access_op"),
            "usec_per_create_op": obj.get("usec_per_create_op"),
            "usec_per_fsinfo_op": obj.get("usec_per_fsinfo_op"),
            "usec_per_fsstat_op": obj.get("usec_per_fsstat_op"),
            "usec_per_getattr_op": obj.get("usec_per_getattr_op"),
            "usec_per_link_op": obj.get("usec_per_link_op"),
            "usec_per_lookup_op": obj.get("usec_per_lookup_op"),
            "usec_per_mkdir_op": obj.get("usec_per_mkdir_op"),
            "usec_per_pathconf_op": obj.get("usec_per_pathconf_op"),
            "usec_per_read_op": obj.get("usec_per_read_op"),
            "usec_per_readdir_op": obj.get("usec_per_readdir_op"),
            "usec_per_readdirplus_op": obj.get("usec_per_readdirplus_op"),
            "usec_per_readlink_op": obj.get("usec_per_readlink_op"),
            "usec_per_remove_op": obj.get("usec_per_remove_op"),
            "usec_per_rename_op": obj.get("usec_per_rename_op"),
            "usec_per_rmdir_op": obj.get("usec_per_rmdir_op"),
            "usec_per_setattr_op": obj.get("usec_per_setattr_op"),
            "usec_per_symlink_op": obj.get("usec_per_symlink_op"),
            "usec_per_write_op": obj.get("usec_per_write_op"),
            "writes_per_sec": obj.get("writes_per_sec")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

