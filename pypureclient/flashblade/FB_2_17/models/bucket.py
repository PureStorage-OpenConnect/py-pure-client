# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class Bucket(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'context': 'Reference',
        'quota_limit': 'int',
        'time_remaining_status': 'str',
        'versioning': 'str',
        'bucket_type': 'str',
        'public_access_config': 'PublicAccessConfig',
        'created': 'int',
        'public_status': 'str',
        'object_count': 'int',
        'eradication_config': 'BucketEradicationConfig',
        'space': 'Space',
        'object_lock_config': 'ObjectLockConfigResponse',
        'time_remaining': 'int',
        'destroyed': 'bool',
        'hard_limit_enabled': 'bool',
        'retention_lock': 'str',
        'account': 'FixedReference'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'context': 'context',
        'quota_limit': 'quota_limit',
        'time_remaining_status': 'time_remaining_status',
        'versioning': 'versioning',
        'bucket_type': 'bucket_type',
        'public_access_config': 'public_access_config',
        'created': 'created',
        'public_status': 'public_status',
        'object_count': 'object_count',
        'eradication_config': 'eradication_config',
        'space': 'space',
        'object_lock_config': 'object_lock_config',
        'time_remaining': 'time_remaining',
        'destroyed': 'destroyed',
        'hard_limit_enabled': 'hard_limit_enabled',
        'retention_lock': 'retention_lock',
        'account': 'account'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        context=None,  # type: models.Reference
        quota_limit=None,  # type: int
        time_remaining_status=None,  # type: str
        versioning=None,  # type: str
        bucket_type=None,  # type: str
        public_access_config=None,  # type: models.PublicAccessConfig
        created=None,  # type: int
        public_status=None,  # type: str
        object_count=None,  # type: int
        eradication_config=None,  # type: models.BucketEradicationConfig
        space=None,  # type: models.Space
        object_lock_config=None,  # type: models.ObjectLockConfigResponse
        time_remaining=None,  # type: int
        destroyed=None,  # type: bool
        hard_limit_enabled=None,  # type: bool
        retention_lock=None,  # type: str
        account=None,  # type: models.FixedReference
    ):
        """
        Keyword args:
            name (str): Name of the object (e.g., a file system or snapshot).
            id (str): A non-modifiable, globally unique ID chosen by the system. 
            context (Reference): The context in which the operation was performed. Valid values include a reference to any array which is a member of the same fleet. If the array is not a member of a fleet, `context` will always implicitly be set to the array that received the request.  Other parameters provided with the request, such as names of volumes or snapshots,  are resolved relative to the provided `context`. 
            quota_limit (int): The effective quota limit applied against the size of the bucket, displayed in bytes. If unset, the bucket is unlimited in size. 
            time_remaining_status (str): Status of the `time_remaining` field. `calculating` means the bucket is `retention-based`, has been destroyed and the `time_remaining` is being calculated by a background process `legal-hold` means the bucket is `retention-based`, has been destroyed and will never be eradicated, because an object with legal hold status was found inside. null otherwise, i.e. when either the bucket is not destroyed or it's destroyed and the `time_remaining` has been determined. 
            versioning (str): The versioning state for objects within the bucket. Valid values are `none`, `enabled`, and `suspended`. 
            bucket_type (str): The bucket type for the bucket. 
            public_access_config (PublicAccessConfig)
            created (int): Creation timestamp of the object.
            public_status (str): Bucket's public status. Valid values include `bucket-and-objects-not-public`, `only-authorized-users-of-this-account` and `public`. 
            object_count (int): The count of objects within the bucket.
            eradication_config (BucketEradicationConfig)
            space (Space): The space specification of the bucket.
            object_lock_config (ObjectLockConfigResponse)
            time_remaining (int): Time in milliseconds before the bucket is eradicated. `null` if not destroyed or legal hold was found or the remaining time until eradication is not known yet. 
            destroyed (bool): Is the bucket destroyed? 
            hard_limit_enabled (bool): If set to `true`, the bucket's size, as defined by `quota_limit`, is used as a hard limit quota. If set to `false`, a hard limit quota will not be applied to the bucket, but soft quota alerts will still be sent if the bucket has a value set for `quota_limit`. 
            retention_lock (str): If set to `ratcheted`, then `object_lock_config.default_retention_mode` cannot be changed if set to `compliance`. In this case, the value of `object_lock_config.default_retention` can only be increased and `object_lock_config.default_retention_mode` cannot be changed once set to `compliance`. Valid values are `unlocked` and `ratcheted`. Contact Pure Technical Services to change `ratcheted` to `unlocked`. 
            account (FixedReference)
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if context is not None:
            self.context = context
        if quota_limit is not None:
            self.quota_limit = quota_limit
        if time_remaining_status is not None:
            self.time_remaining_status = time_remaining_status
        if versioning is not None:
            self.versioning = versioning
        if bucket_type is not None:
            self.bucket_type = bucket_type
        if public_access_config is not None:
            self.public_access_config = public_access_config
        if created is not None:
            self.created = created
        if public_status is not None:
            self.public_status = public_status
        if object_count is not None:
            self.object_count = object_count
        if eradication_config is not None:
            self.eradication_config = eradication_config
        if space is not None:
            self.space = space
        if object_lock_config is not None:
            self.object_lock_config = object_lock_config
        if time_remaining is not None:
            self.time_remaining = time_remaining
        if destroyed is not None:
            self.destroyed = destroyed
        if hard_limit_enabled is not None:
            self.hard_limit_enabled = hard_limit_enabled
        if retention_lock is not None:
            self.retention_lock = retention_lock
        if account is not None:
            self.account = account

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Bucket`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(Bucket, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Bucket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
