# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.17, developed by Pure Storage, Inc. (http://www.purestorage.com/). 

    OpenAPI spec version: 2.17
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_17 import models

class Array(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'network_access_policy': 'FixedReference',
        'os': 'str',
        'banner': 'str',
        'eradication_config': 'ArrayEradicationConfig',
        'ntp_servers': 'list[str]',
        'as_of': 'int',
        'time_zone': 'str',
        'default_inbound_tls_policy': 'ReferenceWritable',
        'security_update': 'str',
        'smb_mode': 'str',
        'version': 'str',
        'revision': 'str',
        'product_type': 'str',
        'encryption': 'ArrayEncryption',
        'idle_timeout': 'int'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'network_access_policy': 'network_access_policy',
        'os': 'os',
        'banner': 'banner',
        'eradication_config': 'eradication_config',
        'ntp_servers': 'ntp_servers',
        'as_of': '_as_of',
        'time_zone': 'time_zone',
        'default_inbound_tls_policy': 'default_inbound_tls_policy',
        'security_update': 'security_update',
        'smb_mode': 'smb_mode',
        'version': 'version',
        'revision': 'revision',
        'product_type': 'product_type',
        'encryption': 'encryption',
        'idle_timeout': 'idle_timeout'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        network_access_policy=None,  # type: models.FixedReference
        os=None,  # type: str
        banner=None,  # type: str
        eradication_config=None,  # type: models.ArrayEradicationConfig
        ntp_servers=None,  # type: List[str]
        as_of=None,  # type: int
        time_zone=None,  # type: str
        default_inbound_tls_policy=None,  # type: models.ReferenceWritable
        security_update=None,  # type: str
        smb_mode=None,  # type: str
        version=None,  # type: str
        revision=None,  # type: str
        product_type=None,  # type: str
        encryption=None,  # type: models.ArrayEncryption
        idle_timeout=None,  # type: int
    ):
        """
        Keyword args:
            name (str): A name chosen by the user. Can be changed. Must be locally unique. 
            id (str): A non-modifiable, globally unique ID chosen by the system. 
            network_access_policy (FixedReference): The network access policy governing which clients are allowed or denied access to different array interfaces. 
            os (str): Valid values are `Purity//FA` and `Purity//FB`. 
            banner (str): A string to be shown when logging in to the array. 
            eradication_config (ArrayEradicationConfig)
            ntp_servers (list[str])
            as_of (int): Array time in milliseconds since UNIX epoch.
            time_zone (str): The time zone to use for the array. In particular this affects the CLI formatting and the default snapshot policy time zone. 
            default_inbound_tls_policy (ReferenceWritable): The default TLS policy governing inbound traffic from clients accessing the array. This TLS policy will be applied for any IP addresses on the system that do not have a specific policy applied to them at a more granular level. 
            security_update (str): The name of the installed security update that currently applies to the system. This field will be `null` if either no security update has been installed, or if the most recently installed security update is no longer needed by the current FlashBlade software due to the current software fully incorporating the update. 
            smb_mode (str): The current SMB mode of the array. This controls the type of authentication that is used by the array for SMB. Possible values include `ad-auto`, `ad-rfc2307`, `guest`, and `native`. Modifying this value requires the assistance of Pure Storage Support. 
            version (str)
            revision (str)
            product_type (str): For `FlashBlade//S` arrays, the value is determined by the blades in the system. The value will be `FlashBlade` for all older arrays. Valid values are `FlashBlade`, `FlashBlade//S`, `FlashBlade//S200`, and `FlashBladeS500`. 
            encryption (ArrayEncryption)
            idle_timeout (int): Idle timeout in milliseconds. Valid values are in the range of 300000 and 10800000. Setting this value to 0 disables timeouts. 
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if network_access_policy is not None:
            self.network_access_policy = network_access_policy
        if os is not None:
            self.os = os
        if banner is not None:
            self.banner = banner
        if eradication_config is not None:
            self.eradication_config = eradication_config
        if ntp_servers is not None:
            self.ntp_servers = ntp_servers
        if as_of is not None:
            self.as_of = as_of
        if time_zone is not None:
            self.time_zone = time_zone
        if default_inbound_tls_policy is not None:
            self.default_inbound_tls_policy = default_inbound_tls_policy
        if security_update is not None:
            self.security_update = security_update
        if smb_mode is not None:
            self.smb_mode = smb_mode
        if version is not None:
            self.version = version
        if revision is not None:
            self.revision = revision
        if product_type is not None:
            self.product_type = product_type
        if encryption is not None:
            self.encryption = encryption
        if idle_timeout is not None:
            self.idle_timeout = idle_timeout

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `Array`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(Array, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Array):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
