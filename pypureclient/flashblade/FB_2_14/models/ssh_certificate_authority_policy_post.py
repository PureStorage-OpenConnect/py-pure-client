# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.14, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flashblade.FB_2_14.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_14.models.reference_writable import ReferenceWritable
from typing import Optional, Set
from typing_extensions import Self

class SshCertificateAuthorityPolicyPost(BaseModel):
    """
    SshCertificateAuthorityPolicyPost
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    enabled: Optional[StrictBool] = Field(default=None, description="If `true`, the policy is enabled. If not specified, defaults to `true`.")
    is_local: Optional[StrictBool] = Field(default=None, description="Whether the policy is defined on the local array.")
    location: Optional[FixedReference] = Field(default=None, description="Reference to the array where the policy is defined.")
    policy_type: Optional[StrictStr] = Field(default=None, description="Type of the policy. Valid values are `audit`, `bucket-access`, `cross-origin-resource-sharing`, `network-access`, `nfs`, `object-access`, `smb-client`, `smb-share`, and `snapshot`.")
    signing_authority: Optional[ReferenceWritable] = Field(default=None, description="A reference to the authority that will digitally sign user SSH certificates that will be used to access the system. This may be either a certificate or a public key. If a certificate is used as the signer, then its expiry period will be honored and user SSH certificates signed by the certificate will no longer be accepted after the certificate has expired.")
    static_authorized_principals: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=128)]], Field(max_length=16)]] = Field(default=None, description="If not specified - users affected by this policy can only log into the system when they present an SSH certificate containing their own username as a principle. If specified - users affected by this policy can only log into the system when they present an SSH certificate containing at least one username from this list as a principle.")
    __properties: ClassVar[List[str]] = ["name", "id", "enabled", "is_local", "location", "policy_type", "signing_authority", "static_authorized_principals"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "is_local",
            "policy_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location and (include_readonly or "location" not in excluded_fields):
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of signing_authority
        if self.signing_authority and (include_readonly or "signing_authority" not in excluded_fields):
            _dict['signing_authority'] = self.signing_authority.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SshCertificateAuthorityPolicyPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SshCertificateAuthorityPolicyPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "enabled": obj.get("enabled"),
            "is_local": obj.get("is_local"),
            "location": FixedReference.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "policy_type": obj.get("policy_type"),
            "signing_authority": ReferenceWritable.from_dict(obj["signing_authority"]) if obj.get("signing_authority") is not None else None,
            "static_authorized_principals": obj.get("static_authorized_principals")
        })
        return _obj


