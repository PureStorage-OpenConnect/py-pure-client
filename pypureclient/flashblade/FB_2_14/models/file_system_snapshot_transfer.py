# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.14, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional, Union
from pydantic import BaseModel, Field, StrictInt, StrictStr, confloat, conint
from pypureclient.flashblade.FB_2_14.models.fixed_reference_no_resource_type import FixedReferenceNoResourceType


class FileSystemSnapshotTransfer(BaseModel):
    """
    FileSystemSnapshotTransfer
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    completed: Optional[StrictInt] = Field(default=None, description="A timestamp at which the replication of the snapshot completed.")
    data_transferred: Optional[StrictInt] = Field(default=None, description="The amount of data transferred to the target, in bytes.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values are `inbound` and `outbound`.")
    local_snapshot: Optional[FixedReferenceNoResourceType] = Field(default=None, description="A reference to the associated local file system snapshot.")
    progress: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(default=None, description="A percentage that indicates how much progress has been made on the transfer.")
    remote: Optional[FixedReferenceNoResourceType] = Field(default=None, description="The array where the remote file system snapshot is located.")
    remote_snapshot: Optional[FixedReferenceNoResourceType] = Field(default=None, description="A reference to the associated remote file system snapshot.")
    started: Optional[StrictInt] = Field(default=None, description="A timestamp at which the replication of the snapshot started.")
    status: Optional[StrictStr] = Field(default=None, description="The status of current replication. Valid values are `completed`, `in-progress`, and `queued`.")
    __properties = ["id", "name", "completed", "data_transferred", "direction", "local_snapshot", "progress", "remote", "remote_snapshot", "started", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "completed",
                "data_transferred",
                "direction",
                "progress",
                "started",
                "status",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of local_snapshot
        if _include_in_dict('local_snapshot', include_readonly, excluded_fields, none_fields):
            _dict['local_snapshot'] = self.local_snapshot.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote
        if _include_in_dict('remote', include_readonly, excluded_fields, none_fields):
            _dict['remote'] = self.remote.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote_snapshot
        if _include_in_dict('remote_snapshot', include_readonly, excluded_fields, none_fields):
            _dict['remote_snapshot'] = self.remote_snapshot.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> FileSystemSnapshotTransfer:
        """Create an instance of FileSystemSnapshotTransfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> FileSystemSnapshotTransfer:
        """Create an instance of FileSystemSnapshotTransfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileSystemSnapshotTransfer.parse_obj(obj)

        _obj = FileSystemSnapshotTransfer.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "completed": obj.get("completed"),
            "data_transferred": obj.get("data_transferred"),
            "direction": obj.get("direction"),
            "local_snapshot": FixedReferenceNoResourceType.from_dict(obj.get("local_snapshot")) if obj.get("local_snapshot") is not None else None,
            "progress": obj.get("progress"),
            "remote": FixedReferenceNoResourceType.from_dict(obj.get("remote")) if obj.get("remote") is not None else None,
            "remote_snapshot": FixedReferenceNoResourceType.from_dict(obj.get("remote_snapshot")) if obj.get("remote_snapshot") is not None else None,
            "started": obj.get("started"),
            "status": obj.get("status")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

