# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.14, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_14.models.bucket_eradication_config import BucketEradicationConfig
from pypureclient.flashblade.FB_2_14.models.object_lock_config_request_body import ObjectLockConfigRequestBody
from pypureclient.flashblade.FB_2_14.models.reference_writable import ReferenceWritable
from typing import Optional, Set
from typing_extensions import Self

class BucketPost(BaseModel):
    """
    BucketPost
    """ # noqa: E501
    account: Optional[ReferenceWritable] = Field(default=None, description="The account name for bucket creation.")
    bucket_type: Optional[StrictStr] = Field(default=None, description="The bucket type for the bucket. Valid values are `classic`, and `multi-site-writable`. Default value is `multi-site-writable`.")
    hard_limit_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, the bucket's size, as defined by `quota_limit`, is used as a hard limit quota. If set to `false`, a hard limit quota will not be applied to the bucket, but soft quota alerts will still be sent if the bucket has a value set for `quota_limit`. If not specified, defaults to the value of `bucket_defaults.hard_limit_enabled` of the object store account this bucket is associated with.")
    object_lock_config: Optional[ObjectLockConfigRequestBody] = None
    quota_limit: Optional[StrictStr] = Field(default=None, description="The effective quota limit applied against the size of the bucket, displayed in bytes. If set to an empty string (`\"\"`), the bucket is unlimited in size. If not specified, defaults to the value of `bucket_defaults.quota_limit` of the object store account this bucket is associated with.")
    retention_lock: Optional[StrictStr] = Field(default=None, description="If set to `ratcheted`, then `object_lock_config.default_retention_mode` cannot be changed if set to `compliance`. In this case, the value of `object_lock_config.default_retention` can only be increased and `object_lock_config.default_retention_mode` cannot be changed once set to `compliance`. Valid values are `unlocked` and `ratcheted`. If not specified, defaults to `unlocked`.")
    eradication_config: Optional[BucketEradicationConfig] = None
    __properties: ClassVar[List[str]] = ["account", "bucket_type", "hard_limit_enabled", "object_lock_config", "quota_limit", "retention_lock", "eradication_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account and (include_readonly or "account" not in excluded_fields):
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_lock_config
        if self.object_lock_config and (include_readonly or "object_lock_config" not in excluded_fields):
            _dict['object_lock_config'] = self.object_lock_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of eradication_config
        if self.eradication_config and (include_readonly or "eradication_config" not in excluded_fields):
            _dict['eradication_config'] = self.eradication_config.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BucketPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BucketPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "account": ReferenceWritable.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "bucket_type": obj.get("bucket_type"),
            "hard_limit_enabled": obj.get("hard_limit_enabled"),
            "object_lock_config": ObjectLockConfigRequestBody.from_dict(obj["object_lock_config"]) if obj.get("object_lock_config") is not None else None,
            "quota_limit": obj.get("quota_limit"),
            "retention_lock": obj.get("retention_lock"),
            "eradication_config": BucketEradicationConfig.from_dict(obj["eradication_config"]) if obj.get("eradication_config") is not None else None
        })
        return _obj


