# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.14, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.14
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator


class ActiveDirectory(BaseModel):
    """
    ActiveDirectory
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    computer_name: Optional[StrictStr] = Field(default=None, description="The common name of the computer account to be created in the Active Directory domain. If not specified, defaults to the name of the Active Directory configuration.")
    directory_servers: Optional[conlist(StrictStr)] = Field(default=None, description="A list of directory servers that will be used for lookups related to user authorization. Accepted server formats are IP address and DNS name with optional @domain suffix. If the suffix is ommited, the joined domain is assumed. All specified servers must be registered to the domain appropriately in the array's configured DNS and will only be communicated with over the secure LDAP (LDAPS) protocol.")
    domain: Optional[StrictStr] = Field(default=None, description="The Active Directory domain to join.")
    encryption_types: Optional[conlist(StrictStr)] = Field(default=None, description="The encryption types that are supported for use by clients for Kerberos authentication.")
    global_catalog_servers: Optional[conlist(StrictStr)] = Field(default=None, description="A list of global catalog servers that will be used for lookups related to user authorization. Accepted server formats are IP address and DNS name with optional @domain suffix. If the suffix is ommited, the joined domain is assumed. All specified servers must be registered to the domain appropriately in the array's configured DNS and will only be communicated with over the secure LDAP (LDAPS) protocol.")
    join_ou: Optional[StrictStr] = Field(default=None, description="The relative distinguished name of the organizational unit in which the computer account was created when joining the domain.")
    kerberos_servers: Optional[conlist(StrictStr)] = Field(default=None, description="A list of key distribution servers to use for Kerberos protocol. Accepted server formats are IP address and DNS name. All specified servers must be registered to the domain appropriately in the array's configured DNS.")
    service_principal_names: Optional[conlist(constr(strict=True))] = Field(default=None, description="A list of service principal names registered for the machine account, which can be used for the creation of keys for Kerberos authentication.")
    __properties = ["id", "name", "computer_name", "directory_servers", "domain", "encryption_types", "global_catalog_servers", "join_ou", "kerberos_servers", "service_principal_names"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ActiveDirectory:
        """Create an instance of ActiveDirectory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ActiveDirectory:
        """Create an instance of ActiveDirectory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ActiveDirectory.parse_obj(obj)

        _obj = ActiveDirectory.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "computer_name": obj.get("computer_name"),
            "directory_servers": obj.get("directory_servers"),
            "domain": obj.get("domain"),
            "encryption_types": obj.get("encryption_types"),
            "global_catalog_servers": obj.get("global_catalog_servers"),
            "join_ou": obj.get("join_ou"),
            "kerberos_servers": obj.get("kerberos_servers"),
            "service_principal_names": obj.get("service_principal_names")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

