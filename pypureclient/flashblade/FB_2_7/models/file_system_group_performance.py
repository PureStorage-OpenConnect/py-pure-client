# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.7, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.7
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pypureclient.flashblade.FB_2_7.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_7.models.group import Group
from typing import Optional, Set
from typing_extensions import Self

class FileSystemGroupPerformance(BaseModel):
    """
    FileSystemGroupPerformance
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    bytes_per_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average operation size (read bytes+write bytes/read ops+write ops).")
    bytes_per_read: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average read size in bytes per read operation.")
    bytes_per_write: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average write size in bytes per write operation.")
    file_system: Optional[FixedReference] = Field(default=None, description="The file system on which the performance was measured.")
    group: Optional[Group] = Field(default=None, description="The group whose performance is represented.")
    others_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Other operations processed per second.")
    read_bytes_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Bytes read per second.")
    reads_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Read requests processed per second.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since UNIX epoch.")
    usec_per_other_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process other operations.")
    usec_per_read_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a read request.")
    usec_per_write_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a write request.")
    write_bytes_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Bytes written per second.")
    writes_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Write requests processed per second.")
    __properties: ClassVar[List[str]] = ["name", "bytes_per_op", "bytes_per_read", "bytes_per_write", "file_system", "group", "others_per_sec", "read_bytes_per_sec", "reads_per_sec", "time", "usec_per_other_op", "usec_per_read_op", "usec_per_write_op", "write_bytes_per_sec", "writes_per_sec"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "bytes_per_op",
            "bytes_per_read",
            "bytes_per_write",
            "others_per_sec",
            "read_bytes_per_sec",
            "reads_per_sec",
            "time",
            "usec_per_other_op",
            "usec_per_read_op",
            "usec_per_write_op",
            "write_bytes_per_sec",
            "writes_per_sec",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file_system
        if self.file_system and (include_readonly or "file_system" not in excluded_fields):
            _dict['file_system'] = self.file_system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of group
        if self.group and (include_readonly or "group" not in excluded_fields):
            _dict['group'] = self.group.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSystemGroupPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSystemGroupPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "bytes_per_op": obj.get("bytes_per_op"),
            "bytes_per_read": obj.get("bytes_per_read"),
            "bytes_per_write": obj.get("bytes_per_write"),
            "file_system": FixedReference.from_dict(obj["file_system"]) if obj.get("file_system") is not None else None,
            "group": Group.from_dict(obj["group"]) if obj.get("group") is not None else None,
            "others_per_sec": obj.get("others_per_sec"),
            "read_bytes_per_sec": obj.get("read_bytes_per_sec"),
            "reads_per_sec": obj.get("reads_per_sec"),
            "time": obj.get("time"),
            "usec_per_other_op": obj.get("usec_per_other_op"),
            "usec_per_read_op": obj.get("usec_per_read_op"),
            "usec_per_write_op": obj.get("usec_per_write_op"),
            "write_bytes_per_sec": obj.get("write_bytes_per_sec"),
            "writes_per_sec": obj.get("writes_per_sec")
        })
        return _obj


