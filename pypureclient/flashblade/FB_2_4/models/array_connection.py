# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.4, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_4.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_4.models.fixed_reference_no_resource_type import FixedReferenceNoResourceType
from pypureclient.flashblade.FB_2_4.models.throttle import Throttle
from typing import Optional, Set
from typing_extensions import Self

class ArrayConnection(BaseModel):
    """
    ArrayConnection
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    ca_certificate_group: Optional[FixedReference] = Field(default=None, description="The group of CA certificates that can be used, in addition to well-known Certificate Authority certificates, in order to establish a secure connection to the target array. Defaults to a reference to the `_default_replication_certs` group if `secure_connection` is `true`, or `null` otherwise.")
    encrypted: Optional[StrictBool] = Field(default=None, description="If this is set to `true`, then all customer data replicated over the connection will be sent over an encrypted connection using TLS, or will not be sent if a secure connection cannot be established. If this is set to `false`, then all customer data replicated over the connection will be sent over an unencrypted connection. Defaults to `false`.")
    management_address: Optional[StrictStr] = Field(default=None, description="Management address of the target array. Settable on POST only.")
    remote: Optional[FixedReferenceNoResourceType] = Field(default=None, description="The remote array.")
    replication_addresses: Optional[List[StrictStr]] = Field(default=None, description="IP addresses and/or FQDNs of the target arrays. Settable on POST only. If not set on POST, will be set to all the replication addresses available on the target array at the time of the POST.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the connection. Valid values are `connected`, `partially_connected`, `connecting`, and `incompatible`. `connected` - The connection is OK. `partially_connected` - Some replication addresses are working, but others are not. `connecting` - No connection exists and the array is trying to reconnect. `incompatible` - The target array is not compatible.")
    version: Optional[StrictStr] = Field(default=None, description="The version of the target array.")
    throttle: Optional[Throttle] = None
    __properties: ClassVar[List[str]] = ["id", "ca_certificate_group", "encrypted", "management_address", "remote", "replication_addresses", "status", "version", "throttle"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "status",
            "version",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ca_certificate_group
        if self.ca_certificate_group and (include_readonly or "ca_certificate_group" not in excluded_fields):
            _dict['ca_certificate_group'] = self.ca_certificate_group.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote and (include_readonly or "remote" not in excluded_fields):
            _dict['remote'] = self.remote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of throttle
        if self.throttle and (include_readonly or "throttle" not in excluded_fields):
            _dict['throttle'] = self.throttle.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayConnection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayConnection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "ca_certificate_group": FixedReference.from_dict(obj["ca_certificate_group"]) if obj.get("ca_certificate_group") is not None else None,
            "encrypted": obj.get("encrypted"),
            "management_address": obj.get("management_address"),
            "remote": FixedReferenceNoResourceType.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "replication_addresses": obj.get("replication_addresses"),
            "status": obj.get("status"),
            "version": obj.get("version"),
            "throttle": Throttle.from_dict(obj["throttle"]) if obj.get("throttle") is not None else None
        })
        return _obj


