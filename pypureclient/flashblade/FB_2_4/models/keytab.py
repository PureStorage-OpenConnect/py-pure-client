# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.4, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from pypureclient.flashblade.FB_2_4.models.fixed_reference import FixedReference


class Keytab(BaseModel):
    """
    Keytab
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    encryption_type: Optional[StrictStr] = Field(default=None, description="The encryption type used by the Kerberos key distribution center to generate the keytab.")
    fqdn: Optional[StrictStr] = Field(default=None, description="The fully qualified domain name to which the keytab was issued.")
    kvno: Optional[StrictInt] = Field(default=None, description="The key version number of the key used to generate the keytab.")
    prefix: Optional[StrictStr] = Field(default=None, description="The prefix in the name of the keytab object. This is the same for all keytab objects created from a single keytab file. The name of a keytab entry is created in the format `<prefix>.<suffix>` for all entries.")
    principal: Optional[StrictStr] = Field(default=None, description="The service name for which the keytab was issued.")
    realm: Optional[StrictStr] = Field(default=None, description="The Kerberos realm that issued the keytab.")
    source: Optional[FixedReference] = Field(default=None, description="A reference to the Active Directory configuration for the computer account that was used to create this keytab. If this keytab was uploaded from a file, all fields in the reference possess `null` values.")
    suffix: Optional[StrictInt] = Field(default=None, description="The suffix in the name of the keytab object, determined at creation time using the slot number of the keytab entry in a file and the number of existing entries with the same prefix. The name of a keytab entry is created in the format `<prefix>.<suffix>` for all entries.")
    __properties = ["id", "name", "encryption_type", "fqdn", "kvno", "prefix", "principal", "realm", "source", "suffix"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "encryption_type",
                "fqdn",
                "kvno",
                "prefix",
                "principal",
                "realm",
                "suffix",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if _include_in_dict('source', include_readonly, excluded_fields, none_fields):
            _dict['source'] = self.source.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Keytab:
        """Create an instance of Keytab from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Keytab:
        """Create an instance of Keytab from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Keytab.parse_obj(obj)

        _obj = Keytab.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "encryption_type": obj.get("encryption_type"),
            "fqdn": obj.get("fqdn"),
            "kvno": obj.get("kvno"),
            "prefix": obj.get("prefix"),
            "principal": obj.get("principal"),
            "realm": obj.get("realm"),
            "source": FixedReference.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "suffix": obj.get("suffix")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

