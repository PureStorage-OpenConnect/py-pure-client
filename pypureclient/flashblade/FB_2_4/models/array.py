# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.4, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist


class Array(BaseModel):
    """
    Array
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="A name chosen by the user. Can be changed. Must be locally unique.")
    as_of: Optional[StrictInt] = Field(default=None, alias="_as_of", description="Array time in milliseconds since UNIX epoch.")
    banner: Optional[StrictStr] = Field(default=None, description="A string to be shown when logging in to the array.")
    idle_timeout: Optional[StrictInt] = Field(default=None, description="Idle timeout in milliseconds. Valid values are in the range of 300000 and 10800000. Setting this value to 0 disables timeouts.")
    ntp_servers: Optional[conlist(StrictStr)] = None
    os: Optional[StrictStr] = Field(default=None, description="Valid values are `Purity//FA` and `Purity//FB`.")
    revision: Optional[StrictStr] = None
    smb_mode: Optional[StrictStr] = Field(default=None, description="The current SMB mode of the array. This controls the type of authentication that is used by the array for SMB. Possible values include `ad-auto`, `ad-rfc2307`, `guest`, and `native`. Modifying this value requires the assistance of Pure Storage Support.")
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone to use for the array. In particular this affects the CLI formatting and the default snapshot policy time zone.")
    version: Optional[StrictStr] = None
    __properties = ["id", "name", "_as_of", "banner", "idle_timeout", "ntp_servers", "os", "revision", "smb_mode", "time_zone", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "as_of",
                "os",
                "revision",
                "smb_mode",
                "version",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Array:
        """Create an instance of Array from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Array:
        """Create an instance of Array from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Array.parse_obj(obj)

        _obj = Array.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "as_of": obj.get("_as_of"),
            "banner": obj.get("banner"),
            "idle_timeout": obj.get("idle_timeout"),
            "ntp_servers": obj.get("ntp_servers"),
            "os": obj.get("os"),
            "revision": obj.get("revision"),
            "smb_mode": obj.get("smb_mode"),
            "time_zone": obj.get("time_zone"),
            "version": obj.get("version")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

