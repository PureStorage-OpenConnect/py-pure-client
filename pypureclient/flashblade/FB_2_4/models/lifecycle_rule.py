# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.4, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.4
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flashblade.FB_2_4.models.fixed_reference import FixedReference


class LifecycleRule(BaseModel):
    """
    LifecycleRule
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    abort_incomplete_multipart_uploads_after: Optional[StrictInt] = Field(default=None, description="Duration of time after which incomplete multipart uploads will be aborted. Measured in milliseconds. Must be a multiple of 86400000 to represent a whole number of days.")
    keep_current_version_for: Optional[StrictInt] = Field(default=None, description="Time after which current versions will be marked expired. Measured in milliseconds. Must be a multiple of 86400000 to represent a whole number of days.")
    keep_current_version_until: Optional[StrictInt] = Field(default=None, description="Time after which current versions will be marked expired. Measured in milliseconds, time since epoch. Must be a valid date, accurate to day.")
    bucket: Optional[FixedReference] = Field(default=None, description="The bucket which this lifecycle rule is targeting.")
    cleanup_expired_object_delete_marker: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the expired object delete markers will be removed.")
    enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, this rule will be enabled.")
    keep_previous_version_for: Optional[StrictInt] = Field(default=None, description="Time after which previous versions will be marked expired. Measured in milliseconds. Must be a multiple of 86400000 to represent a whole number of days.")
    prefix: Optional[StrictStr] = Field(default=None, description="Object key prefix identifying one or more objects in the bucket. Can have a maximum length of 1024 characters.")
    rule_id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the rule. Can have a maximum length of 255 characters.")
    __properties = ["id", "name", "abort_incomplete_multipart_uploads_after", "keep_current_version_for", "keep_current_version_until", "bucket", "cleanup_expired_object_delete_marker", "enabled", "keep_previous_version_for", "prefix", "rule_id"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "cleanup_expired_object_delete_marker",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of bucket
        if _include_in_dict('bucket', include_readonly, excluded_fields, none_fields):
            _dict['bucket'] = self.bucket.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> LifecycleRule:
        """Create an instance of LifecycleRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> LifecycleRule:
        """Create an instance of LifecycleRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LifecycleRule.parse_obj(obj)

        _obj = LifecycleRule.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "abort_incomplete_multipart_uploads_after": obj.get("abort_incomplete_multipart_uploads_after"),
            "keep_current_version_for": obj.get("keep_current_version_for"),
            "keep_current_version_until": obj.get("keep_current_version_until"),
            "bucket": FixedReference.from_dict(obj.get("bucket")) if obj.get("bucket") is not None else None,
            "cleanup_expired_object_delete_marker": obj.get("cleanup_expired_object_delete_marker"),
            "enabled": obj.get("enabled"),
            "keep_previous_version_for": obj.get("keep_previous_version_for"),
            "prefix": obj.get("prefix"),
            "rule_id": obj.get("rule_id")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

