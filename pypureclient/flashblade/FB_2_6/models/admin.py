# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.6, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_6.models.api_token import ApiToken
from pypureclient.flashblade.FB_2_6.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class Admin(BaseModel):
    """
    Admin
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    api_token: Optional[ApiToken] = None
    is_local: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the user is local to the machine, otherwise `false`.")
    public_key: Optional[StrictStr] = Field(default=None, description="Public key for SSH access. Supported key types are `Ed25519` and `RSA`.")
    role: Optional[Reference] = Field(default=None, description="A reference to this administrator's management role.")
    locked: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the user is currently locked out, otherwise `false`. Can be patched to false to unlock a user. This field is only visible to `array_admin` roles. For all other users, the value is always `null`.")
    lockout_remaining: Optional[StrictInt] = Field(default=None, description="The remaining lockout period, in milliseconds, if the user is locked out. This field is only visible to `array_admin` roles. For all other users, the value is always `null`.")
    __properties: ClassVar[List[str]] = ["name", "id", "api_token", "is_local", "public_key", "role", "locked", "lockout_remaining"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "is_local",
            "lockout_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of api_token
        if self.api_token and (include_readonly or "api_token" not in excluded_fields):
            _dict['api_token'] = self.api_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of role
        if self.role and (include_readonly or "role" not in excluded_fields):
            _dict['role'] = self.role.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Admin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Admin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "api_token": ApiToken.from_dict(obj["api_token"]) if obj.get("api_token") is not None else None,
            "is_local": obj.get("is_local"),
            "public_key": obj.get("public_key"),
            "role": Reference.from_dict(obj["role"]) if obj.get("role") is not None else None,
            "locked": obj.get("locked"),
            "lockout_remaining": obj.get("lockout_remaining")
        })
        return _obj


