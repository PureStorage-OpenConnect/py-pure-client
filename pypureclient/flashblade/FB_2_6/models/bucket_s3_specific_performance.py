# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.6, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BucketS3SpecificPerformance(BaseModel):
    """
    BucketS3SpecificPerformance
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    others_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Other operations processed per second.")
    read_buckets_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Read buckets requests processed per second.")
    read_objects_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Read object requests processed per second.")
    write_buckets_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Write buckets requests processed per second.")
    write_objects_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Write object requests processed per second.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since UNIX epoch.")
    usec_per_other_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process other operations.")
    usec_per_read_bucket_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a read bucket request.")
    usec_per_read_object_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a read object request.")
    usec_per_write_bucket_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a write bucket request.")
    usec_per_write_object_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a write object request.")
    __properties: ClassVar[List[str]] = ["name", "id", "others_per_sec", "read_buckets_per_sec", "read_objects_per_sec", "write_buckets_per_sec", "write_objects_per_sec", "time", "usec_per_other_op", "usec_per_read_bucket_op", "usec_per_read_object_op", "usec_per_write_bucket_op", "usec_per_write_object_op"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "others_per_sec",
            "read_buckets_per_sec",
            "read_objects_per_sec",
            "write_buckets_per_sec",
            "write_objects_per_sec",
            "time",
            "usec_per_other_op",
            "usec_per_read_bucket_op",
            "usec_per_read_object_op",
            "usec_per_write_bucket_op",
            "usec_per_write_object_op",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BucketS3SpecificPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BucketS3SpecificPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "others_per_sec": obj.get("others_per_sec"),
            "read_buckets_per_sec": obj.get("read_buckets_per_sec"),
            "read_objects_per_sec": obj.get("read_objects_per_sec"),
            "write_buckets_per_sec": obj.get("write_buckets_per_sec"),
            "write_objects_per_sec": obj.get("write_objects_per_sec"),
            "time": obj.get("time"),
            "usec_per_other_op": obj.get("usec_per_other_op"),
            "usec_per_read_bucket_op": obj.get("usec_per_read_bucket_op"),
            "usec_per_read_object_op": obj.get("usec_per_read_object_op"),
            "usec_per_write_bucket_op": obj.get("usec_per_write_bucket_op"),
            "usec_per_write_object_op": obj.get("usec_per_write_object_op")
        })
        return _obj


