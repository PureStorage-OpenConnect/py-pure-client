# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.6, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr
from pypureclient.flashblade.FB_2_6.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_6.models.fixed_reference_name_only import FixedReferenceNameOnly
from pypureclient.flashblade.FB_2_6.models.object_backlog import ObjectBacklog
from pypureclient.flashblade.FB_2_6.models.reference_writable import ReferenceWritable


class BucketReplicaLink(BaseModel):
    """
    BucketReplicaLink
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values are `inbound` and `outbound`.")
    lag: Optional[StrictInt] = Field(default=None, description="Duration in milliseconds that represents how far behind the replication target is from the source. This is the time difference between current time and `recovery_point`.")
    status_details: Optional[StrictStr] = Field(default=None, description="Detailed information about the status of the replica link when it is unhealthy.")
    cascading_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, objects replicated to this bucket via a replica link from another array will also be replicated by this link to the remote bucket. Defaults to `false`.")
    local_bucket: Optional[FixedReference] = Field(default=None, description="Reference to a local bucket.")
    object_backlog: Optional[ObjectBacklog] = Field(default=None, description="The number of pending operations and their size that are currently in the backlog.")
    paused: Optional[StrictBool] = Field(default=None, description="Is the replica link paused?")
    recovery_point: Optional[StrictInt] = Field(default=None, description="Time, in milliseconds since UNIX epoch, where all object changes before this time are guaranteed to have been replicated. Changes after this time may have been replicated.")
    remote: Optional[FixedReference] = Field(default=None, description="Reference to the associated remote, which can either be a `target` or remote `array`. If it is an `array`, then the `resource-type` field will not be populated.")
    remote_bucket: Optional[FixedReferenceNameOnly] = Field(default=None, description="Reference to a remote bucket.")
    remote_credentials: Optional[ReferenceWritable] = Field(default=None, description="Reference to a remote-credentials object to access the remote bucket.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the replica link. Values include `replicating`, `paused`, and `unhealthy`.")
    __properties = ["id", "direction", "lag", "status_details", "cascading_enabled", "local_bucket", "object_backlog", "paused", "recovery_point", "remote", "remote_bucket", "remote_credentials", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "direction",
                "lag",
                "status_details",
                "cascading_enabled",
                "recovery_point",
                "status",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of local_bucket
        if _include_in_dict('local_bucket', include_readonly, excluded_fields, none_fields):
            _dict['local_bucket'] = self.local_bucket.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of object_backlog
        if _include_in_dict('object_backlog', include_readonly, excluded_fields, none_fields):
            _dict['object_backlog'] = self.object_backlog.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote
        if _include_in_dict('remote', include_readonly, excluded_fields, none_fields):
            _dict['remote'] = self.remote.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote_bucket
        if _include_in_dict('remote_bucket', include_readonly, excluded_fields, none_fields):
            _dict['remote_bucket'] = self.remote_bucket.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote_credentials
        if _include_in_dict('remote_credentials', include_readonly, excluded_fields, none_fields):
            _dict['remote_credentials'] = self.remote_credentials.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> BucketReplicaLink:
        """Create an instance of BucketReplicaLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> BucketReplicaLink:
        """Create an instance of BucketReplicaLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return BucketReplicaLink.parse_obj(obj)

        _obj = BucketReplicaLink.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "direction": obj.get("direction"),
            "lag": obj.get("lag"),
            "status_details": obj.get("status_details"),
            "cascading_enabled": obj.get("cascading_enabled"),
            "local_bucket": FixedReference.from_dict(obj.get("local_bucket")) if obj.get("local_bucket") is not None else None,
            "object_backlog": ObjectBacklog.from_dict(obj.get("object_backlog")) if obj.get("object_backlog") is not None else None,
            "paused": obj.get("paused"),
            "recovery_point": obj.get("recovery_point"),
            "remote": FixedReference.from_dict(obj.get("remote")) if obj.get("remote") is not None else None,
            "remote_bucket": FixedReferenceNameOnly.from_dict(obj.get("remote_bucket")) if obj.get("remote_bucket") is not None else None,
            "remote_credentials": ReferenceWritable.from_dict(obj.get("remote_credentials")) if obj.get("remote_credentials") is not None else None,
            "status": obj.get("status")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

