# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.6, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.6
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ActiveDirectory(BaseModel):
    """
    ActiveDirectory
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    computer_name: Optional[StrictStr] = Field(default=None, description="The common name of the computer account to be created in the Active Directory domain. If not specified, defaults to the name of the Active Directory configuration.")
    directory_servers: Optional[List[StrictStr]] = Field(default=None, description="A list of directory servers that will be used for lookups related to user authorization. Accepted server formats are IP address and DNS name. All specified servers must be registered to the domain appropriately in the array's configured DNS and will only be communicated with over the secure LDAP (LDAPS) protocol.")
    domain: Optional[StrictStr] = Field(default=None, description="The Active Directory domain to join.")
    encryption_types: Optional[List[StrictStr]] = Field(default=None, description="The encryption types that are supported for use by clients for Kerberos authentication.")
    join_ou: Optional[StrictStr] = Field(default=None, description="The relative distinguished name of the organizational unit in which the computer account was created when joining the domain.")
    kerberos_servers: Optional[List[StrictStr]] = Field(default=None, description="A list of key distribution servers to use for Kerberos protocol. Accepted server formats are IP address and DNS name. All specified servers must be registered to the domain appropriately in the array's configured DNS.")
    service_principal_names: Optional[List[Annotated[str, Field(strict=True)]]] = Field(default=None, description="A list of service principal names registered for the machine account, which can be used for the creation of keys for Kerberos authentication.")
    __properties: ClassVar[List[str]] = ["name", "id", "computer_name", "directory_servers", "domain", "encryption_types", "join_ou", "kerberos_servers", "service_principal_names"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActiveDirectory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActiveDirectory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "computer_name": obj.get("computer_name"),
            "directory_servers": obj.get("directory_servers"),
            "domain": obj.get("domain"),
            "encryption_types": obj.get("encryption_types"),
            "join_ou": obj.get("join_ou"),
            "kerberos_servers": obj.get("kerberos_servers"),
            "service_principal_names": obj.get("service_principal_names")
        })
        return _obj


