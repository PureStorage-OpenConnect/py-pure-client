# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.8, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.8
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, conint


class AdminSetting(BaseModel):
    """
    AdminSetting
    """
    lockout_duration: Optional[conint(strict=True, le=7776000000, ge=0)] = Field(default=None, description="The lockout duration, in milliseconds, if a user has reached the maximum number of login attempts. Ranges from 1 second to 90 days. Default value is `null`. Use 0 to reset the value to `null`.")
    max_login_attempts: Optional[conint(strict=True, le=100, ge=0)] = Field(default=None, description="The maximum number of failed login attempts allowed before the user is locked out. Default value is `null`. Use 0 to reset the value to `null`.")
    min_password_length: Optional[conint(strict=True, le=100, ge=1)] = Field(default=None, description="The minimum password length. If not specified, defaults to 1 character.")
    __properties = ["lockout_duration", "max_login_attempts", "min_password_length"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> AdminSetting:
        """Create an instance of AdminSetting from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> AdminSetting:
        """Create an instance of AdminSetting from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AdminSetting.parse_obj(obj)

        _obj = AdminSetting.construct(_fields_set=None, **{
            "lockout_duration": obj.get("lockout_duration"),
            "max_login_attempts": obj.get("max_login_attempts"),
            "min_password_length": obj.get("min_password_length")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

