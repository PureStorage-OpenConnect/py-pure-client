# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    OpenAPI spec version: 2.16
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_16 import models

class PasswordPolicy(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'enabled': 'bool',
        'is_local': 'bool',
        'location': 'FixedReference',
        'policy_type': 'str',
        'lockout_duration': 'int',
        'max_login_attempts': 'int',
        'min_password_length': 'int',
        'password_history': 'int',
        'min_password_age': 'int',
        'min_character_groups': 'int',
        'min_characters_per_group': 'int',
        'enforce_username_check': 'bool',
        'enforce_dictionary_check': 'bool'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'enabled': 'enabled',
        'is_local': 'is_local',
        'location': 'location',
        'policy_type': 'policy_type',
        'lockout_duration': 'lockout_duration',
        'max_login_attempts': 'max_login_attempts',
        'min_password_length': 'min_password_length',
        'password_history': 'password_history',
        'min_password_age': 'min_password_age',
        'min_character_groups': 'min_character_groups',
        'min_characters_per_group': 'min_characters_per_group',
        'enforce_username_check': 'enforce_username_check',
        'enforce_dictionary_check': 'enforce_dictionary_check'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        enabled=None,  # type: bool
        is_local=None,  # type: bool
        location=None,  # type: models.FixedReference
        policy_type=None,  # type: str
        lockout_duration=None,  # type: int
        max_login_attempts=None,  # type: int
        min_password_length=None,  # type: int
        password_history=None,  # type: int
        min_password_age=None,  # type: int
        min_character_groups=None,  # type: int
        min_characters_per_group=None,  # type: int
        enforce_username_check=None,  # type: bool
        enforce_dictionary_check=None,  # type: bool
    ):
        """
        Keyword args:
            name (str): A name chosen by the user. Can be changed. Must be locally unique.
            id (str): A non-modifiable, globally unique ID chosen by the system.
            enabled (bool): If `true`, the policy is enabled. If not specified, defaults to `true`.
            is_local (bool): Whether the policy is defined on the local array.
            location (FixedReference): Reference to the array where the policy is defined.
            policy_type (str): Type of the policy. Valid values include `alert`, `audit`, `bucket-access`, `cross-origin-resource-sharing`, `network-access`, `nfs`, `object-access`, `smb-client`, `smb-share`, `snapshot`, `ssh-certificate-authority`, and `worm-data`.
            lockout_duration (int): The lockout duration, in milliseconds, if a user is locked out after reaching the maximum number of login attempts. Ranges from 1 second to 90 days.
            max_login_attempts (int): Maximum number of failed login attempts allowed before the user is locked out.
            min_password_length (int): Minimum password length. If not specified, defaults to 1.
            password_history (int): The number of passwords tracked to prevent reuse of passwords.
            min_password_age (int): The minimum age, in milliseconds, of password before password change is allowed. Ranges from 0 ms to 7 days with precision to 1 hour.
            min_character_groups (int): The minimum number of character groups ([a-z], [A-Z], [0-9], other) required to be present in a password.
            min_characters_per_group (int): The minimum number of characters per group to count the group as present.
            enforce_username_check (bool): If `true`, the username cannot be a substring of the password. Only applies to usernames of 4 characters and longer.
            enforce_dictionary_check (bool): If `true`, test password against dictionary of known leaked passwords. Requires passwords longer than 6 characters.
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if enabled is not None:
            self.enabled = enabled
        if is_local is not None:
            self.is_local = is_local
        if location is not None:
            self.location = location
        if policy_type is not None:
            self.policy_type = policy_type
        if lockout_duration is not None:
            self.lockout_duration = lockout_duration
        if max_login_attempts is not None:
            self.max_login_attempts = max_login_attempts
        if min_password_length is not None:
            self.min_password_length = min_password_length
        if password_history is not None:
            self.password_history = password_history
        if min_password_age is not None:
            self.min_password_age = min_password_age
        if min_character_groups is not None:
            self.min_character_groups = min_character_groups
        if min_characters_per_group is not None:
            self.min_characters_per_group = min_characters_per_group
        if enforce_username_check is not None:
            self.enforce_username_check = enforce_username_check
        if enforce_dictionary_check is not None:
            self.enforce_dictionary_check = enforce_dictionary_check

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `PasswordPolicy`".format(key))
        if key == "lockout_duration" and value is not None:
            if value > 7776000000:
                raise ValueError("Invalid value for `lockout_duration`, value must be less than or equal to `7776000000`")
            if value < 0:
                raise ValueError("Invalid value for `lockout_duration`, must be a value greater than or equal to `0`")
        if key == "max_login_attempts" and value is not None:
            if value > 100:
                raise ValueError("Invalid value for `max_login_attempts`, value must be less than or equal to `100`")
            if value < 0:
                raise ValueError("Invalid value for `max_login_attempts`, must be a value greater than or equal to `0`")
        if key == "min_password_length" and value is not None:
            if value > 100:
                raise ValueError("Invalid value for `min_password_length`, value must be less than or equal to `100`")
            if value < 0:
                raise ValueError("Invalid value for `min_password_length`, must be a value greater than or equal to `0`")
        if key == "password_history" and value is not None:
            if value > 64:
                raise ValueError("Invalid value for `password_history`, value must be less than or equal to `64`")
            if value < 0:
                raise ValueError("Invalid value for `password_history`, must be a value greater than or equal to `0`")
        if key == "min_password_age" and value is not None:
            if value > 604800000:
                raise ValueError("Invalid value for `min_password_age`, value must be less than or equal to `604800000`")
            if value < 0:
                raise ValueError("Invalid value for `min_password_age`, must be a value greater than or equal to `0`")
        if key == "min_character_groups" and value is not None:
            if value > 4:
                raise ValueError("Invalid value for `min_character_groups`, value must be less than or equal to `4`")
            if value < 0:
                raise ValueError("Invalid value for `min_character_groups`, must be a value greater than or equal to `0`")
        if key == "min_characters_per_group" and value is not None:
            if value < 0:
                raise ValueError("Invalid value for `min_characters_per_group`, must be a value greater than or equal to `0`")
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(PasswordPolicy, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordPolicy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
