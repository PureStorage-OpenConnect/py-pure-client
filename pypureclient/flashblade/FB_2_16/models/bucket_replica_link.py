# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_16.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_16.models.fixed_reference_name_only import FixedReferenceNameOnly
from pypureclient.flashblade.FB_2_16.models.object_backlog import ObjectBacklog
from pypureclient.flashblade.FB_2_16.models.reference_writable import ReferenceWritable
from typing import Optional, Set
from typing_extensions import Self

class BucketReplicaLink(BaseModel):
    """
    BucketReplicaLink
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values are `inbound` and `outbound`.")
    lag: Optional[StrictInt] = Field(default=None, description="Duration in milliseconds that represents how far behind the replication target is from the source. This is the time difference between current time and `recovery_point`.")
    status_details: Optional[StrictStr] = Field(default=None, description="Detailed information about the status of the replica link when it is unhealthy.")
    local_bucket: Optional[FixedReference] = Field(default=None, description="Reference to a local bucket.")
    paused: Optional[StrictBool] = Field(default=None, description="Is the replica link paused?")
    recovery_point: Optional[StrictInt] = Field(default=None, description="Time, in milliseconds since UNIX epoch, where all object changes before this time are guaranteed to have been replicated. Changes after this time may have been replicated.")
    remote: Optional[FixedReference] = Field(default=None, description="Reference to the associated remote, which can either be a `target` or remote `array`. If it is an `array`, then the `resource-type` field will not be populated.")
    remote_bucket: Optional[FixedReferenceNameOnly] = Field(default=None, description="Reference to a remote bucket.")
    remote_credentials: Optional[ReferenceWritable] = Field(default=None, description="Reference to a remote-credentials object to access the remote bucket.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the replica link. Values include `replicating`, `paused`, and `unhealthy`.")
    cascading_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, objects replicated to this bucket via a replica link from another array will also be replicated by this link to the remote bucket. Defaults to `false`.")
    object_backlog: Optional[ObjectBacklog] = Field(default=None, description="The number of pending operations and their size that are currently in the backlog.")
    __properties: ClassVar[List[str]] = ["id", "direction", "lag", "status_details", "local_bucket", "paused", "recovery_point", "remote", "remote_bucket", "remote_credentials", "status", "cascading_enabled", "object_backlog"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "lag",
            "status_details",
            "recovery_point",
            "status",
            "cascading_enabled",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_bucket
        if self.local_bucket and (include_readonly or "local_bucket" not in excluded_fields):
            _dict['local_bucket'] = self.local_bucket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote and (include_readonly or "remote" not in excluded_fields):
            _dict['remote'] = self.remote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_bucket
        if self.remote_bucket and (include_readonly or "remote_bucket" not in excluded_fields):
            _dict['remote_bucket'] = self.remote_bucket.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_credentials
        if self.remote_credentials and (include_readonly or "remote_credentials" not in excluded_fields):
            _dict['remote_credentials'] = self.remote_credentials.to_dict()
        # override the default output from pydantic by calling `to_dict()` of object_backlog
        if self.object_backlog and (include_readonly or "object_backlog" not in excluded_fields):
            _dict['object_backlog'] = self.object_backlog.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BucketReplicaLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BucketReplicaLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "direction": obj.get("direction"),
            "lag": obj.get("lag"),
            "status_details": obj.get("status_details"),
            "local_bucket": FixedReference.from_dict(obj["local_bucket"]) if obj.get("local_bucket") is not None else None,
            "paused": obj.get("paused"),
            "recovery_point": obj.get("recovery_point"),
            "remote": FixedReference.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "remote_bucket": FixedReferenceNameOnly.from_dict(obj["remote_bucket"]) if obj.get("remote_bucket") is not None else None,
            "remote_credentials": ReferenceWritable.from_dict(obj["remote_credentials"]) if obj.get("remote_credentials") is not None else None,
            "status": obj.get("status"),
            "cascading_enabled": obj.get("cascading_enabled"),
            "object_backlog": ObjectBacklog.from_dict(obj["object_backlog"]) if obj.get("object_backlog") is not None else None
        })
        return _obj


