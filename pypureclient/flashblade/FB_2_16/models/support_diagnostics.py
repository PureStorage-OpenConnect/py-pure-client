# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_16.models.start_end_time import StartEndTime
from pypureclient.flashblade.FB_2_16.models.support_diagnostics_severity_count import SupportDiagnosticsSeverityCount
from typing import Optional, Set
from typing_extensions import Self

class SupportDiagnostics(BaseModel):
    """
    SupportDiagnostics
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    task_id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified.")
    index: Optional[StrictInt] = Field(default=None, description="The unique index of the task.")
    start_time: Optional[StrictInt] = Field(default=None, description="Start time in milliseconds since the UNIX epoch.")
    analysis_period: Optional[StartEndTime] = None
    version: Optional[StrictStr] = Field(default=None, description="Version of diagnostics tool.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the diagnostics. A status of `running` indicates that the diagnostics is still running. A status of `completed` indicates that the diagnostics has completed. A status of `failed` indicates that the diagnostics has failed.")
    severity_count: Optional[List[SupportDiagnosticsSeverityCount]] = Field(default=None, description="List of severity counts.")
    __properties: ClassVar[List[str]] = ["name", "id", "task_id", "index", "start_time", "analysis_period", "version", "status", "severity_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "task_id",
            "index",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of analysis_period
        if self.analysis_period and (include_readonly or "analysis_period" not in excluded_fields):
            _dict['analysis_period'] = self.analysis_period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in severity_count (list)
        if self.severity_count and (include_readonly or "severity_count" not in excluded_fields):
            _items = []
            for _item_severity_count in self.severity_count:
                if _item_severity_count:
                    _items.append(_item_severity_count.to_dict())
            _dict['severity_count'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SupportDiagnostics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SupportDiagnostics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "task_id": obj.get("task_id"),
            "index": obj.get("index"),
            "start_time": obj.get("start_time"),
            "analysis_period": StartEndTime.from_dict(obj["analysis_period"]) if obj.get("analysis_period") is not None else None,
            "version": obj.get("version"),
            "status": obj.get("status"),
            "severity_count": [SupportDiagnosticsSeverityCount.from_dict(_item) for _item in obj["severity_count"]] if obj.get("severity_count") is not None else None
        })
        return _obj


