# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.flashblade.FB_2_16.models.start_end_time import StartEndTime
from pypureclient.flashblade.FB_2_16.models.support_diagnostics_severity_count import SupportDiagnosticsSeverityCount


class SupportDiagnostics(BaseModel):
    """
    SupportDiagnostics
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    analysis_period: Optional[StartEndTime] = None
    index: Optional[StrictInt] = Field(default=None, description="The unique index of the task.")
    severity_count: Optional[conlist(SupportDiagnosticsSeverityCount)] = Field(default=None, description="List of severity counts.")
    start_time: Optional[StrictInt] = Field(default=None, description="Start time in milliseconds since the UNIX epoch.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the diagnostics. A status of `running` indicates that the diagnostics is still running. A status of `completed` indicates that the diagnostics has completed. A status of `failed` indicates that the diagnostics has failed.")
    task_id: Optional[StrictStr] = Field(default=None, description="A globally unique, system-generated ID. The ID cannot be modified.")
    version: Optional[StrictStr] = Field(default=None, description="Version of diagnostics tool.")
    __properties = ["id", "name", "analysis_period", "index", "severity_count", "start_time", "status", "task_id", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "index",
                "task_id",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of analysis_period
        if _include_in_dict('analysis_period', include_readonly, excluded_fields, none_fields):
            _dict['analysis_period'] = self.analysis_period.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in severity_count (list)
        if _include_in_dict('severity_count', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.severity_count:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['severity_count'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> SupportDiagnostics:
        """Create an instance of SupportDiagnostics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> SupportDiagnostics:
        """Create an instance of SupportDiagnostics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SupportDiagnostics.parse_obj(obj)

        _obj = SupportDiagnostics.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "analysis_period": StartEndTime.from_dict(obj.get("analysis_period")) if obj.get("analysis_period") is not None else None,
            "index": obj.get("index"),
            "severity_count": [SupportDiagnosticsSeverityCount.from_dict(_item) for _item in obj.get("severity_count")] if obj.get("severity_count") is not None else None,
            "start_time": obj.get("start_time"),
            "status": obj.get("status"),
            "task_id": obj.get("task_id"),
            "version": obj.get("version")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

