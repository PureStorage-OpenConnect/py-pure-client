# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool
from pypureclient.flashblade.FB_2_16.models.reference_writable import ReferenceWritable


class Smb(BaseModel):
    """
    Smb
    """
    client_policy: Optional[ReferenceWritable] = Field(default=None, description="Deprecated. See File System Exports for newer functionality. The value returned will be the `client_policy` of the File System Export for the default server, and SMB, with the `export_name` matching the file system name, if there is one and null otherwise. Modifying this field will still work. If the current value is null, then setting this field will attempt to create a File System Export with the `client_policy` and other default values. The `export_name` will be the same as the file system's `name`. If the current value is not null, then setting this field will change the `client_policy` in the matching File System Export. The SMB Client policy for the file system. Setting a policy here grants access permissions (e.g. read-only or read-write) to the file system via SMB on a per-client basis. If no policy is set here, no client will have access. Use \"\" to clear.")
    continuous_availability_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, the file system will be continuously available during disruptive scenarios such as network disruption, blades failover, etc. If not specified, defaults to `true`.")
    enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, enables access to the file system over the SMB protocol. If not specified, defaults to `false`.")
    share_policy: Optional[ReferenceWritable] = Field(default=None, description="Deprecated. See File System Exports for newer functionality. The value returned will be the `policy` of the File System Export for the default server, and SMB, with the `export_name` matching the file system name, if there is one and null otherwise. Modifying this field will still work. If the current value is null, then setting this field will attempt to create a File System Export with the policy and other default values. The `export_name` will be the same as the file system's `name`. If the current value is not null, then setting this field will change the `policy` in the matching File System Export. The SMB Share policy for the file system. Setting a policy here grants access permissions (e.g. allow or deny Full Control, Change, and/or Read) to the file system via SMB on a per-user / per-group basis. If no policy is set here, no user or group will have access. Use \"\" to clear.")
    __properties = ["client_policy", "continuous_availability_enabled", "enabled", "share_policy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of client_policy
        if _include_in_dict('client_policy', include_readonly, excluded_fields, none_fields):
            _dict['client_policy'] = self.client_policy.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of share_policy
        if _include_in_dict('share_policy', include_readonly, excluded_fields, none_fields):
            _dict['share_policy'] = self.share_policy.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Smb:
        """Create an instance of Smb from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Smb:
        """Create an instance of Smb from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Smb.parse_obj(obj)

        _obj = Smb.construct(_fields_set=None, **{
            "client_policy": ReferenceWritable.from_dict(obj.get("client_policy")) if obj.get("client_policy") is not None else None,
            "continuous_availability_enabled": obj.get("continuous_availability_enabled"),
            "enabled": obj.get("enabled"),
            "share_policy": ReferenceWritable.from_dict(obj.get("share_policy")) if obj.get("share_policy") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

