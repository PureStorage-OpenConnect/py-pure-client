# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_16.models.reference_writable import ReferenceWritable
from typing import Optional, Set
from typing_extensions import Self

class SmbPost(BaseModel):
    """
    SmbPost
    """ # noqa: E501
    enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, enables access to the file system over the SMB protocol. If not specified, defaults to `false`.")
    client_policy: Optional[ReferenceWritable] = Field(default=None, description="The SMB Client policy for the file system. Setting a policy here grants access permissions (e.g. read-only or read-write) to the file system via SMB on a per-client basis. Defaults to a pre-defined full access policy if none is specified.")
    share_policy: Optional[ReferenceWritable] = Field(default=None, description="The SMB Share policy for the file system. Setting a policy here grants access permissions (e.g. allow or deny Full Control, Change, and/or Read) to the file system via SMB on a per-user / per-group basis. Defaults to a pre-defined full access policy if none is specified.")
    continuous_availability_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, the file system will be continuously available during disruptive scenarios such as network disruption, blades failover, etc. If not specified, defaults to `true`.")
    __properties: ClassVar[List[str]] = ["enabled", "client_policy", "share_policy", "continuous_availability_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client_policy
        if self.client_policy and (include_readonly or "client_policy" not in excluded_fields):
            _dict['client_policy'] = self.client_policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of share_policy
        if self.share_policy and (include_readonly or "share_policy" not in excluded_fields):
            _dict['share_policy'] = self.share_policy.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SmbPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SmbPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "enabled": obj.get("enabled"),
            "client_policy": ReferenceWritable.from_dict(obj["client_policy"]) if obj.get("client_policy") is not None else None,
            "share_policy": ReferenceWritable.from_dict(obj["share_policy"]) if obj.get("share_policy") is not None else None,
            "continuous_availability_enabled": obj.get("continuous_availability_enabled")
        })
        return _obj


