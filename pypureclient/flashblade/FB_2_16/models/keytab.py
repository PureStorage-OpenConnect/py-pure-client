# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_16.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class Keytab(BaseModel):
    """
    Keytab
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    encryption_type: Optional[StrictStr] = Field(default=None, description="The encryption type used by the Kerberos key distribution center to generate the keytab.")
    fqdn: Optional[StrictStr] = Field(default=None, description="The fully qualified domain name to which the keytab was issued.")
    kvno: Optional[StrictInt] = Field(default=None, description="The key version number of the key used to generate the keytab.")
    prefix: Optional[StrictStr] = Field(default=None, description="The prefix in the name of the keytab object. This is the same for all keytab objects created from a single keytab file. The name of a keytab entry is created in the format `<prefix>.<suffix>` for all entries.")
    principal: Optional[StrictStr] = Field(default=None, description="The service name for which the keytab was issued.")
    realm: Optional[StrictStr] = Field(default=None, description="The Kerberos realm that issued the keytab.")
    source: Optional[FixedReference] = Field(default=None, description="A reference to the Active Directory configuration for the computer account that was used to create this keytab. If this keytab was uploaded from a file, all fields in the reference possess `null` values.")
    suffix: Optional[StrictInt] = Field(default=None, description="The suffix in the name of the keytab object, determined at creation time using the slot number of the keytab entry in a file and the number of existing entries with the same prefix. The name of a keytab entry is created in the format `<prefix>.<suffix>` for all entries.")
    server: Optional[FixedReference] = Field(default=None, description="The server where the keytab is used.")
    __properties: ClassVar[List[str]] = ["name", "id", "encryption_type", "fqdn", "kvno", "prefix", "principal", "realm", "source", "suffix", "server"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "encryption_type",
            "fqdn",
            "kvno",
            "prefix",
            "principal",
            "realm",
            "suffix",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source and (include_readonly or "source" not in excluded_fields):
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server and (include_readonly or "server" not in excluded_fields):
            _dict['server'] = self.server.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Keytab from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Keytab from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "encryption_type": obj.get("encryption_type"),
            "fqdn": obj.get("fqdn"),
            "kvno": obj.get("kvno"),
            "prefix": obj.get("prefix"),
            "principal": obj.get("principal"),
            "realm": obj.get("realm"),
            "source": FixedReference.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "suffix": obj.get("suffix"),
            "server": FixedReference.from_dict(obj["server"]) if obj.get("server") is not None else None
        })
        return _obj


