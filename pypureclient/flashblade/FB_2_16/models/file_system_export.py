# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.16
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_16.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_16.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class FileSystemExport(BaseModel):
    """
    FileSystemExport
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    enabled: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if and only if the export policy that manages this export is enabled AND the protocol is enabled on the file system.")
    export_name: Optional[StrictStr] = Field(default=None, description="The name of the export used by clients to mount the file system. Export names must be unique within the same protocol/server combination.")
    member: Optional[FixedReference] = Field(default=None, description="Reference to the file system the policy is applied to.")
    policy: Optional[Reference] = Field(default=None, description="Reference to the NFS export policy or SMB client policy.")
    server: Optional[FixedReference] = Field(default=None, description="Reference to the server the export will be visible on.")
    share_policy: Optional[Reference] = Field(default=None, description="Reference to the SMB share policy (only used for SMB).")
    status: Optional[StrictStr] = Field(default=None, description="Explains why `enabled` is `false`. Valid values include `policy_disabled` and `protocol_disabled`.")
    policy_type: Optional[StrictStr] = Field(default=None, description="Policy type attached to the export. It is either SMB or NFS.")
    __properties: ClassVar[List[str]] = ["name", "id", "enabled", "export_name", "member", "policy", "server", "share_policy", "status", "policy_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "enabled",
            "status",
            "policy_type",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member and (include_readonly or "member" not in excluded_fields):
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy and (include_readonly or "policy" not in excluded_fields):
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of server
        if self.server and (include_readonly or "server" not in excluded_fields):
            _dict['server'] = self.server.to_dict()
        # override the default output from pydantic by calling `to_dict()` of share_policy
        if self.share_policy and (include_readonly or "share_policy" not in excluded_fields):
            _dict['share_policy'] = self.share_policy.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSystemExport from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSystemExport from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "enabled": obj.get("enabled"),
            "export_name": obj.get("export_name"),
            "member": FixedReference.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "policy": Reference.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "server": FixedReference.from_dict(obj["server"]) if obj.get("server") is not None else None,
            "share_policy": Reference.from_dict(obj["share_policy"]) if obj.get("share_policy") is not None else None,
            "status": obj.get("status"),
            "policy_type": obj.get("policy_type")
        })
        return _obj


