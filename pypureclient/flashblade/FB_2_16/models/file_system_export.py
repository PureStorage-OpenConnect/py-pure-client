# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.16, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    OpenAPI spec version: 2.16
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_16 import models

class FileSystemExport(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'id': 'str',
        'enabled': 'bool',
        'export_name': 'str',
        'member': 'FixedReference',
        'policy': 'Reference',
        'policy_type': 'str',
        'server': 'FixedReference',
        'share_policy': 'Reference',
        'status': 'str'
    }

    attribute_map = {
        'name': 'name',
        'id': 'id',
        'enabled': 'enabled',
        'export_name': 'export_name',
        'member': 'member',
        'policy': 'policy',
        'policy_type': 'policy_type',
        'server': 'server',
        'share_policy': 'share_policy',
        'status': 'status'
    }

    required_args = {
    }

    def __init__(
        self,
        name=None,  # type: str
        id=None,  # type: str
        enabled=None,  # type: bool
        export_name=None,  # type: str
        member=None,  # type: models.FixedReference
        policy=None,  # type: models.Reference
        policy_type=None,  # type: str
        server=None,  # type: models.FixedReference
        share_policy=None,  # type: models.Reference
        status=None,  # type: str
    ):
        """
        Keyword args:
            name (str): Name of the object (e.g., a file system or snapshot).
            id (str): A non-modifiable, globally unique ID chosen by the system.
            enabled (bool): Returns a value of `true` if and only if the export policy that manages this export is enabled AND the protocol is enabled on the file system.
            export_name (str): The name of the export used by clients to mount the file system. Export names must be unique within the same protocol/server combination.
            member (FixedReference): Reference to the file system the policy is applied to.
            policy (Reference): Reference to the NFS export policy or SMB client policy.
            policy_type (str): Policy type attached to the export. It is either SMB or NFS.
            server (FixedReference): Reference to the server the export will be visible on.
            share_policy (Reference): Reference to the SMB share policy (only used for SMB).
            status (str): Explains why `enabled` is `false`. Valid values include `policy_disabled` and `protocol_disabled`.
        """
        if name is not None:
            self.name = name
        if id is not None:
            self.id = id
        if enabled is not None:
            self.enabled = enabled
        if export_name is not None:
            self.export_name = export_name
        if member is not None:
            self.member = member
        if policy is not None:
            self.policy = policy
        if policy_type is not None:
            self.policy_type = policy_type
        if server is not None:
            self.server = server
        if share_policy is not None:
            self.share_policy = share_policy
        if status is not None:
            self.status = status

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `FileSystemExport`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(FileSystemExport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileSystemExport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
