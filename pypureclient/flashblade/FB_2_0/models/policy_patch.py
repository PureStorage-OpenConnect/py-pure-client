# coding: utf-8

"""
    FlashBlade REST API Client

    A lightweight client for FlashBlade REST API 2.0, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_0.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_0.models.policy_rule import PolicyRule
from typing import Optional, Set
from typing_extensions import Self

class PolicyPatch(BaseModel):
    """
    PolicyPatch
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates if policy is enabled (`true`) or disabled (`false`). If not specified, defaults to `true`.")
    is_local: Optional[StrictBool] = Field(default=None, description="Whether the policy is defined on the local array.")
    location: Optional[FixedReference] = Field(default=None, description="Reference to the array where the policy is defined.")
    rules: Optional[List[PolicyRule]] = None
    add_rules: Optional[List[PolicyRule]] = None
    remove_rules: Optional[List[PolicyRule]] = None
    __properties: ClassVar[List[str]] = ["name", "id", "enabled", "is_local", "location", "rules", "add_rules", "remove_rules"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "is_local",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location and (include_readonly or "location" not in excluded_fields):
            _dict['location'] = self.location.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        if self.rules and (include_readonly or "rules" not in excluded_fields):
            _items = []
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in add_rules (list)
        if self.add_rules and (include_readonly or "add_rules" not in excluded_fields):
            _items = []
            for _item_add_rules in self.add_rules:
                if _item_add_rules:
                    _items.append(_item_add_rules.to_dict())
            _dict['add_rules'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in remove_rules (list)
        if self.remove_rules and (include_readonly or "remove_rules" not in excluded_fields):
            _items = []
            for _item_remove_rules in self.remove_rules:
                if _item_remove_rules:
                    _items.append(_item_remove_rules.to_dict())
            _dict['remove_rules'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "enabled": obj.get("enabled"),
            "is_local": obj.get("is_local"),
            "location": FixedReference.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "rules": [PolicyRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None,
            "add_rules": [PolicyRule.from_dict(_item) for _item in obj["add_rules"]] if obj.get("add_rules") is not None else None,
            "remove_rules": [PolicyRule.from_dict(_item) for _item in obj["remove_rules"]] if obj.get("remove_rules") is not None else None
        })
        return _obj


