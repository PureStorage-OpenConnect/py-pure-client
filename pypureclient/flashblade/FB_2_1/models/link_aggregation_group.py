# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.1, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist, constr, validator
from pypureclient.flashblade.FB_2_1.models.fixed_reference import FixedReference


class LinkAggregationGroup(BaseModel):
    """
    LinkAggregationGroup
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    lag_speed: Optional[StrictInt] = Field(default=None, description="Combined speed of all ports in the LAG in bits-per-second.")
    mac_address: Optional[constr(strict=True)] = Field(default=None, description="Unique MAC address assigned to the LAG.")
    port_speed: Optional[StrictInt] = Field(default=None, description="Configured speed of each port in the LAG in bits-per-second.")
    ports: Optional[conlist(FixedReference)] = Field(default=None, description="Ports associated with the LAG.")
    status: Optional[StrictStr] = Field(default=None, description="Health status of the LAG. Valid values are `critical`, `healthy`, `identifying`, `unclaimed`, `unhealthy`, `unrecognized`, and `unused`.")
    __properties = ["id", "name", "lag_speed", "mac_address", "port_speed", "ports", "status"]

    @validator('mac_address')
    def mac_address_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$", value):
            raise ValueError(r"must validate the regular expression /^([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "lag_speed",
                "mac_address",
                "port_speed",
                "status",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        if _include_in_dict('ports', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['ports'] = _items
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> LinkAggregationGroup:
        """Create an instance of LinkAggregationGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> LinkAggregationGroup:
        """Create an instance of LinkAggregationGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return LinkAggregationGroup.parse_obj(obj)

        _obj = LinkAggregationGroup.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "lag_speed": obj.get("lag_speed"),
            "mac_address": obj.get("mac_address"),
            "port_speed": obj.get("port_speed"),
            "ports": [FixedReference.from_dict(_item) for _item in obj.get("ports")] if obj.get("ports") is not None else None,
            "status": obj.get("status")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

