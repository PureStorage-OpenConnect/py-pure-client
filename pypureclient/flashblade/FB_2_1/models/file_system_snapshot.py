# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.1, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_1.models.fixed_location_reference import FixedLocationReference
from pypureclient.flashblade.FB_2_1.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class FileSystemSnapshot(BaseModel):
    """
    FileSystemSnapshot
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A name chosen by the user. Can be changed. Must be locally unique.")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    created: Optional[StrictInt] = Field(default=None, description="Creation timestamp of the object.")
    destroyed: Optional[StrictBool] = Field(default=None, description="Is the file system snapshot destroyed? If not specified, defaults to `false`.")
    owner: Optional[FixedReference] = Field(default=None, description="A reference to the file system that owns this snapshot. If the owner is destroyed, this will be destroyed.")
    owner_destroyed: Optional[StrictBool] = Field(default=None, description="Is the owning file system destroyed?")
    policy: Optional[FixedLocationReference] = Field(default=None, description="A reference to the associated policy.")
    source: Optional[FixedLocationReference] = Field(default=None, description="A reference to the file system that was the source of the data in this snapshot. Normally this is the same as the owner, but if the snapshot is replicated, the source is the original file system.")
    suffix: Optional[StrictStr] = Field(default=None, description="The suffix of the snapshot, e.g., `snap1`.")
    time_remaining: Optional[StrictInt] = Field(default=None, description="Time in milliseconds before the file system snapshot is eradicated. `null` if not destroyed.")
    __properties: ClassVar[List[str]] = ["name", "id", "created", "destroyed", "owner", "owner_destroyed", "policy", "source", "suffix", "time_remaining"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created",
            "owner_destroyed",
            "suffix",
            "time_remaining",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of owner
        if self.owner and (include_readonly or "owner" not in excluded_fields):
            _dict['owner'] = self.owner.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy and (include_readonly or "policy" not in excluded_fields):
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source and (include_readonly or "source" not in excluded_fields):
            _dict['source'] = self.source.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSystemSnapshot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSystemSnapshot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "created": obj.get("created"),
            "destroyed": obj.get("destroyed"),
            "owner": FixedReference.from_dict(obj["owner"]) if obj.get("owner") is not None else None,
            "owner_destroyed": obj.get("owner_destroyed"),
            "policy": FixedLocationReference.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "source": FixedLocationReference.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "suffix": obj.get("suffix"),
            "time_remaining": obj.get("time_remaining")
        })
        return _obj


