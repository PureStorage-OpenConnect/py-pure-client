# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.3, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flashblade.FB_2_3.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class KmipServer(BaseModel):
    """
    KmipServer
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    uris: Optional[Annotated[List[Annotated[str, Field(strict=True)]], Field(min_length=1, max_length=30)]] = Field(default=None, description="List of URIs for the configured KMIP servers in the format [protocol://]hostname:port.")
    ca_certificate: Optional[Reference] = Field(default=None, description="CA certificate used to validate the authenticity of the configured servers.")
    ca_certificate_group: Optional[Reference] = Field(default=None, description="A certificate group containing CA certificates that can be used to validate the authenticity of the configured servers.")
    __properties: ClassVar[List[str]] = ["name", "id", "uris", "ca_certificate", "ca_certificate_group"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ca_certificate
        if self.ca_certificate and (include_readonly or "ca_certificate" not in excluded_fields):
            _dict['ca_certificate'] = self.ca_certificate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ca_certificate_group
        if self.ca_certificate_group and (include_readonly or "ca_certificate_group" not in excluded_fields):
            _dict['ca_certificate_group'] = self.ca_certificate_group.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KmipServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KmipServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "uris": obj.get("uris"),
            "ca_certificate": Reference.from_dict(obj["ca_certificate"]) if obj.get("ca_certificate") is not None else None,
            "ca_certificate_group": Reference.from_dict(obj["ca_certificate_group"]) if obj.get("ca_certificate_group") is not None else None
        })
        return _obj


