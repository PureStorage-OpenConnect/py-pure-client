# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.3, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_3.models.reference_writable import ReferenceWritable
from typing import Optional, Set
from typing_extensions import Self

class LifecycleRulePost(BaseModel):
    """
    LifecycleRulePost
    """ # noqa: E501
    abort_incomplete_multipart_uploads_after: Optional[StrictInt] = Field(default=None, description="Duration of time after which incomplete multipart uploads will be aborted. Measured in milliseconds. Must be a multiple of 86400000 to represent a whole number of days.")
    keep_current_version_for: Optional[StrictInt] = Field(default=None, description="Time after which current versions will be marked expired. Measured in milliseconds. Must be a multiple of 86400000 to represent a whole number of days.")
    keep_current_version_until: Optional[StrictInt] = Field(default=None, description="Time after which current versions will be marked expired. Measured in milliseconds, time since epoch. Must be a valid date, accurate to day.")
    bucket: Optional[ReferenceWritable] = Field(default=None, description="The bucket name for lifecycle rule creation.")
    rule_id: Optional[StrictStr] = Field(default=None, description="Identifier for the rule that is unique to the bucket that it applies to. Can have a maximum length of 255 characters. If not specified, an id unique to the bucket will be generated in the format `fbRuleId<number>` where number increments, starting at 1.")
    keep_previous_version_for: Optional[StrictInt] = Field(default=None, description="Time after which previous versions will be marked expired. Measured in milliseconds. Must be a multiple of 86400000 to represent a whole number of days.")
    prefix: Optional[StrictStr] = Field(default=None, description="Object key prefix identifying one or more objects in the bucket. Can have a maximum length of 1024 characters.")
    __properties: ClassVar[List[str]] = ["abort_incomplete_multipart_uploads_after", "keep_current_version_for", "keep_current_version_until", "bucket", "rule_id", "keep_previous_version_for", "prefix"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of bucket
        if self.bucket and (include_readonly or "bucket" not in excluded_fields):
            _dict['bucket'] = self.bucket.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LifecycleRulePost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LifecycleRulePost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "abort_incomplete_multipart_uploads_after": obj.get("abort_incomplete_multipart_uploads_after"),
            "keep_current_version_for": obj.get("keep_current_version_for"),
            "keep_current_version_until": obj.get("keep_current_version_until"),
            "bucket": ReferenceWritable.from_dict(obj["bucket"]) if obj.get("bucket") is not None else None,
            "rule_id": obj.get("rule_id"),
            "keep_previous_version_for": obj.get("keep_previous_version_for"),
            "prefix": obj.get("prefix")
        })
        return _obj


