# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.3, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class NetworkInterface(BaseModel):
    """
    NetworkInterface
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    address: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address to be associated with the specified network interface.")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the specified network interface is enabled (`true`) or disabled (`false`). If not specified, defaults to `true`.")
    gateway: Optional[StrictStr] = Field(default=None, description="Derived from `subnet.gateway`.")
    mtu: Optional[StrictInt] = Field(default=None, description="Derived from `subnet.mtu`.")
    netmask: Optional[StrictStr] = Field(default=None, description="Derived from `subnet.prefix`.")
    services: Optional[List[StrictStr]] = Field(default=None, description="Services and protocols that are enabled on the interface.")
    subnet: Optional[Dict[str, Any]] = None
    type: Optional[StrictStr] = Field(default=None, description="The only valid value is `vip`.")
    vlan: Optional[StrictInt] = Field(default=None, description="Derived from `subnet.vlan`.")
    __properties: ClassVar[List[str]] = ["name", "id", "address", "enabled", "gateway", "mtu", "netmask", "services", "subnet", "type", "vlan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "enabled",
            "gateway",
            "mtu",
            "netmask",
            "vlan",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NetworkInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NetworkInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "address": obj.get("address"),
            "enabled": obj.get("enabled"),
            "gateway": obj.get("gateway"),
            "mtu": obj.get("mtu"),
            "netmask": obj.get("netmask"),
            "services": obj.get("services"),
            "subnet": obj.get("subnet"),
            "type": obj.get("type"),
            "vlan": obj.get("vlan")
        })
        return _obj


