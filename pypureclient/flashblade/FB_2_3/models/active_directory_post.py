# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.3, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator


class ActiveDirectoryPost(BaseModel):
    """
    ActiveDirectoryPost
    """
    computer_name: Optional[StrictStr] = Field(default=None, description="The common name of the computer account to be created in the Active Directory domain. If not specified, defaults to the name of the Active Directory configuration.")
    directory_servers: Optional[conlist(StrictStr, max_items=5)] = Field(default=None, description="A list of directory servers that will be used for lookups related to user authorization. Accepted server formats are IP address and DNS name. All specified servers must be registered to the domain appropriately in the array's configured DNS and will only be communicated with over the secure LDAP (LDAPS) protocol. If not specified, servers are resolved for the domain in DNS. The specified list can have a maximum length of 5.")
    domain: StrictStr = Field(default=..., description="The Active Directory domain to join.")
    encryption_types: Optional[conlist(StrictStr)] = Field(default=None, description="The encryption types that will be supported for use by clients for Kerberos authentication. Defaults to `aes256-cts-hmac-sha1-96`. Valid values include `aes256-cts-hmac-sha1-96`, `aes128-cts-hmac-sha1-96`, and `arcfour-hmac`. Cannot be provided if using an existing machine account.")
    fqdns: Optional[conlist(StrictStr, max_items=32)] = Field(default=None, description="A list of fully qualified domain names to use to register service principal names for the machine account. If specified, every service principal that is supported by the array will be registered for each fully qualified domain name specified. If neither `fqdns` nor `service_principal_names` is specified, the default `service_principal_names` are constructed using the `computer_name` and `domain` fields. Cannot be provided in combination with `service_principal_names`. Cannot be provided if using an existing machine account.")
    join_ou: Optional[StrictStr] = Field(default=None, description="The relative distinguished name of the organizational unit in which the computer account should be created when joining the domain. Cannot be provided if using an existing machine account. If not specified, defaults to `CN=Computers`.")
    kerberos_servers: Optional[conlist(StrictStr, max_items=5)] = Field(default=None, description="A list of key distribution servers to use for Kerberos protocol. Accepted server formats are IP address and DNS name. All specified servers must be registered to the domain appropriately in the array's configured DNS. If not specified, servers are resolved for the domain in DNS. The specified list can have a maximum length of 5.")
    password: StrictStr = Field(default=..., description="The login password of the user with privileges to create the computer account in the domain. If using an existing computer account, the user must have privileges to read attributes from the computer account and reset the password on that account. This is not persisted on the array.")
    service_principal_names: Optional[conlist(constr(strict=True), max_items=32)] = Field(default=None, description="A list of service principal names to register for the machine account, which can be used for the creation of keys for Kerberos authentication. If neither `service_principal_names` nor `fqdns` is specified, the default `service_principal_names` are constructed using the `computer_name` and `domain` fields. Cannot be provided in combination with `fqdns`. Cannot be provided if using an existing machine account.")
    user: StrictStr = Field(default=..., description="The login name of the user with privileges to create the computer account in the domain. If using an existing computer account, the user must have privileges to read attributes from the computer account and reset the password on that account. This is not persisted on the array.")
    __properties = ["computer_name", "directory_servers", "domain", "encryption_types", "fqdns", "join_ou", "kerberos_servers", "password", "service_principal_names", "user"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> ActiveDirectoryPost:
        """Create an instance of ActiveDirectoryPost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> ActiveDirectoryPost:
        """Create an instance of ActiveDirectoryPost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ActiveDirectoryPost.parse_obj(obj)

        _obj = ActiveDirectoryPost.construct(_fields_set=None, **{
            "computer_name": obj.get("computer_name"),
            "directory_servers": obj.get("directory_servers"),
            "domain": obj.get("domain"),
            "encryption_types": obj.get("encryption_types"),
            "fqdns": obj.get("fqdns"),
            "join_ou": obj.get("join_ou"),
            "kerberos_servers": obj.get("kerberos_servers"),
            "password": obj.get("password"),
            "service_principal_names": obj.get("service_principal_names"),
            "user": obj.get("user")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

