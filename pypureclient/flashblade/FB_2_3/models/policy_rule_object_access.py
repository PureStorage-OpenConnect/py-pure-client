# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.3, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.3
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_3.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_3.models.policy_rule_object_access_condition import PolicyRuleObjectAccessCondition
from typing import Optional, Set
from typing_extensions import Self

class PolicyRuleObjectAccess(BaseModel):
    """
    PolicyRuleObjectAccess
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    actions: Optional[List[StrictStr]] = Field(default=None, description="The list of actions granted by this rule. Each included action may restrict other properties of the rule. Supported actions are returned by the `/object-store-access-policy-actions` endpoint.")
    conditions: Optional[PolicyRuleObjectAccessCondition] = Field(default=None, description="Conditions used to limit the scope which this rule applies to.")
    effect: Optional[StrictStr] = Field(default=None, description="Effect of this rule. When `allow`, the rule allows the given actions to be performed on the given resources, subject to the given conditions. Valid values include `allow`.")
    policy: Optional[FixedReference] = Field(default=None, description="The policy to which this rule belongs.")
    resources: Optional[List[StrictStr]] = Field(default=None, description="The list of resources which this rule applies to. Each resource can include a bucket component, optionally followed by an object component. The choice of which components a resource can include is dictated by which actions are included in the rule. For further details, see the Object Store Access Policy Actions section of the User Guide.")
    __properties: ClassVar[List[str]] = ["name", "actions", "conditions", "effect", "policy", "resources"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "effect",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of conditions
        if self.conditions and (include_readonly or "conditions" not in excluded_fields):
            _dict['conditions'] = self.conditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy and (include_readonly or "policy" not in excluded_fields):
            _dict['policy'] = self.policy.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyRuleObjectAccess from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyRuleObjectAccess from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "actions": obj.get("actions"),
            "conditions": PolicyRuleObjectAccessCondition.from_dict(obj["conditions"]) if obj.get("conditions") is not None else None,
            "effect": obj.get("effect"),
            "policy": FixedReference.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "resources": obj.get("resources")
        })
        return _obj


