# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.13, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_13.models.fixed_reference_name_only import FixedReferenceNameOnly
from pypureclient.flashblade.FB_2_13.models.user_no_id import UserNoId
from typing import Optional, Set
from typing_extensions import Self

class FileSession(BaseModel):
    """
    FileSession
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    authentication: Optional[StrictStr] = Field(default=None, description="Describes how was the user authenticated. Valid values include `KRB` and `NTLMv2`.")
    client: Optional[FixedReferenceNameOnly] = Field(default=None, description="Client that holds the session.")
    connection_time: Optional[StrictInt] = Field(default=None, description="Connection time in milliseconds since UNIX epoch.")
    idle_time: Optional[StrictInt] = Field(default=None, description="Duration in milliseconds that indicates how long the session has been idle.")
    opens: Optional[StrictInt] = Field(default=None, description="Number of opens for the given session.")
    protocol: Optional[StrictStr] = Field(default=None, description="The protocol utilized for obtaining and managing the session. Valid values include `nfs` and `smb`.")
    port: Optional[StrictInt] = Field(default=None, description="Port number the client is connected from.")
    time: Optional[StrictInt] = Field(default=None, description="Current time in milliseconds since UNIX epoch.")
    user: Optional[UserNoId] = Field(default=None, description="The user who has created the session.")
    __properties: ClassVar[List[str]] = ["name", "authentication", "client", "connection_time", "idle_time", "opens", "protocol", "port", "time", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "authentication",
            "protocol",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client and (include_readonly or "client" not in excluded_fields):
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of user
        if self.user and (include_readonly or "user" not in excluded_fields):
            _dict['user'] = self.user.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSession from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSession from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "authentication": obj.get("authentication"),
            "client": FixedReferenceNameOnly.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "connection_time": obj.get("connection_time"),
            "idle_time": obj.get("idle_time"),
            "opens": obj.get("opens"),
            "protocol": obj.get("protocol"),
            "port": obj.get("port"),
            "time": obj.get("time"),
            "user": UserNoId.from_dict(obj["user"]) if obj.get("user") is not None else None
        })
        return _obj


