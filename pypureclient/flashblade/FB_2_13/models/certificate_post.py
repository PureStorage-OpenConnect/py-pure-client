# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.13, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class CertificatePost(BaseModel):
    """
    CertificatePost
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    certificate: Optional[StrictStr] = Field(default=None, description="The text of the certificate.")
    certificate_type: Optional[StrictStr] = Field(default=None, description="The type of certificate. Possible values are `appliance` and `external`. Certificates of type `appliance` are used by the array to verify its identity to clients. Certificates of type `external` are used by the array to identify external servers to which it is configured to communicate.")
    common_name: Optional[StrictStr] = Field(default=None, description="FQDN or management IP address of the current array.")
    country: Optional[StrictStr] = Field(default=None, description="The country field listed in the certificate.")
    email: Optional[StrictStr] = Field(default=None, description="The email field listed in the certificate.")
    intermediate_certificate: Optional[StrictStr] = Field(default=None, description="Intermediate certificate chains.")
    issued_by: Optional[StrictStr] = Field(default=None, description="Who issued this certificate.")
    issued_to: Optional[StrictStr] = Field(default=None, description="Who this certificate was issued to.")
    key_size: Optional[StrictInt] = Field(default=None, description="The size of the private key for this certificate in bits.")
    locality: Optional[StrictStr] = Field(default=None, description="The locality field listed in the certificate.")
    organization: Optional[StrictStr] = Field(default=None, description="The organization field listed in the certificate.")
    organizational_unit: Optional[StrictStr] = Field(default=None, description="The organizational unit field listed in the certificate.")
    state: Optional[StrictStr] = Field(default=None, description="The state/province field listed in the certificate.")
    status: Optional[StrictStr] = Field(default=None, description="The type of certificate. Valid values are `self-signed` and `imported`.")
    valid_from: Optional[StrictStr] = Field(default=None, description="The start date of when this certificate is valid.")
    valid_to: Optional[StrictStr] = Field(default=None, description="The end date of when this certificate is valid.")
    __properties: ClassVar[List[str]] = ["name", "certificate", "certificate_type", "common_name", "country", "email", "intermediate_certificate", "issued_by", "issued_to", "key_size", "locality", "organization", "organizational_unit", "state", "status", "valid_from", "valid_to"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "common_name",
            "country",
            "email",
            "issued_by",
            "issued_to",
            "key_size",
            "locality",
            "organization",
            "organizational_unit",
            "state",
            "status",
            "valid_from",
            "valid_to",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CertificatePost from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CertificatePost from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "certificate": obj.get("certificate"),
            "certificate_type": obj.get("certificate_type"),
            "common_name": obj.get("common_name"),
            "country": obj.get("country"),
            "email": obj.get("email"),
            "intermediate_certificate": obj.get("intermediate_certificate"),
            "issued_by": obj.get("issued_by"),
            "issued_to": obj.get("issued_to"),
            "key_size": obj.get("key_size"),
            "locality": obj.get("locality"),
            "organization": obj.get("organization"),
            "organizational_unit": obj.get("organizational_unit"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "valid_from": obj.get("valid_from"),
            "valid_to": obj.get("valid_to")
        })
        return _obj


