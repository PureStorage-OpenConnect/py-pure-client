# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.13, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    OpenAPI spec version: 2.13
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re

import six
import typing

from ....properties import Property
if typing.TYPE_CHECKING:
    from pypureclient.flashblade.FB_2_13 import models

class BucketEradicationConfig(object):
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'eradication_delay': 'int',
        'manual_eradication': 'str',
        'eradication_mode': 'str'
    }

    attribute_map = {
        'eradication_delay': 'eradication_delay',
        'manual_eradication': 'manual_eradication',
        'eradication_mode': 'eradication_mode'
    }

    required_args = {
    }

    def __init__(
        self,
        eradication_delay=None,  # type: int
        manual_eradication=None,  # type: str
        eradication_mode=None,  # type: str
    ):
        """
        Keyword args:
            eradication_delay (int): Minimum eradication delay in milliseconds. Automatically eradicate destroyed buckets after the delay time passes unless automatic eradication is delayed due to other configuration values.
            manual_eradication (str): The manual eradication status of the bucket. If `disabled`, the bucket cannot be eradicated after it has been destroyed, unless it is empty. If `enabled`, the bucket can be eradicated. Valid values are `disabled` and `enabled`.
            eradication_mode (str): The eradication mode of the bucket. If it's `permission-based` the bucket can be eradicated based on user permissions. If it's `retention-based` the bucket can never be eradicated as long as there are locked objects still being retained. Valid values are `permission-based` and `retention-based`.
        """
        if eradication_delay is not None:
            self.eradication_delay = eradication_delay
        if manual_eradication is not None:
            self.manual_eradication = manual_eradication
        if eradication_mode is not None:
            self.eradication_mode = eradication_mode

    def __setattr__(self, key, value):
        if key not in self.attribute_map:
            raise KeyError("Invalid key `{}` for `BucketEradicationConfig`".format(key))
        self.__dict__[key] = value

    def __getattribute__(self, item):
        value = object.__getattribute__(self, item)
        if isinstance(value, Property):
            return None
        else:
            return value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            if hasattr(self, attr):
                value = getattr(self, attr)
                if isinstance(value, list):
                    result[attr] = list(map(
                        lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                        value
                    ))
                elif hasattr(value, "to_dict"):
                    result[attr] = value.to_dict()
                elif isinstance(value, dict):
                    result[attr] = dict(map(
                        lambda item: (item[0], item[1].to_dict())
                        if hasattr(item[1], "to_dict") else item,
                        value.items()
                    ))
                else:
                    result[attr] = value
        if issubclass(BucketEradicationConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BucketEradicationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
