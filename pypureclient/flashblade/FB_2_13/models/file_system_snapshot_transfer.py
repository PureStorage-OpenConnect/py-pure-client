# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.13, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.13
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pypureclient.flashblade.FB_2_13.models.fixed_reference_no_resource_type import FixedReferenceNoResourceType
from typing import Optional, Set
from typing_extensions import Self

class FileSystemSnapshotTransfer(BaseModel):
    """
    FileSystemSnapshotTransfer
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    completed: Optional[StrictInt] = Field(default=None, description="A timestamp at which the replication of the snapshot completed.")
    data_transferred: Optional[StrictInt] = Field(default=None, description="The amount of data transferred to the target, in bytes.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values are `inbound` and `outbound`.")
    progress: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="A percentage that indicates how much progress has been made on the transfer.")
    remote: Optional[FixedReferenceNoResourceType] = Field(default=None, description="The array where the remote file system snapshot is located.")
    remote_snapshot: Optional[FixedReferenceNoResourceType] = Field(default=None, description="A reference to the associated remote file system snapshot.")
    started: Optional[StrictInt] = Field(default=None, description="A timestamp at which the replication of the snapshot started.")
    status: Optional[StrictStr] = Field(default=None, description="The status of current replication. Valid values are `completed`, `in-progress`, and `queued`.")
    local_snapshot: Optional[FixedReferenceNoResourceType] = Field(default=None, description="A reference to the associated local file system snapshot.")
    __properties: ClassVar[List[str]] = ["name", "id", "completed", "data_transferred", "direction", "progress", "remote", "remote_snapshot", "started", "status", "local_snapshot"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "completed",
            "data_transferred",
            "progress",
            "started",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote and (include_readonly or "remote" not in excluded_fields):
            _dict['remote'] = self.remote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_snapshot
        if self.remote_snapshot and (include_readonly or "remote_snapshot" not in excluded_fields):
            _dict['remote_snapshot'] = self.remote_snapshot.to_dict()
        # override the default output from pydantic by calling `to_dict()` of local_snapshot
        if self.local_snapshot and (include_readonly or "local_snapshot" not in excluded_fields):
            _dict['local_snapshot'] = self.local_snapshot.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSystemSnapshotTransfer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSystemSnapshotTransfer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "completed": obj.get("completed"),
            "data_transferred": obj.get("data_transferred"),
            "direction": obj.get("direction"),
            "progress": obj.get("progress"),
            "remote": FixedReferenceNoResourceType.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "remote_snapshot": FixedReferenceNoResourceType.from_dict(obj["remote_snapshot"]) if obj.get("remote_snapshot") is not None else None,
            "started": obj.get("started"),
            "status": obj.get("status"),
            "local_snapshot": FixedReferenceNoResourceType.from_dict(obj["local_snapshot"]) if obj.get("local_snapshot") is not None else None
        })
        return _obj


