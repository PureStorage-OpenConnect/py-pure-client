# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.15, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from pypureclient.flashblade.FB_2_15.models.file_info import FileInfo
from pypureclient.flashblade.FB_2_15.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class LogsAsync(BaseModel):
    """
    LogsAsync
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    start_time: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="When the time window starts (in milliseconds since epoch). start_time and end_time determine the number of hours for which the logs are prepared for. At most 6 hours of logs can be prepared in one request. start_time and end_time are truncated to hour boundaries.")
    end_time: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="When the time window ends (in milliseconds since epoch). start_time and end_time determine the number of hours for which the logs are prepared for. At most 6 hours of logs can be prepared in one request. start_time and end_time are truncated to hour boundaries.")
    last_request_time: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The last time log preparation was requested (in milliseconds since epoch).")
    processing: Optional[StrictBool] = Field(default=None, description="Returns a value of `true` if the logs are being prepared.")
    progress: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="A representation of log preparation progress. Ranges from 0 to 1.0.")
    hardware_components: Optional[List[FixedReference]] = Field(default=None, description="All of the hardware components for which logs are being processed.")
    available_files: Optional[List[FileInfo]] = Field(default=None, description="All of the available files ready for download.")
    __properties: ClassVar[List[str]] = ["name", "id", "start_time", "end_time", "last_request_time", "processing", "progress", "hardware_components", "available_files"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "last_request_time",
            "processing",
            "progress",
            "available_files",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in hardware_components (list)
        if self.hardware_components and (include_readonly or "hardware_components" not in excluded_fields):
            _items = []
            for _item_hardware_components in self.hardware_components:
                if _item_hardware_components:
                    _items.append(_item_hardware_components.to_dict())
            _dict['hardware_components'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in available_files (list)
        if self.available_files and (include_readonly or "available_files" not in excluded_fields):
            _items = []
            for _item_available_files in self.available_files:
                if _item_available_files:
                    _items.append(_item_available_files.to_dict())
            _dict['available_files'] = _items
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LogsAsync from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LogsAsync from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "last_request_time": obj.get("last_request_time"),
            "processing": obj.get("processing"),
            "progress": obj.get("progress"),
            "hardware_components": [FixedReference.from_dict(_item) for _item in obj["hardware_components"]] if obj.get("hardware_components") is not None else None,
            "available_files": [FileInfo.from_dict(_item) for _item in obj["available_files"]] if obj.get("available_files") is not None else None
        })
        return _obj


