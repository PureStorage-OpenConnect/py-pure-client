# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.15, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_15.models.array_encryption import ArrayEncryption
from pypureclient.flashblade.FB_2_15.models.array_eradication_config import ArrayEradicationConfig
from pypureclient.flashblade.FB_2_15.models.fixed_reference import FixedReference
from typing import Optional, Set
from typing_extensions import Self

class Array(BaseModel):
    """
    Array
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="A name chosen by the user. Can be changed. Must be locally unique.")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    as_of: Optional[StrictInt] = Field(default=None, description="Array time in milliseconds since UNIX epoch.", alias="_as_of")
    banner: Optional[StrictStr] = Field(default=None, description="A string to be shown when logging in to the array.")
    idle_timeout: Optional[StrictInt] = Field(default=None, description="Idle timeout in milliseconds. Valid values are in the range of 300000 and 10800000. Setting this value to 0 disables timeouts.")
    ntp_servers: Optional[List[StrictStr]] = None
    os: Optional[StrictStr] = Field(default=None, description="Valid values are `Purity//FA` and `Purity//FB`.")
    revision: Optional[StrictStr] = None
    time_zone: Optional[StrictStr] = Field(default=None, description="The time zone to use for the array. In particular this affects the CLI formatting and the default snapshot policy time zone.")
    version: Optional[StrictStr] = None
    smb_mode: Optional[StrictStr] = Field(default=None, description="The current SMB mode of the array. This controls the type of authentication that is used by the array for SMB. Possible values include `ad-auto`, `ad-rfc2307`, `guest`, and `native`. Modifying this value requires the assistance of Pure Storage Support.")
    eradication_config: Optional[ArrayEradicationConfig] = None
    product_type: Optional[StrictStr] = Field(default=None, description="For `FlashBlade//S` arrays, the value is determined by the blades in the system. The value will be `FlashBlade` for all older arrays. Valid values are `FlashBlade`, `FlashBlade//S`, `FlashBlade//S200`, and `FlashBladeS500`.")
    security_update: Optional[StrictStr] = Field(default=None, description="The name of the installed security update that currently applies to the system. This field will be `null` if either no security update has been installed, or if the most recently installed security update is no longer needed by the current FlashBlade software due to the current software fully incorporating the update.")
    encryption: Optional[ArrayEncryption] = None
    network_access_policy: Optional[FixedReference] = Field(default=None, description="The network access policy governing which clients are allowed or denied access to different array interfaces.")
    __properties: ClassVar[List[str]] = ["name", "id", "_as_of", "banner", "idle_timeout", "ntp_servers", "os", "revision", "time_zone", "version", "smb_mode", "eradication_config", "product_type", "security_update", "encryption", "network_access_policy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "as_of",
            "os",
            "revision",
            "version",
            "smb_mode",
            "product_type",
            "security_update",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of eradication_config
        if self.eradication_config and (include_readonly or "eradication_config" not in excluded_fields):
            _dict['eradication_config'] = self.eradication_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of encryption
        if self.encryption and (include_readonly or "encryption" not in excluded_fields):
            _dict['encryption'] = self.encryption.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_access_policy
        if self.network_access_policy and (include_readonly or "network_access_policy" not in excluded_fields):
            _dict['network_access_policy'] = self.network_access_policy.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Array from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Array from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "as_of": obj.get("_as_of"),
            "banner": obj.get("banner"),
            "idle_timeout": obj.get("idle_timeout"),
            "ntp_servers": obj.get("ntp_servers"),
            "os": obj.get("os"),
            "revision": obj.get("revision"),
            "time_zone": obj.get("time_zone"),
            "version": obj.get("version"),
            "smb_mode": obj.get("smb_mode"),
            "eradication_config": ArrayEradicationConfig.from_dict(obj["eradication_config"]) if obj.get("eradication_config") is not None else None,
            "product_type": obj.get("product_type"),
            "security_update": obj.get("security_update"),
            "encryption": ArrayEncryption.from_dict(obj["encryption"]) if obj.get("encryption") is not None else None,
            "network_access_policy": FixedReference.from_dict(obj["network_access_policy"]) if obj.get("network_access_policy") is not None else None
        })
        return _obj


