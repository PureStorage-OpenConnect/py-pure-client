# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.15, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.15
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from pypureclient.flashblade.FB_2_15.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_15.models.reference import Reference
from typing import Optional, Set
from typing_extensions import Self

class Subnet(BaseModel):
    """
    Subnet
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates if subnet is enabled (`true`) or disabled (`false`). If not specified, defaults to `true`.")
    gateway: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address of the gateway through which the specified subnet is to communicate with the network.")
    interfaces: Optional[List[FixedReference]] = Field(default=None, description="List of network interfaces associated with this subnet.")
    link_aggregation_group: Optional[Reference] = Field(default=None, description="Reference to the associated LAG.")
    mtu: Optional[Annotated[int, Field(le=9216, strict=True, ge=1280)]] = Field(default=None, description="Maximum message transfer unit (packet) size for the subnet in bytes. MTU setting cannot exceed the MTU of the corresponding physical interface. If not specified, defaults to `1500`.")
    prefix: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address to be associated with the specified subnet.")
    services: Optional[List[StrictStr]] = Field(default=None, description="The services provided by this subnet, as inherited from all of its interfaces.")
    vlan: Optional[StrictInt] = Field(default=None, description="VLAN ID.")
    __properties: ClassVar[List[str]] = ["name", "id", "enabled", "gateway", "interfaces", "link_aggregation_group", "mtu", "prefix", "services", "vlan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "enabled",
            "interfaces",
            "services",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in interfaces (list)
        if self.interfaces and (include_readonly or "interfaces" not in excluded_fields):
            _items = []
            for _item_interfaces in self.interfaces:
                if _item_interfaces:
                    _items.append(_item_interfaces.to_dict())
            _dict['interfaces'] = _items
        # override the default output from pydantic by calling `to_dict()` of link_aggregation_group
        if self.link_aggregation_group and (include_readonly or "link_aggregation_group" not in excluded_fields):
            _dict['link_aggregation_group'] = self.link_aggregation_group.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Subnet from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Subnet from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "enabled": obj.get("enabled"),
            "gateway": obj.get("gateway"),
            "interfaces": [FixedReference.from_dict(_item) for _item in obj["interfaces"]] if obj.get("interfaces") is not None else None,
            "link_aggregation_group": Reference.from_dict(obj["link_aggregation_group"]) if obj.get("link_aggregation_group") is not None else None,
            "mtu": obj.get("mtu"),
            "prefix": obj.get("prefix"),
            "services": obj.get("services"),
            "vlan": obj.get("vlan")
        })
        return _obj


