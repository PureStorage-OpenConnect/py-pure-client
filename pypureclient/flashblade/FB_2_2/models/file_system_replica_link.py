# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.2, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist
from pypureclient.flashblade.FB_2_2.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_2.models.fixed_reference_no_resource_type import FixedReferenceNoResourceType
from pypureclient.flashblade.FB_2_2.models.location_reference import LocationReference


class FileSystemReplicaLink(BaseModel):
    """
    FileSystemReplicaLink
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values are `inbound` and `outbound`.")
    lag: Optional[StrictInt] = Field(default=None, description="Duration in milliseconds that represents how far behind the replication target is from the source. This is the time difference between current time and `recovery_point`.")
    status_details: Optional[StrictStr] = Field(default=None, description="Detailed information about the status of the replica link when it is unhealthy.")
    local_file_system: Optional[FixedReference] = Field(default=None, description="Reference to a local file system.")
    policies: Optional[conlist(LocationReference)] = None
    recovery_point: Optional[StrictInt] = Field(default=None, description="Time when the last replicated snapshot was created, in milliseconds since UNIX epoch. I.e. the recovery point if the file system is promoted.")
    remote: Optional[FixedReferenceNoResourceType] = Field(default=None, description="Reference to a remote array.")
    remote_file_system: Optional[FixedReferenceNoResourceType] = Field(default=None, description="Reference to a remote file system.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the replica link. Values include `replicating`, `idle`, and `unhealthy`.")
    __properties = ["id", "direction", "lag", "status_details", "local_file_system", "policies", "recovery_point", "remote", "remote_file_system", "status"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "direction",
                "lag",
                "status_details",
                "recovery_point",
                "status",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of local_file_system
        if _include_in_dict('local_file_system', include_readonly, excluded_fields, none_fields):
            _dict['local_file_system'] = self.local_file_system.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        if _include_in_dict('policies', include_readonly, excluded_fields, none_fields):
            _items = []
            for _item in self.policies:
                if _item:
                    _items.append(_item.to_dict(include_readonly=include_readonly))
            _dict['policies'] = _items
        # override the default output from pydantic by calling `to_dict()` of remote
        if _include_in_dict('remote', include_readonly, excluded_fields, none_fields):
            _dict['remote'] = self.remote.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of remote_file_system
        if _include_in_dict('remote_file_system', include_readonly, excluded_fields, none_fields):
            _dict['remote_file_system'] = self.remote_file_system.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> FileSystemReplicaLink:
        """Create an instance of FileSystemReplicaLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> FileSystemReplicaLink:
        """Create an instance of FileSystemReplicaLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FileSystemReplicaLink.parse_obj(obj)

        _obj = FileSystemReplicaLink.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "direction": obj.get("direction"),
            "lag": obj.get("lag"),
            "status_details": obj.get("status_details"),
            "local_file_system": FixedReference.from_dict(obj.get("local_file_system")) if obj.get("local_file_system") is not None else None,
            "policies": [LocationReference.from_dict(_item) for _item in obj.get("policies")] if obj.get("policies") is not None else None,
            "recovery_point": obj.get("recovery_point"),
            "remote": FixedReferenceNoResourceType.from_dict(obj.get("remote")) if obj.get("remote") is not None else None,
            "remote_file_system": FixedReferenceNoResourceType.from_dict(obj.get("remote_file_system")) if obj.get("remote_file_system") is not None else None,
            "status": obj.get("status")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

