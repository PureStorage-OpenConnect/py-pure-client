# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.2, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr


class NfsPatch(BaseModel):
    """
    NfsPatch
    """
    rules: Optional[StrictStr] = Field(default=None, description="The NFS export rules for the system. Rules can be applied to an individual client or a range of clients specified by IP address (`ip_address(options)`), netmask (`ip_address/length(options)`), or netgroup (`@groupname(options)`). Possible export options include `rw`, `ro`, `fileid_32bit`,  `no_fileid_32bit`, `anonuid`, `anongid`, `root_squash`, `no_root_squash`, `all_squash`, `no_all_squash`,  `secure`, `insecure`, `atime`, `noatime`, and `sec`. If not specified, defaults to `*(rw,no_root_squash)`.")
    v3_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, the NFSv3 protocol will be enabled.")
    v4_1_enabled: Optional[StrictBool] = Field(default=None, description="If set to `true`, the NFSv4.1 protocol will be enabled.")
    add_rules: Optional[StrictStr] = Field(default=None, description="The rules which will be added to the existing NFS export rules for the file system.")
    after: Optional[StrictStr] = Field(default=None, description="The `after` field can be used with `add_rules` or `remove_rules` or both. If used with `add_rules`, then the `add_rules` string will be inserted after the first occurrence of the `after` string. If used with `remove_rules`, then remove the first occurrence of `remove_rules` after the first occurrence of the `after` string. The `remove_rules` will be processed before the `add_rules`.")
    remove_rules: Optional[StrictStr] = Field(default=None, description="The rules which will be removed from the existing NFS export rules for the file system. Only the first occurrence of the `remove_rules` will be removed.")
    __properties = ["rules", "v3_enabled", "v4_1_enabled", "add_rules", "after", "remove_rules"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> NfsPatch:
        """Create an instance of NfsPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> NfsPatch:
        """Create an instance of NfsPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NfsPatch.parse_obj(obj)

        _obj = NfsPatch.construct(_fields_set=None, **{
            "rules": obj.get("rules"),
            "v3_enabled": obj.get("v3_enabled"),
            "v4_1_enabled": obj.get("v4_1_enabled"),
            "add_rules": obj.get("add_rules"),
            "after": obj.get("after"),
            "remove_rules": obj.get("remove_rules")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

