# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.2, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist


class NetworkInterface(BaseModel):
    """
    NetworkInterface
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    address: Optional[StrictStr] = Field(default=None, description="The IPv4 or IPv6 address to be associated with the specified network interface.")
    enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the specified network interface is enabled (`true`) or disabled (`false`). If not specified, defaults to `true`.")
    gateway: Optional[StrictStr] = Field(default=None, description="Derived from `subnet.gateway`.")
    mtu: Optional[StrictInt] = Field(default=None, description="Derived from `subnet.mtu`.")
    netmask: Optional[StrictStr] = Field(default=None, description="Derived from `subnet.prefix`.")
    services: Optional[conlist(StrictStr)] = Field(default=None, description="Services and protocols that are enabled on the interface.")
    subnet: Optional[Dict[str, Any]] = None
    type: Optional[StrictStr] = Field(default=None, description="The only valid value is `vip`.")
    vlan: Optional[StrictInt] = Field(default=None, description="Derived from `subnet.vlan`.")
    __properties = ["id", "name", "address", "enabled", "gateway", "mtu", "netmask", "services", "subnet", "type", "vlan"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "enabled",
                "gateway",
                "mtu",
                "netmask",
                "vlan",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> NetworkInterface:
        """Create an instance of NetworkInterface from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> NetworkInterface:
        """Create an instance of NetworkInterface from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NetworkInterface.parse_obj(obj)

        _obj = NetworkInterface.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "address": obj.get("address"),
            "enabled": obj.get("enabled"),
            "gateway": obj.get("gateway"),
            "mtu": obj.get("mtu"),
            "netmask": obj.get("netmask"),
            "services": obj.get("services"),
            "subnet": obj.get("subnet"),
            "type": obj.get("type"),
            "vlan": obj.get("vlan")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

