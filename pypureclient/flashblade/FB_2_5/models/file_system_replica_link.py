# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.5, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_5.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_5.models.fixed_reference_no_resource_type import FixedReferenceNoResourceType
from pypureclient.flashblade.FB_2_5.models.locationreference import Locationreference
from typing import Optional, Set
from typing_extensions import Self

class FileSystemReplicaLink(BaseModel):
    """
    FileSystemReplicaLink
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    direction: Optional[StrictStr] = Field(default=None, description="The direction of replication. Valid values are `inbound` and `outbound`.")
    lag: Optional[StrictInt] = Field(default=None, description="Duration in milliseconds that represents how far behind the replication target is from the source. This is the time difference between current time and `recovery_point`.")
    status_details: Optional[StrictStr] = Field(default=None, description="Detailed information about the status of the replica link when it is unhealthy.")
    local_file_system: Optional[FixedReference] = Field(default=None, description="Reference to a local file system.")
    policies: Optional[List[Locationreference]] = None
    recovery_point: Optional[StrictInt] = Field(default=None, description="Time when the last replicated snapshot was created, in milliseconds since UNIX epoch. I.e. the recovery point if the file system is promoted.")
    remote: Optional[FixedReferenceNoResourceType] = Field(default=None, description="Reference to a remote array.")
    remote_file_system: Optional[FixedReferenceNoResourceType] = Field(default=None, description="Reference to a remote file system.")
    status: Optional[StrictStr] = Field(default=None, description="Status of the replica link. Values include `replicating`, `idle`, and `unhealthy`.")
    __properties: ClassVar[List[str]] = ["id", "direction", "lag", "status_details", "local_file_system", "policies", "recovery_point", "remote", "remote_file_system", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "id",
            "lag",
            "status_details",
            "recovery_point",
            "status",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_file_system
        if self.local_file_system and (include_readonly or "local_file_system" not in excluded_fields):
            _dict['local_file_system'] = self.local_file_system.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in policies (list)
        if self.policies and (include_readonly or "policies" not in excluded_fields):
            _items = []
            for _item_policies in self.policies:
                if _item_policies:
                    _items.append(_item_policies.to_dict())
            _dict['policies'] = _items
        # override the default output from pydantic by calling `to_dict()` of remote
        if self.remote and (include_readonly or "remote" not in excluded_fields):
            _dict['remote'] = self.remote.to_dict()
        # override the default output from pydantic by calling `to_dict()` of remote_file_system
        if self.remote_file_system and (include_readonly or "remote_file_system" not in excluded_fields):
            _dict['remote_file_system'] = self.remote_file_system.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileSystemReplicaLink from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileSystemReplicaLink from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "id": obj.get("id"),
            "direction": obj.get("direction"),
            "lag": obj.get("lag"),
            "status_details": obj.get("status_details"),
            "local_file_system": FixedReference.from_dict(obj["local_file_system"]) if obj.get("local_file_system") is not None else None,
            "policies": [Locationreference.from_dict(_item) for _item in obj["policies"]] if obj.get("policies") is not None else None,
            "recovery_point": obj.get("recovery_point"),
            "remote": FixedReferenceNoResourceType.from_dict(obj["remote"]) if obj.get("remote") is not None else None,
            "remote_file_system": FixedReferenceNoResourceType.from_dict(obj["remote_file_system"]) if obj.get("remote_file_system") is not None else None,
            "status": obj.get("status")
        })
        return _obj


