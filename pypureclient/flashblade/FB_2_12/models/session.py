# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.12, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class Session(BaseModel):
    """
    Session
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    end_time: Optional[StrictInt] = Field(default=None, description="Date and time the user logged out of the Purity//FB interface in milliseconds since UNIX epoch. Set to 0 if the session is still active.")
    event: Optional[StrictStr] = Field(default=None, description="Description of session events. Valid values include `failed authentication`, `user session`, `login`, `logout`, `API token obtained`, and `request without session`.")
    event_count: Optional[StrictInt] = Field(default=None, description="Number of session events.")
    location: Optional[StrictStr] = Field(default=None, description="IP address of the user client connecting to the array or console if connected through local console.")
    method: Optional[StrictStr] = Field(default=None, description="Method by which the user attempted to log in. Valid values include `API token`, `password`, and `public key`.")
    start_time: Optional[StrictInt] = Field(default=None, description="Date and time the user logged in to the Purity//FB interface in milliseconds since UNIX epoch.")
    user: Optional[StrictStr] = Field(default=None, description="Username of the Purity//FB user who triggered the user session event.")
    user_interface: Optional[StrictStr] = Field(default=None, description="The user interface through which the user session event was performed. Valid values include `CLI`, `GUI`, and `REST`.")
    __properties: ClassVar[List[str]] = ["name", "id", "end_time", "event", "event_count", "location", "method", "start_time", "user", "user_interface"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
            "end_time",
            "event",
            "event_count",
            "location",
            "method",
            "start_time",
            "user",
            "user_interface",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Session from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Session from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "end_time": obj.get("end_time"),
            "event": obj.get("event"),
            "event_count": obj.get("event_count"),
            "location": obj.get("location"),
            "method": obj.get("method"),
            "start_time": obj.get("start_time"),
            "user": obj.get("user"),
            "user_interface": obj.get("user_interface")
        })
        return _obj


