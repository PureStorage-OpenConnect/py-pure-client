# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.12, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, confloat, conint


class Space(BaseModel):
    """
    Space
    """
    available_provisioned: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The amount of space left that the current object can grow before writes are stopped due to a hard limit quota being hit. This is total_provisioned minus the virtual space used for file-systems and buckets. For array and object store accounts it is total_provisioned minus the virtual space used by non-destroyed file-systems and buckets.")
    available_ratio: Optional[Union[confloat(le=1, ge=0, strict=True), conint(le=1, ge=0, strict=True)]] = Field(default=None, description="The ratio of the available space versus the total provisioned space.")
    data_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Reduction of data.")
    destroyed: Optional[StrictInt] = Field(default=None, description="Unique physical space (excluding snapshots) occupied by destroyed data within the child containers, in bytes. For buckets and filesystems, the destroyed space will be 0 as they cannot have child containers. For the whole array, the space will be the sum of all destroyed buckets and filesystems.")
    destroyed_virtual: Optional[StrictInt] = Field(default=None, description="The amount of destroyed logically written data within the child containers, in bytes. For buckets and filesystems, the destroyed virtual space will be 0 as they cannot have child containers. For the whole array, the space will be the sum of all destroyed buckets and filesystems.")
    snapshots: Optional[StrictInt] = Field(default=None, description="Physical usage by snapshots, other than unique in bytes.")
    total_physical: Optional[StrictInt] = Field(default=None, description="Total physical usage (including snapshots) in bytes.")
    total_provisioned: Optional[conint(strict=True, ge=0)] = Field(default=None, description="The effective provisioned size of the container, at which a hard limit will be applied. For a bucket with a `quota_limit` value and `hard_limit_enabled` set to `true`, this is its `quota_limit` value, unless the available space of the associated object store account, as defined by its `quota_limit` value, would prevent the bucket from reaching its own `quota_limit` value. In such a case, `total_provisioned` will reflect the smaller value. For a file system with a `provisioned` value and `hard_limit_enabled` set to `true`, this is the `provisioned` value of the file system. For an object store account with a `quota_limit` value and `hard_limit_enabled` set to `true`, this is the `quota_limit` value of the object store account. For the array, this is the sum of the file systems and accounts. Measured in bytes.")
    unique: Optional[StrictInt] = Field(default=None, description="Unique physical space occupied by customer data, in bytes. Excludes snapshots, destroyed.")
    virtual: Optional[StrictInt] = Field(default=None, description="The amount of logically written data, in bytes. Excludes destroyed data.")
    __properties = ["available_provisioned", "available_ratio", "data_reduction", "destroyed", "destroyed_virtual", "snapshots", "total_physical", "total_provisioned", "unique", "virtual"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "data_reduction",
                "destroyed",
                "destroyed_virtual",
                "snapshots",
                "total_physical",
                "unique",
                "virtual",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> Space:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> Space:
        """Create an instance of Space from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Space.parse_obj(obj)

        _obj = Space.construct(_fields_set=None, **{
            "available_provisioned": obj.get("available_provisioned"),
            "available_ratio": obj.get("available_ratio"),
            "data_reduction": obj.get("data_reduction"),
            "destroyed": obj.get("destroyed"),
            "destroyed_virtual": obj.get("destroyed_virtual"),
            "snapshots": obj.get("snapshots"),
            "total_physical": obj.get("total_physical"),
            "total_provisioned": obj.get("total_provisioned"),
            "unique": obj.get("unique"),
            "virtual": obj.get("virtual")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

