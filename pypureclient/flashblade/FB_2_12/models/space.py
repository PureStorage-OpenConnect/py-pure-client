# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.12, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Space(BaseModel):
    """
    Space
    """ # noqa: E501
    data_reduction: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Reduction of data.")
    snapshots: Optional[StrictInt] = Field(default=None, description="Physical usage by snapshots, other than unique in bytes.")
    total_physical: Optional[StrictInt] = Field(default=None, description="Total physical usage (including snapshots) in bytes.")
    unique: Optional[StrictInt] = Field(default=None, description="Unique physical space occupied by customer data, in bytes. Excludes snapshots, destroyed.")
    virtual: Optional[StrictInt] = Field(default=None, description="The amount of logically written data, in bytes. Excludes destroyed data.")
    total_provisioned: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The effective provisioned size of the container, at which a hard limit will be applied. For a bucket with a `quota_limit` value and `hard_limit_enabled` set to `true`, this is its `quota_limit` value, unless the available space of the associated object store account, as defined by its `quota_limit` value, would prevent the bucket from reaching its own `quota_limit` value. In such a case, `total_provisioned` will reflect the smaller value. For a file system with a `provisioned` value and `hard_limit_enabled` set to `true`, this is the `provisioned` value of the file system. For an object store account with a `quota_limit` value and `hard_limit_enabled` set to `true`, this is the `quota_limit` value of the object store account. For the array, this is the sum of the file systems and accounts. Measured in bytes.")
    available_provisioned: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The amount of space left that the current object can grow before writes are stopped due to a hard limit quota being hit. This is total_provisioned minus the virtual space used for file-systems and buckets. For array and object store accounts it is total_provisioned minus the virtual space used by non-destroyed file-systems and buckets.")
    available_ratio: Optional[Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=None, description="The ratio of the available space versus the total provisioned space.")
    destroyed: Optional[StrictInt] = Field(default=None, description="Unique physical space (excluding snapshots) occupied by destroyed data within the child containers, in bytes. For buckets and filesystems, the destroyed space will be 0 as they cannot have child containers. For the whole array, the space will be the sum of all destroyed buckets and filesystems.")
    destroyed_virtual: Optional[StrictInt] = Field(default=None, description="The amount of destroyed logically written data within the child containers, in bytes. For buckets and filesystems, the destroyed virtual space will be 0 as they cannot have child containers. For the whole array, the space will be the sum of all destroyed buckets and filesystems.")
    __properties: ClassVar[List[str]] = ["data_reduction", "snapshots", "total_physical", "unique", "virtual", "total_provisioned", "available_provisioned", "available_ratio", "destroyed", "destroyed_virtual"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "data_reduction",
            "snapshots",
            "total_physical",
            "unique",
            "virtual",
            "destroyed",
            "destroyed_virtual",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Space from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Space from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "data_reduction": obj.get("data_reduction"),
            "snapshots": obj.get("snapshots"),
            "total_physical": obj.get("total_physical"),
            "unique": obj.get("unique"),
            "virtual": obj.get("virtual"),
            "total_provisioned": obj.get("total_provisioned"),
            "available_provisioned": obj.get("available_provisioned"),
            "available_ratio": obj.get("available_ratio"),
            "destroyed": obj.get("destroyed"),
            "destroyed_virtual": obj.get("destroyed_virtual")
        })
        return _obj


