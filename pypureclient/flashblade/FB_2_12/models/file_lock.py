# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.12, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_12.models.file_lock_range import FileLockRange
from pypureclient.flashblade.FB_2_12.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_12.models.fixed_reference_no_id import FixedReferenceNoId
from typing import Optional, Set
from typing_extensions import Self

class FileLock(BaseModel):
    """
    FileLock
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    client: Optional[FixedReferenceNoId] = Field(default=None, description="Reference to the file system client that holds the lock.")
    source: Optional[FixedReference] = Field(default=None, description="Reference to location where the path/inode can be found.")
    path: Optional[StrictStr] = Field(default=None, description="Path to the file where the lock is found relative to `source`. If it is longer than 1023 characters, it will be truncated and only the last 1023 characters will be returned. If multiple hard links exist to the file on which the lock is held, only one is returned. This field will be `null` if the path cannot be resolved.")
    inode: Optional[StrictInt] = Field(default=None, description="The inode of the file where the lock is found relative to the specified `source`.")
    range: Optional[FileLockRange] = None
    created_at: Optional[StrictInt] = Field(default=None, description="Creation timestamp of the lock. Measured in milliseconds since the UNIX epoch.")
    access_type: Optional[StrictStr] = Field(default=None, description="Type of access the lock provides. Valid values are `shared`, `exclusive` and `no-access`.")
    protocol: Optional[StrictStr] = Field(default=None, description="The protocol utilized for obtaining and managing the lock. Valid values include `NLM`, `NFSv4.1` and `SMB`.")
    __properties: ClassVar[List[str]] = ["name", "client", "source", "path", "inode", "range", "created_at", "access_type", "protocol"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "path",
            "inode",
            "access_type",
            "protocol",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of client
        if self.client and (include_readonly or "client" not in excluded_fields):
            _dict['client'] = self.client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source and (include_readonly or "source" not in excluded_fields):
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of range
        if self.range and (include_readonly or "range" not in excluded_fields):
            _dict['range'] = self.range.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileLock from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileLock from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "client": FixedReferenceNoId.from_dict(obj["client"]) if obj.get("client") is not None else None,
            "source": FixedReference.from_dict(obj["source"]) if obj.get("source") is not None else None,
            "path": obj.get("path"),
            "inode": obj.get("inode"),
            "range": FileLockRange.from_dict(obj["range"]) if obj.get("range") is not None else None,
            "created_at": obj.get("created_at"),
            "access_type": obj.get("access_type"),
            "protocol": obj.get("protocol")
        })
        return _obj


