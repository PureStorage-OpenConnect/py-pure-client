# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.12, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist
from pypureclient.flashblade.FB_2_12.models.fixed_reference import FixedReference


class NfsExportPolicyRuleInPolicy(BaseModel):
    """
    NfsExportPolicyRuleInPolicy
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    access: Optional[StrictStr] = Field(default=None, description="Specifies access control for the export. Valid values are `root-squash`, `all-squash`, and `no-squash`. `root-squash` prevents client users and groups with root privilege from mapping their root privilege to a file system. All users with UID 0 will have their UID mapped to anonuid. All users with GID 0 will have their GID mapped to anongid. `all-squash` maps all UIDs (including root) to anonuid and all GIDs (including root) to anongid. `no-squash` allows users and groups to access the file system with their UIDs and GIDs. The default is `root-squash` if not specified.")
    anongid: Optional[StrictStr] = Field(default=None, description="Any user whose GID is affected by an `access` of `root_squash` or `all_squash` will have their GID mapped to `anongid`. The default `anongid` is null, which means 65534. Use \"\" to clear.")
    anonuid: Optional[StrictStr] = Field(default=None, description="Any user whose UID is affected by an `access` of `root_squash` or `all_squash` will have their UID mapped to `anonuid`. The default `anonuid` is null, which means 65534. Use \"\" to clear.")
    atime: Optional[StrictBool] = Field(default=None, description="If `true`, after a read operation has occurred, the inode access time is updated only if any of the following conditions is true: the previous access time is less than the inode modify time, the previous access time is less than the inode change time, or the previous access time is more than 24 hours ago. If `false`, disables the update of inode access times after read operations. Defaults to `true`.")
    client: Optional[StrictStr] = Field(default=None, description="Specifies the clients that will be permitted to access the export. Accepted notation is a single IP address, subnet in CIDR notation, netgroup, hostname (see RFC-1123 part 2.1), fully qualified domain name (see RFC-1123 part 2.1, RFC 2181 part 11), wildcards with fully qualified domain name or hostname, or anonymous (`*`). The default is `*` if not specified.")
    fileid_32bit: Optional[StrictBool] = Field(default=None, description="Whether the file id is 32 bits or not. Defaults to `false`.")
    permission: Optional[StrictStr] = Field(default=None, description="Specifies which read-write client access permissions are allowed for the export. Valid values are `rw` and `ro`. The default is `ro` if not specified.")
    policy: Optional[FixedReference] = Field(default=None, description="The policy to which this rule belongs.")
    policy_version: Optional[StrictStr] = Field(default=None, description="The policy's version. This can be used when updating the resource to ensure there aren't any updates to the policy since the resource was read.")
    secure: Optional[StrictBool] = Field(default=None, description="If `true`, prevents NFS access to client connections coming from non-reserved ports. Applies to NFSv3, NFSv4.1, and auxiliary protocols MOUNT and NLM. If `false`, allows NFS access to client connections coming from non-reserved ports. Applies to NFSv3, NFSv4.1, and auxiliary protocols MOUNT and NLM. The default is `false` if not specified.")
    security: Optional[conlist(StrictStr)] = Field(default=None, description="The security flavors to use for accessing files on this mount point.  If the server does not support the requested flavor, the mount operation fails. If `sys`, trusts the client to specify user's identity. If `krb5`, provides cryptographic proof of a user's identity in each RPC request. This provides  strong verification of the identity of users accessing data on the server. Note that additional configuration besides adding this mount option is required in order to enable Kerberos security. If `krb5i`, adds integrity checking to krb5, to ensure the data has not been tampered with. If `krb5p`, adds integrity checking and encryption to krb5. This is the most secure setting, but it also involves the most performance overhead. The default is `sys` if not specified.")
    index: Optional[StrictInt] = Field(default=None, description="The index within the policy. The `index` indicates the order the rules are evaluated.")
    __properties = ["id", "name", "access", "anongid", "anonuid", "atime", "client", "fileid_32bit", "permission", "policy", "policy_version", "secure", "security", "index"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "policy_version",
                "index",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of policy
        if _include_in_dict('policy', include_readonly, excluded_fields, none_fields):
            _dict['policy'] = self.policy.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> NfsExportPolicyRuleInPolicy:
        """Create an instance of NfsExportPolicyRuleInPolicy from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> NfsExportPolicyRuleInPolicy:
        """Create an instance of NfsExportPolicyRuleInPolicy from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return NfsExportPolicyRuleInPolicy.parse_obj(obj)

        _obj = NfsExportPolicyRuleInPolicy.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "access": obj.get("access"),
            "anongid": obj.get("anongid"),
            "anonuid": obj.get("anonuid"),
            "atime": obj.get("atime"),
            "client": obj.get("client"),
            "fileid_32bit": obj.get("fileid_32bit"),
            "permission": obj.get("permission"),
            "policy": FixedReference.from_dict(obj.get("policy")) if obj.get("policy") is not None else None,
            "policy_version": obj.get("policy_version"),
            "secure": obj.get("secure"),
            "security": obj.get("security"),
            "index": obj.get("index")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

