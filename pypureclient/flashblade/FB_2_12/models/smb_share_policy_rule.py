# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.12, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.12
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from pypureclient.flashblade.FB_2_12.models.fixed_reference import FixedReference


class SmbSharePolicyRule(BaseModel):
    """
    SmbSharePolicyRule
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    change: Optional[StrictStr] = Field(default=None, description="The state of the principal's Change access permission. Valid values are `allow` and `deny`. When not set, value is `null`. When allowed, includes all access granted by the Read permission. Users can also change data within files and add or delete files and folders. When denied, these operations are explicitly blocked. If not set for any applicable rule on any applicable policy, acts as an implicit deny. If set to `allow`, implicitly sets the Read permission to `allow`. This is incompatible with explicitly setting any permission to `deny`. If set to `deny`, implicitly sets the Read permission to `deny`, and clears the Full Control permission if it is currently `allow`. This is incompatible with explicitly setting any permission to `allow`. If set to an empty string (`\"\"`), the value (and implicitly the Full Control permission) will be cleared. This is incompatible with explicitly setting the Full Control permission to `allow` or `deny`.")
    full_control: Optional[StrictStr] = Field(default=None, description="The state of the principal's Full Control access permission. Valid values are `allow` and `deny`. When not set, value is `null`. When allowed, includes all access granted by the Change permission. Users can also change the permissions for files and folders. When denied, these operations are explicitly blocked. If not set for any applicable rule on any applicable policy, acts as an implicit deny. If set to `allow`, implicitly sets the Change and Read permissions to `allow`. This is incompatible with explicitly setting any permission to `deny`. If set to `deny`, implicitly sets the Change and Read permissions to `deny`. This is incompatible with explicitly setting any permission to `allow`. If set to an empty string (`\"\"`), the value will be cleared.")
    policy: Optional[FixedReference] = Field(default=None, description="The policy to which this rule belongs.")
    principal: Optional[StrictStr] = Field(default=None, description="The user or group who is the subject of this rule, and their domain. If modifying this value, providing the domain is optional. If no domain is provided, it will be derived if possible. For example, `PURESTORAGE\\Administrator`, `samplegroup@PureStorage`, or `sampleuser`.")
    read: Optional[StrictStr] = Field(default=None, description="The state of the principal's Read access permission. Valid values are `allow` and `deny`. When allowed, users can view file names, read the data in those files, and run some programs. When denied, these operations are explicitly blocked. If set to `allow`, implicitly clears the Full Control and Change permissions if they are currently `deny`. This is incompatible with explicitly setting any permission to `deny`. If set to `deny`, implicitly clears the Full Control and Change permissions if they are currently `allow`. This is incompatible with explicitly setting any permission to `allow`.")
    __properties = ["id", "name", "change", "full_control", "policy", "principal", "read"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
                "principal",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of policy
        if _include_in_dict('policy', include_readonly, excluded_fields, none_fields):
            _dict['policy'] = self.policy.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> SmbSharePolicyRule:
        """Create an instance of SmbSharePolicyRule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> SmbSharePolicyRule:
        """Create an instance of SmbSharePolicyRule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SmbSharePolicyRule.parse_obj(obj)

        _obj = SmbSharePolicyRule.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "change": obj.get("change"),
            "full_control": obj.get("full_control"),
            "policy": FixedReference.from_dict(obj.get("policy")) if obj.get("policy") is not None else None,
            "principal": obj.get("principal"),
            "read": obj.get("read")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

