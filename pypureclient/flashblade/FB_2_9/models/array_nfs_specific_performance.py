# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.9, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ArrayNfsSpecificPerformance(BaseModel):
    """
    ArrayNfsSpecificPerformance
    """ # noqa: E501
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    accesses_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="ACCESS requests processed per second.")
    aggregate_file_metadata_creates_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Sum of file-level or directory-level create-like metadata requests per second. Includes CREATE, LINK, MKDIR, and SYMLINK.")
    aggregate_file_metadata_modifies_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Sum of file-level or directory-level modify-like and delete-like metadata requests per second. Includes REMOVE, RENAME, RMDIR, and SETATTR.")
    aggregate_file_metadata_reads_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Sum of file-level or directory-level read-like metadata requests per second. Includes GETATTR, LOOKUP, PATHCONF, READDIR, READDIRPLUS, and READLINK.")
    aggregate_other_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Sum of all other requests processed per second. This includes COMMIT, MKNOD, NULL, NLM operations, and operations which are supported for NFSv4.1 but not NFSv3.")
    aggregate_share_metadata_reads_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Sum of share-level read-like metadata requests per second. Includes ACCESS, FSINFO, and FSSTAT.")
    aggregate_usec_per_file_metadata_create_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a file-level or directory-level create-like metadata request. Includes CREATE, LINK, MKDIR, and SYMLINK.")
    aggregate_usec_per_file_metadata_modify_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a file-level or directory-level modify-like or delete-like metadata request. Includes REMOVE, RENAME, RMDIR, and SETATTR.")
    aggregate_usec_per_file_metadata_read_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a file-level or directory-level read-like metadata request. Includes GETATTR, LOOKUP, PATHCONF, READDIR, READDIRPLUS, and READLINK.")
    aggregate_usec_per_other_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process all other requests. This includes COMMIT, MKNOD, NULL, NLM operations, and operations which are supported for NFSv4.1 but not NFSv3.")
    aggregate_usec_per_share_metadata_read_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a share-level read-like metadata request. Includes ACCESS, FSINFO, and FSSTAT.")
    creates_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="CREATE requests processed per second.")
    fsinfos_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="FSINFO requests processed per second.")
    fsstats_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="FSSTAT requests processed per second.")
    getattrs_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="GETATTR requests processed per second.")
    links_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="LINK requests processed per second.")
    lookups_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="LOOKUP requests processed per second.")
    mkdirs_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="MKDIR requests processed per second.")
    pathconfs_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="PATHCONF requests processed per second.")
    reads_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="READ requests processed per second.")
    readdirs_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="READDIR requests processed per second.")
    readdirpluses_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="READDIRPLUS requests processed per second.")
    readlinks_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="READLINK requests processed per second.")
    removes_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="REMOVE requests processed per second.")
    renames_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="RENAME requests processed per second.")
    rmdirs_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="RMDIR requests processed per second.")
    setattrs_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="SETATTR requests processed per second.")
    symlinks_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="SYMLINK requests processed per second.")
    time: Optional[StrictInt] = Field(default=None, description="Sample time in milliseconds since UNIX epoch.")
    writes_per_sec: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="WRITE requests processed per second.")
    usec_per_access_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an ACCESS request.")
    usec_per_create_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a CREATE request.")
    usec_per_fsinfo_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an FSINFO request.")
    usec_per_fsstat_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an FSSTAT request.")
    usec_per_getattr_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a GETATTR request.")
    usec_per_link_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a LINK request.")
    usec_per_lookup_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a LOOKUP request.")
    usec_per_mkdir_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a MKDIR request.")
    usec_per_pathconf_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a PATHCONF request.")
    usec_per_read_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READ request.")
    usec_per_readdir_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READDIR request.")
    usec_per_readdirplus_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READDIRPLUS request.")
    usec_per_readlink_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a READLINK request.")
    usec_per_remove_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a REMOVE request.")
    usec_per_rename_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a RENAME request.")
    usec_per_rmdir_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process an RMDIR request.")
    usec_per_setattr_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a SETATTR request.")
    usec_per_symlink_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a SYMLINK request.")
    usec_per_write_op: Optional[Union[Annotated[float, Field(strict=True, ge=0)], Annotated[int, Field(strict=True, ge=0)]]] = Field(default=None, description="Average time, measured in microseconds, it takes the array to process a WRITE request.")
    __properties: ClassVar[List[str]] = ["name", "id", "accesses_per_sec", "aggregate_file_metadata_creates_per_sec", "aggregate_file_metadata_modifies_per_sec", "aggregate_file_metadata_reads_per_sec", "aggregate_other_per_sec", "aggregate_share_metadata_reads_per_sec", "aggregate_usec_per_file_metadata_create_op", "aggregate_usec_per_file_metadata_modify_op", "aggregate_usec_per_file_metadata_read_op", "aggregate_usec_per_other_op", "aggregate_usec_per_share_metadata_read_op", "creates_per_sec", "fsinfos_per_sec", "fsstats_per_sec", "getattrs_per_sec", "links_per_sec", "lookups_per_sec", "mkdirs_per_sec", "pathconfs_per_sec", "reads_per_sec", "readdirs_per_sec", "readdirpluses_per_sec", "readlinks_per_sec", "removes_per_sec", "renames_per_sec", "rmdirs_per_sec", "setattrs_per_sec", "symlinks_per_sec", "time", "writes_per_sec", "usec_per_access_op", "usec_per_create_op", "usec_per_fsinfo_op", "usec_per_fsstat_op", "usec_per_getattr_op", "usec_per_link_op", "usec_per_lookup_op", "usec_per_mkdir_op", "usec_per_pathconf_op", "usec_per_read_op", "usec_per_readdir_op", "usec_per_readdirplus_op", "usec_per_readlink_op", "usec_per_remove_op", "usec_per_rename_op", "usec_per_rmdir_op", "usec_per_setattr_op", "usec_per_symlink_op", "usec_per_write_op"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        * OpenAPI `readOnly` fields are excluded, if `include_readonly` is `False`.
        """
        excluded_fields: Set[str] = set([
            "name",
            "id",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArrayNfsSpecificPerformance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArrayNfsSpecificPerformance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "name": obj.get("name"),
            "id": obj.get("id"),
            "accesses_per_sec": obj.get("accesses_per_sec"),
            "aggregate_file_metadata_creates_per_sec": obj.get("aggregate_file_metadata_creates_per_sec"),
            "aggregate_file_metadata_modifies_per_sec": obj.get("aggregate_file_metadata_modifies_per_sec"),
            "aggregate_file_metadata_reads_per_sec": obj.get("aggregate_file_metadata_reads_per_sec"),
            "aggregate_other_per_sec": obj.get("aggregate_other_per_sec"),
            "aggregate_share_metadata_reads_per_sec": obj.get("aggregate_share_metadata_reads_per_sec"),
            "aggregate_usec_per_file_metadata_create_op": obj.get("aggregate_usec_per_file_metadata_create_op"),
            "aggregate_usec_per_file_metadata_modify_op": obj.get("aggregate_usec_per_file_metadata_modify_op"),
            "aggregate_usec_per_file_metadata_read_op": obj.get("aggregate_usec_per_file_metadata_read_op"),
            "aggregate_usec_per_other_op": obj.get("aggregate_usec_per_other_op"),
            "aggregate_usec_per_share_metadata_read_op": obj.get("aggregate_usec_per_share_metadata_read_op"),
            "creates_per_sec": obj.get("creates_per_sec"),
            "fsinfos_per_sec": obj.get("fsinfos_per_sec"),
            "fsstats_per_sec": obj.get("fsstats_per_sec"),
            "getattrs_per_sec": obj.get("getattrs_per_sec"),
            "links_per_sec": obj.get("links_per_sec"),
            "lookups_per_sec": obj.get("lookups_per_sec"),
            "mkdirs_per_sec": obj.get("mkdirs_per_sec"),
            "pathconfs_per_sec": obj.get("pathconfs_per_sec"),
            "reads_per_sec": obj.get("reads_per_sec"),
            "readdirs_per_sec": obj.get("readdirs_per_sec"),
            "readdirpluses_per_sec": obj.get("readdirpluses_per_sec"),
            "readlinks_per_sec": obj.get("readlinks_per_sec"),
            "removes_per_sec": obj.get("removes_per_sec"),
            "renames_per_sec": obj.get("renames_per_sec"),
            "rmdirs_per_sec": obj.get("rmdirs_per_sec"),
            "setattrs_per_sec": obj.get("setattrs_per_sec"),
            "symlinks_per_sec": obj.get("symlinks_per_sec"),
            "time": obj.get("time"),
            "writes_per_sec": obj.get("writes_per_sec"),
            "usec_per_access_op": obj.get("usec_per_access_op"),
            "usec_per_create_op": obj.get("usec_per_create_op"),
            "usec_per_fsinfo_op": obj.get("usec_per_fsinfo_op"),
            "usec_per_fsstat_op": obj.get("usec_per_fsstat_op"),
            "usec_per_getattr_op": obj.get("usec_per_getattr_op"),
            "usec_per_link_op": obj.get("usec_per_link_op"),
            "usec_per_lookup_op": obj.get("usec_per_lookup_op"),
            "usec_per_mkdir_op": obj.get("usec_per_mkdir_op"),
            "usec_per_pathconf_op": obj.get("usec_per_pathconf_op"),
            "usec_per_read_op": obj.get("usec_per_read_op"),
            "usec_per_readdir_op": obj.get("usec_per_readdir_op"),
            "usec_per_readdirplus_op": obj.get("usec_per_readdirplus_op"),
            "usec_per_readlink_op": obj.get("usec_per_readlink_op"),
            "usec_per_remove_op": obj.get("usec_per_remove_op"),
            "usec_per_rename_op": obj.get("usec_per_rename_op"),
            "usec_per_rmdir_op": obj.get("usec_per_rmdir_op"),
            "usec_per_setattr_op": obj.get("usec_per_setattr_op"),
            "usec_per_symlink_op": obj.get("usec_per_symlink_op"),
            "usec_per_write_op": obj.get("usec_per_write_op")
        })
        return _obj


