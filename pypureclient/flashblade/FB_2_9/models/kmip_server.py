# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.9, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr, validator
from pypureclient.flashblade.FB_2_9.models.reference import Reference


class KmipServer(BaseModel):
    """
    KmipServer
    """
    id: Optional[StrictStr] = Field(default=None, description="A non-modifiable, globally unique ID chosen by the system.")
    name: Optional[StrictStr] = Field(default=None, description="Name of the object (e.g., a file system or snapshot).")
    ca_certificate: Optional[Reference] = Field(default=None, description="CA certificate used to validate the authenticity of the configured servers.")
    ca_certificate_group: Optional[Reference] = Field(default=None, description="A certificate group containing CA certificates that can be used to validate the authenticity of the configured servers.")
    uris: Optional[conlist(constr(strict=True), max_items=30, min_items=1)] = Field(default=None, description="List of URIs for the configured KMIP servers in the format [protocol://]hostname:port.")
    __properties = ["id", "name", "ca_certificate", "ca_certificate_group", "uris"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "id",
                "name",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of ca_certificate
        if _include_in_dict('ca_certificate', include_readonly, excluded_fields, none_fields):
            _dict['ca_certificate'] = self.ca_certificate.to_dict(include_readonly=include_readonly)
        # override the default output from pydantic by calling `to_dict()` of ca_certificate_group
        if _include_in_dict('ca_certificate_group', include_readonly, excluded_fields, none_fields):
            _dict['ca_certificate_group'] = self.ca_certificate_group.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> KmipServer:
        """Create an instance of KmipServer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> KmipServer:
        """Create an instance of KmipServer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return KmipServer.parse_obj(obj)

        _obj = KmipServer.construct(_fields_set=None, **{
            "id": obj.get("id"),
            "name": obj.get("name"),
            "ca_certificate": Reference.from_dict(obj.get("ca_certificate")) if obj.get("ca_certificate") is not None else None,
            "ca_certificate_group": Reference.from_dict(obj.get("ca_certificate_group")) if obj.get("ca_certificate_group") is not None else None,
            "uris": obj.get("uris")
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

