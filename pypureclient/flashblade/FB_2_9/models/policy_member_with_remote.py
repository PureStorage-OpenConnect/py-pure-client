# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.9, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.9
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from pypureclient.flashblade.FB_2_9.models.fixed_reference import FixedReference
from pypureclient.flashblade.FB_2_9.models.location_reference import LocationReference
from pypureclient.flashblade.FB_2_9.models.member_link import MemberLink
from typing import Optional, Set
from typing_extensions import Self

class PolicyMemberWithRemote(BaseModel):
    """
    PolicyMemberWithRemote
    """ # noqa: E501
    policy: Optional[LocationReference] = Field(default=None, description="Reference to the policy.")
    member: Optional[FixedReference] = Field(default=None, description="Reference to the resource the policy is applied to.")
    link: Optional[MemberLink] = Field(default=None, description="Only populated if the `member` is a file system replica link. Contains additional information about the link.")
    __properties: ClassVar[List[str]] = ["policy", "member", "link"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    def to_dict(self, include_readonly: bool = False) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.

        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=set() if include_readonly else excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of policy
        if self.policy and (include_readonly or "policy" not in excluded_fields):
            _dict['policy'] = self.policy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of member
        if self.member and (include_readonly or "member" not in excluded_fields):
            _dict['member'] = self.member.to_dict()
        # override the default output from pydantic by calling `to_dict()` of link
        if self.link and (include_readonly or "link" not in excluded_fields):
            _dict['link'] = self.link.to_dict()
        return _dict

    def __getitem__(self, key):
        return getattr(self, key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PolicyMemberWithRemote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PolicyMemberWithRemote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_construct(_fields_set=None, **{
            "policy": LocationReference.from_dict(obj["policy"]) if obj.get("policy") is not None else None,
            "member": FixedReference.from_dict(obj["member"]) if obj.get("member") is not None else None,
            "link": MemberLink.from_dict(obj["link"]) if obj.get("link") is not None else None
        })
        return _obj


