# coding: utf-8

"""
    FlashBlade REST API

    A lightweight client for FlashBlade REST API 2.19, developed by Pure Storage, Inc. (http://www.purestorage.com/).

    The version of the OpenAPI document: 2.19
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json
from typing import Set, Dict, Any

from typing import Optional

try:
    from pydantic.v1 import BaseModel, Field, StrictStr
except ModuleNotFoundError:
    from pydantic import BaseModel, Field, StrictStr
from pypureclient.flashblade.FB_2_19.models.reference import Reference


class StorageClassInfo(BaseModel):
    """
    StorageClassInfo
    """
    name: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(default=None, description="The status of the transition from the policy to the requested policy. If there is an ongoing transition, the status will be one of `In-Progress` or `Queued`. If there is no transition ongoing, this field will be null.")
    status_details: Optional[StrictStr] = Field(default=None, description="Additional details about the status of the transition. If there is no transition ongoing, this field will be null.")
    tiering_policy: Optional[Reference] = Field(default=None, description="The storage class tiering policy defines tiering for data within the container. If specified, data is written to the container's `S500X-S` (speed) storage class by default, then tiered to `S500X-A` (archival) storage class based on the policy. If not specified, all data in the container is written to the container's current storage class.")
    __properties = ["name", "status", "status_details", "tiering_policy"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.to_dict(include_readonly=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.as_request_dict())

    def as_request_dict(self) -> Dict[str, Any]:
        return self.to_dict(include_readonly=False)

    def to_dict(self, include_readonly: bool=True) -> Dict[str, Any]:

        """Returns the dictionary representation of the model using alias"""
        excluded_fields: Set[str] = set()
        if not include_readonly:
            excluded_fields.update([
                "status",
                "status_details",
            ])
        none_fields: Set[str] = set()
        for _field in self.__fields__.keys():
            if super().__getattribute__(_field) is None:
                none_fields.add(_field)

        _dict = self.dict(by_alias=True, exclude=excluded_fields, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tiering_policy
        if _include_in_dict('tiering_policy', include_readonly, excluded_fields, none_fields):
            _dict['tiering_policy'] = self.tiering_policy.to_dict(include_readonly=include_readonly)
        return _dict

    def __getitem__(self, key):
        return super().__getattribute__(key)

    def __setitem__(self, key, value):
        setattr(self, key, value)

    def __delitem__(self, key):
        setattr(self, key, None)

    def __getattribute__(self, name: str) -> Any:
        _value = super().__getattribute__(name)
        if _value is None and name in self.__fields__.keys() and _should_raise_on_none():
            raise AttributeError
        return _value

    def __str__(self) -> str:
        return self.to_str()

    def __repr__(self) -> str:
        return self.to_str()

    @classmethod
    def from_json(cls, json_str: str) -> StorageClassInfo:
        """Create an instance of StorageClassInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    @classmethod
    def from_dict(cls, obj: dict) -> StorageClassInfo:
        """Create an instance of StorageClassInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StorageClassInfo.parse_obj(obj)

        _obj = StorageClassInfo.construct(_fields_set=None, **{
            "name": obj.get("name"),
            "status": obj.get("status"),
            "status_details": obj.get("status_details"),
            "tiering_policy": Reference.from_dict(obj.get("tiering_policy")) if obj.get("tiering_policy") is not None else None
        })
        return _obj

def _should_raise_on_none() -> bool:
    import importlib
    _package = importlib.import_module(__package__)
    return _package._attribute_error_on_none

def _include_in_dict(name: str, include_readonly: bool, excluded_fields: Set[str], none_fields: Set[str]) -> bool:
    if name in none_fields:
        return False
    return (include_readonly or name not in excluded_fields)

